.field {
    --field-active-border-color: var(--tavenem-color-primary);
    --field-active-border-hover-color: var(--tavenem-color-primary-lighten);
    --field-active-label-color: var(--tavenem-color-primary);
    --field-border-color: var(--tavenem-color-border-input);
    --field-border-hover-color: var(--tavenem-color-action);
    --field-color: var(--tavenem-color-text);
    --field-label-color: var(--tavenem-color-text-secondary);
    border: 0;
    color: var(--tavenem-color-text);
    display: flex;
    flex-basis: auto;
    flex-direction: column;
    flex-shrink: 1;
    margin: 0;
    margin-bottom: .5rem;
    margin-top: 1rem;
    max-width: 100%;
    padding: 0;
    position: relative;
    vertical-align: top;

    > label {
        color: var(--field-label-color);
        display: block;
        font-size: 1rem;
        font-weight: var(--tavenem-font-weight);
        left: 0;
        line-height: 1;
        padding: 0;
        pointer-events: none;
        position: absolute;
        top: 0;
        transform: translate(0, calc(1rem + 8px)) scale(1);
        transform-origin: top left;
        transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
        z-index: 0;

        *[dir="rtl"] & {
            left: unset;
            right: 0;
            transform-origin: top right;
        }
    }

    &.required > label:after {
        color: var(--tavenem-color-error);
        content: " *";
    }

    &:not(.filled, .outlined, .no-label) {
        > .input, > .input-content {
            margin-top: 1rem;
        }
    }

    &:not(.outlined) > .input {
        &:before {
            border-color: var(--field-border-color);
            border-bottom-style: solid;
            border-bottom-width: 1px;
            bottom: 0;
            content: "\00a0";
            left: 0;
            right: 0;
            pointer-events: none;
            position: absolute;
            transition: border-bottom 0.2s, border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, background-color 0.2s;
        }

        &:after {
            border-bottom-color: var(--tavenem-color-error);
            border-bottom-style: solid;
            border-bottom-width: 2px;
            bottom: 0;
            content: "";
            left: 0;
            right: 0;
            pointer-events: none;
            position: absolute;
            transform: scaleX(0);
            transition: transform 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;
        }
    }

    &:not(.outlined, .disabled, .read-only) > .input:hover:before {
        border-bottom-color: var(--field-border-hover-color);
    }

    &.filled {
        background-color: transparent;

        > .input {
            background-color: rgba(0, 0, 0, 0.09);
            border-top-left-radius: var(--tavenem-border-radius);
            border-top-right-radius: var(--tavenem-border-radius);
            padding-bottom: 10px;
            padding-left: 12px;
            padding-right: 12px;
            padding-top: calc(1rem + 11px);
            position: relative;
            transition: background-color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;

            &:hover {
                background-color: rgba(0, 0, 0, 0.13);
            }

            &:disabled {
                background-color: rgba(0, 0, 0, 0.12);
            }

            input {
                &:-webkit-autofill {
                    border-top-left-radius: inherit;
                    border-top-right-radius: inherit;
                }
            }
        }

        > label {
            pointer-events: none;
            transform: translate(12px, calc(1rem + 4px)) scale(1);
            z-index: 1;

            *[dir="rtl"] & {
                transform: translate(-12px, calc(1rem + 4px)) scale(1);
            }
        }

        > .field-helpers {
            padding-left: 12px;
            padding-right: 12px;
        }
    }

    &.filled.no-label > .input {
        padding-top: 11px;
    }

    &.outlined {
        > .input {
            background-color: var(--tavenem-color-bg-alt);
            border-color: var(--field-border-color);
            border-radius: var(--tavenem-border-radius);
            border-style: solid;
            border-width: 1px;
            padding-bottom: calc(.5rem + 2.5px);
            padding-left: 14px;
            padding-right: 14px;
            padding-top: calc(.5rem + 2.5px);
            position: relative;
            transition: border-width,border-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;

            &:disabled {
                border-color: var(--tavenem-color-action-disabled);
            }

            input {
                &:-webkit-autofill {
                    border-radius: inherit;
                }
            }
        }

        > label {
            background-color: var(--tavenem-color-bg-alt);
            line-height: calc(1.25rem + 10px);
            padding: 0px 5px;
            pointer-events: none;
            transform: translate(14px, calc(.5rem + 2.5px)) scale(1);

            *[dir="rtl"] & {
                transform: translate(-14px, calc(.5rem + 2.5px)) scale(1);
            }
        }

        > .field-helpers {
            padding-left: 8px;
            padding-right: 8px;
        }
    }

    &.outlined.no-label > .input {
        padding-bottom: 2.5px;
        padding-top: 2.5px;
    }

    &.outlined:not(.disabled, .read-only) > .input:hover {
        border-color: var(--field-border-hover-color);
    }

    &:focus-within:not(.disabled, .read-only) {
        --field-border-color: var(--field-active-border-color);
        --field-border-hover-color: var(--field-active-border-hover-color);
        --field-label-color: var(--field-active-label-color);
    }

    &.shrink, &:focus-within {
        &:not(.filled, .outlined) > label {
            transform: translate(0, 1.5px) scale(.75);
        }

        &.filled > label {
            transform: translate(12px, 10px) scale(.75);

            *[dir="rtl"] & {
                transform: translate(-12px, 10px) scale(.75);
            }
        }

        &.outlined > label {
            transform: translate(14px, -6px) scale(.75);

            *[dir="rtl"] & {
                transform: translate(-14px, -6px) scale(.75);
            }
        }
    }

    &:focus-within, &.invalid {
        > .field-helpers.onfocus {
            opacity: 1;
            pointer-events: auto;
            transform: translateY(0);
            transition: opacity 200ms cubic-bezier(0,0,.2,1) 0ms,color 200ms cubic-bezier(0,0,.2,1) 0ms,transform 200ms cubic-bezier(0,0,.2,1) 0ms;
        }
    }

    &.dense {
        margin-bottom: 2px;
        margin-top: 3px;

        > .input {
            padding-top: 3px;
        }

        > .field-helpers {
            margin-top: 4px;
        }

        &.filled {
            > .input {
                padding-bottom: 6px;
                padding-top: calc(1rem + 7px);

                .btn, tf-icon {
                    margin-top: -7px;
                }
            }

            > label {
                transform: translate(12px, calc(1rem + 1px)) scale(1);

                *[dir="rtl"] & {
                    transform: translate(-12px, calc(1rem + 1px)) scale(1);
                }
            }
        }

        &.outlined {
            > .input {
                padding-bottom: calc(.25rem + 2.5px);
                padding-top: calc(.25rem + 2.5px);
            }

            > label {
                transform: translate(12px, calc(.25rem + 2.5px)) scale(1);

                *[dir="rtl"] & {
                    transform: translate(-12px, calc(.25rem + 2.5px)) scale(1);
                }
            }
        }

        &.outlined.no-label > .input {
            padding-bottom: 2.5px;
            padding-top: 2.5px;
        }

        &.shrink, &:focus-within {
            &:not(.filled, .outlined) > label {
                transform: translate(0, 1.5px) scale(.75);
            }

            &.filled > label {
                transform: translate(12px, 7px) scale(.75);

                *[dir="rtl"] & {
                    transform: translate(-12px, 7px) scale(.75);
                }
            }

            &.outlined > label {
                transform: translate(14px, -6px) scale(.75);

                *[dir="rtl"] & {
                    transform: translate(-14px, -6px) scale(.75);
                }
            }
        }
    }

    &.invalid {
        --field-active-border-color: var(--tavenem-color-error);
        --field-active-border-hover-color: var(--tavenem-color-error);
        --field-active-label-color: var(--tavenem-color-error);
        --field-border-color: var(--tavenem-color-error);
        --field-border-hover-color: var(--tavenem-color-error);
        --field-color: var(--tavenem-color-error);
        --field-label-color: var(--tavenem-color-error);

        &:not(.outlined) > .input:after {
            transform: scaleX(1);
        }
    }

    &:disabled,
    &.disabled,
    &.read-only {
        > .input {
            cursor: default;

            tf-icon {
                pointer-events: none;
            }

            input {
                opacity: 1;
            }

            > .expand {
                cursor: default;
            }
        }
    }

    &.bg-alt {
        background-color: transparent;
    }

    &.primary,
    &.secondary,
    &.tertiary,
    &.danger,
    &.dark,
    &.default,
    &.info,
    &.success,
    &.warning {
        &:not(.invalid, .disabled) {
            --field-active-border-color: var(--tavenem-theme-color);
            --field-active-border-hover-color: var(--tavenem-theme-color-lighten);
            --field-active-label-color: var(--tavenem-theme-color);
            --field-border-color: var(--tavenem-theme-color);
            --field-border-hover-color: var(--tavenem-theme-color-lighten);
            --field-label-color: var(--tavenem-theme-color);
        }

        &.filled {
            background-color: transparent;
            
            > .input:disabled {
                background-color: var(--tavenem-theme-color-hover-bright);
            }
        }
    }

    &.primary.filled > .input {
        background-color: hsla(var(--tavenem-color-primary-hue), var(--tavenem-color-primary-saturation), var(--tavenem-color-primary-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-primary-hue), var(--tavenem-color-primary-saturation), var(--tavenem-color-primary-lightness), 0.13);
        }
    }
    &.secondary.filled > .input {
        background-color: hsla(var(--tavenem-color-secondary-hue), var(--tavenem-color-secondary-saturation), var(--tavenem-color-secondary-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-secondary-hue), var(--tavenem-color-secondary-saturation), var(--tavenem-color-secondary-lightness), 0.13);
        }
    }
    &.tertiary.filled > .input {
        background-color: hsla(var(--tavenem-color-tertiary-hue), var(--tavenem-color-tertiary-saturation), var(--tavenem-color-tertiary-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-tertiary-hue), var(--tavenem-color-tertiary-saturation), var(--tavenem-color-tertiary-lightness), 0.13);
        }
    }
    &.danger.filled > .input {
        background-color: hsla(var(--tavenem-color-danger-hue), var(--tavenem-color-danger-saturation), var(--tavenem-color-danger-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-danger-hue), var(--tavenem-color-danger-saturation), var(--tavenem-color-danger-lightness), 0.13);
        }
    }
    &.dark.filled > .input {
        background-color: hsla(var(--tavenem-color-dark-hue), var(--tavenem-color-dark-saturation), var(--tavenem-color-dark-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-dark-hue), var(--tavenem-color-dark-saturation), var(--tavenem-color-dark-lightness), 0.13);
        }
    }
    &.default.filled > .input {
        background-color: hsla(var(--tavenem-color-default-hue), var(--tavenem-color-default-saturation), var(--tavenem-color-default-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-default-hue), var(--tavenem-color-default-saturation), var(--tavenem-color-default-lightness), 0.13);
        }
    }
    &.info.filled > .input {
        background-color: hsla(var(--tavenem-color-info-hue), var(--tavenem-color-info-saturation), var(--tavenem-color-info-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-info-hue), var(--tavenem-color-info-saturation), var(--tavenem-color-info-lightness), 0.13);
        }
    }
    &.success.filled > .input {
        background-color: hsla(var(--tavenem-color-success-hue), var(--tavenem-color-success-saturation), var(--tavenem-color-success-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-success-hue), var(--tavenem-color-success-saturation), var(--tavenem-color-success-lightness), 0.13);
        }
    }
    &.warning.filled > .input {
        background-color: hsla(var(--tavenem-color-warning-hue), var(--tavenem-color-warning-saturation), var(--tavenem-color-warning-lightness), .09);

        &:hover {
            background-color: hsla(var(--tavenem-color-warning-hue), var(--tavenem-color-warning-saturation), var(--tavenem-color-warning-lightness), 0.13);
        }
    }

    &:disabled,
    &.disabled {
        --field-color: var(--tavenem-color-text-disabled);
        --field-label-color: var(--tavenem-color-text-disabled);

        > .input {
            color: var(--tavenem-color-text-disabled);

            tf-icon {
                color: var(--tavenem-color-text-disabled);
            }
        }

        &.filled > .input {
            background-color: rgba(0, 0, 0, 0.12);
        }

        &.outlined > .input {
            border-color: var(--tavenem-color-action-disabled);
        }
    }
}

.input, .input-content {
    color: var(--field-color);
    display: inline-flex;
    font-size: 1rem;
    font-weight: var(--tavenem-font-weight);
    padding-top: 6px;
    position: relative;
}

.input-content {
    align-self: flex-start;
    flex-direction: column;
}

.input {
    align-items: center;
    box-sizing: content-box;
    column-gap: 8px;
    cursor: text;
    line-height: 1.1875rem;
    min-height: 1.1875rem;
    padding-bottom: 7px;

    input, .input-core {
        appearance: none;
        background: none;
        border: 0;
        box-shadow: none;
        box-sizing: content-box;
        color: currentColor;
        display: block;
        font: inherit;
        margin: 0;
        min-height: calc(1.25rem + 10px);
        min-width: 0;
        padding: 0;
        position: relative;
        width: 100%;
        -webkit-tap-highlight-color: transparent;

        &:not(textarea) {
            height: 1.1875rem;
        }

        &:focus {
            outline: 0;
        }

        &:invalid {
            box-shadow: none;
            color: var(--tavenem-color-error);
        }

        &:disabled {
            opacity: 1;
        }
    }

    input[type=search] {
        -moz-appearance: textfield;
        -webkit-appearance: textfield;
    }

    textarea {
        cursor: auto;
        height: auto;
        letter-spacing: inherit;
        resize: none;
    }

    &:focus-within .range-separator,
    .shrink > & .range-separator {
        visibility: visible;
    }

    > .expand {
        cursor: pointer;
        transition: .3s cubic-bezier(.25,.8,.5,1),visibility 0s;
    }
}

.input textarea::-webkit-scrollbar {
    cursor: crosshair;
    height: 8px;
    width: 8px;
    z-index: 1;
}

.input textarea::-webkit-scrollbar-thumb {
    background: var(--tavenem-color-border-input);
    border-radius: 1px;
}

.input textarea::-webkit-scrollbar-track {
    background: transparent;
}

.input input::placeholder,
.input .input-core::placeholder {
    color: currentColor;
    opacity: 0.42;
    transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
}

.field-helpers {
    color: var(--field-label-color);
    display: flex;
    font-size: 0.75rem;
    font-weight: var(--tavenem-font-weight);
    line-height: 1.66;
    margin-top: 3px;
    overflow: hidden;
    text-align: start;

    &.onfocus {
        opacity: 0;
        pointer-events: none;
        transform: translateY(-100%);
        transition: opacity 50ms cubic-bezier(0,0,.2,1) 0ms,color 200ms cubic-bezier(0,0,.2,1) 0ms,transform 200ms cubic-bezier(0,0,.2,1) 0ms;
    }
}

.range-separator {
    visibility: hidden;
    margin: 0 4px;
}

.picker {
    --field-active-label-color: var(--tavenem-color-primary);
    margin: 0;

    .picker-btn {
        --button-padding-x: var(--button-padding-y);
        align-self: center;
        min-width: 0;
    }

    &.invalid {
        --field-active-label-color: var(--tavenem-color-error);

        > .picker-btn {
            border-color: var(--tavenem-color-error);
        }
    }

    &.primary:not(.invalid, .disabled),
    &.secondary:not(.invalid, .disabled),
    &.tertiary:not(.invalid, .disabled),
    &.danger:not(.invalid, .disabled),
    &.dark:not(.invalid, .disabled),
    &.default:not(.invalid, .disabled),
    &.info:not(.invalid, .disabled),
    &.success:not(.invalid, .disabled),
    &.warning:not(.invalid, .disabled) {
        --field-active-label-color: var(--tavenem-theme-color);
    }
}

.select.open > .input > .expand {
    transform: rotate(-180deg);
}