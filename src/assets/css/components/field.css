.field {
    --field-active-border-color: var(--tavenem-theme-color, var(--tavenem-color-primary));
    --field-active-border-hover-color: var(--tavenem-theme-color-lighten, var(--tavenem-color-primary-lighten));
    --field-active-label-color: var(--tavenem-theme-color, var(--tavenem-color-primary));
    --field-border-color: var(--tavenem-color-border-input);
    --field-border-hover-color: var(--tavenem-color-action);
    --field-color: var(--tavenem-color-text);
    --field-label-color: var(--tavenem-color-text-secondary);
    border: 0;
    color: var(--tavenem-color-text);
    display: flex;
    flex-basis: auto;
    flex-direction: column;
    flex-shrink: 1;
    margin: 0;
    margin-bottom: .5rem;
    margin-top: 1rem;
    max-width: 100%;
    padding: 0;
    position: relative;
    vertical-align: top;

    > label {
        color: var(--field-label-color);
        display: block;
        font-size: 1rem;
        font-weight: var(--tavenem-font-weight);
        left: 0;
        line-height: 1;
        padding: 0;
        pointer-events: none;
        position: absolute;
        top: 0;
        transform: translate(0, calc(1.25rem + 11px)) scale(1);
        transform-origin: top left;
        transition: color 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms,transform 200ms cubic-bezier(0.0, 0, 0.2, 1) 0ms;
        z-index: 0;

        *[dir="rtl"] & {
            left: unset;
            right: 0;
            transform-origin: top right;
        }
    }

    &.required > label:after {
        color: var(--tavenem-color-error);
        content: " *";
    }

    &:not(.filled, .outlined, .no-label) > .input {
        margin-top: 1rem;
    }

    &:not(.outlined) > .input:before {
        border-color: var(--field-border-color);
        border-bottom-style: solid;
        border-bottom-width: 1px;
        bottom: 0;
        content: "\00a0";
        left: 0;
        right: 0;
        pointer-events: none;
        position: absolute;
        transition: border-bottom 0.2s, border-bottom-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms, background-color 0.2s;
    }

    &:not(.outlined, .disabled, [disabled], .read-only, [readonly], [inert]) > .input:hover:before {
        border-bottom-color: var(--field-border-hover-color);
    }

    &.filled {
        background-color: transparent;

        > .input {
            background-color: rgba(0, 0, 0, 0.09);
            border-top-left-radius: var(--tavenem-border-radius);
            border-top-right-radius: var(--tavenem-border-radius);
            padding-bottom: 10px;
            padding-left: 12px;
            padding-right: 12px;
            padding-top: calc(1rem + 11px);
            position: relative;
            transition: background-color 200ms cubic-bezier(0, 0, 0.2, 1) 0ms;

            &:hover {
                background-color: rgba(0, 0, 0, 0.13);
            }

            &:disabled, &[inert], [inert] & {
                background-color: rgba(0, 0, 0, 0.12);
            }

            input {
                &:-webkit-autofill {
                    border-top-left-radius: inherit;
                    border-top-right-radius: inherit;
                }
            }
        }

        > label {
            pointer-events: none;
            transform: translate(12px, calc(1.25rem + 16px)) scale(1);
            z-index: 1;

            *[dir="rtl"] & {
                transform: translate(-12px, calc(1.25rem + 16px)) scale(1);
            }
        }

        > .field-helpers {
            padding-left: 12px;
            padding-right: 12px;
        }
    }

    &.filled.no-label > .input {
        padding-top: 11px;
    }

    &.outlined {
        > .input {
            background-color: var(--tavenem-color-bg-alt);
            border-color: var(--field-border-color);
            border-radius: var(--tavenem-border-radius);
            border-style: solid;
            border-width: 1px;
            padding-bottom: 5px;
            padding-left: 14px;
            padding-right: 14px;
            padding-top: calc(.5rem + 2.5px);
            position: relative;
            transition: border-width,border-color 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;

            &:disabled, &[inert], [inert] & {
                border-color: var(--tavenem-color-action-disabled);
            }

            input {
                &:-webkit-autofill {
                    border-radius: inherit;
                }
            }
        }

        > label {
            background-color: var(--tavenem-color-bg-alt);
            padding: 0px 5px;
            pointer-events: none;
            transform: translate(14px, calc(.75rem + 7.5px)) scale(1);

            *[dir="rtl"] & {
                transform: translate(-14px, calc(.75rem + 7.5px)) scale(1);
            }
        }

        > .field-helpers {
            padding-left: 8px;
            padding-right: 8px;
        }
    }

    &.outlined.no-label > .input {
        padding-bottom: 2.5px;
        padding-top: 2.5px;
    }

    &.outlined:not(.disabled, .read-only, [inert]) > .input:hover {
        border-color: var(--field-border-hover-color);
    }

    &:focus-within:not(.disabled, [disabled], .read-only, [readonly], [inert]) {
        --field-border-color: var(--field-active-border-color);
        --field-border-hover-color: var(--field-active-border-hover-color);
        --field-label-color: var(--field-active-label-color);
    }

    &.shrink,
    &:focus-within,
    &[placeholder],
    &:state(has-value),
    &:has(textarea.has-placeholder),
    &:has(textarea:not(.has-placeholder, :placeholder-shown)) {
        &:not(.filled, .outlined) > label {
            transform: translate(0, 1.5px) scale(.75);
        }

        &.filled > label {
            transform: translate(12px, 10px) scale(.75);

            *[dir="rtl"] & {
                transform: translate(-12px, 10px) scale(.75);
            }
        }

        &.outlined > label {
            transform: translate(14px, -6px) scale(.75);

            *[dir="rtl"] & {
                transform: translate(-14px, -6px) scale(.75);
            }
        }
    }

    &:focus-within,
    &.invalid,
    &:invalid,
    &:has(textarea:invalid) {
        > .field-helpers.onfocus {
            opacity: 1;
            pointer-events: auto;
            transform: translateY(0);
            transition: opacity 200ms cubic-bezier(0,0,.2,1) 0ms,color 200ms cubic-bezier(0,0,.2,1) 0ms,transform 200ms cubic-bezier(0,0,.2,1) 0ms;
        }
    }

    &.dense {
        margin-bottom: 2px;
        margin-top: 3px;

        > .input {
            padding-bottom: 3px;
            padding-top: 3px;
        }

        > label {
            transform: translate(0, calc(1.25rem + 8px)) scale(1);

            *[dir="rtl"] & {
                transform: translate(0, calc(1.25rem + 8px)) scale(1);
            }
        }

        > .field-helpers {
            margin-top: 4px;
        }

        &.filled {
            --tavenem-field-input-button-margin-top: -7px;

            > .input {
                padding-bottom: 3px;
                padding-left: 3px;
                padding-right: 3px;
                padding-top: calc(1rem + 4px);

                .btn, tf-icon {
                    margin-top: -4px;
                }
            }

            > label {
                transform: translate(3px, calc(1.25rem + 9px)) scale(1);

                *[dir="rtl"] & {
                    transform: translate(-3px, calc(1.25rem + 9px)) scale(1);
                }
            }
        }

        &.outlined {
            > .input {
                padding-bottom: 5px;
                padding-left: 5px;
                padding-right: 5px;
                padding-top: calc(.5rem + 2.5px);
            }

            > label {
                transform: translate(5px, calc(.75rem + 7.5px)) scale(1);

                *[dir="rtl"] & {
                    transform: translate(-5px, calc(.75rem + 7.5px)) scale(1);
                }
            }
        }

        &.outlined.no-label > .input {
            padding-bottom: 2.5px;
            padding-top: 2.5px;
        }
        
        &.shrink,
        &:focus-within,
        &:has(textarea.has-placeholder),
        &:has(textarea:not(.has-placeholder, :placeholder-shown)) {
            &:not(.filled, .outlined) > label {
                transform: translate(0, 1.5px) scale(.75);
            }

            &.filled > label {
                transform: translate(3px, 4px) scale(.75);

                *[dir="rtl"] & {
                    transform: translate(-3px, 4px) scale(.75);
                }
            }

            &.outlined > label {
                transform: translate(5px, -6px) scale(.75);

                *[dir="rtl"] & {
                    transform: translate(-5px, -6px) scale(.75);
                }
            }
        }
    }

    &.invalid,
    &:invalid,
    &:has(textarea:invalid),
    &:has(input:invalid),
    &:has(tf-numeric-input:invalid) {
        --field-active-border-color: var(--tavenem-color-error);
        --field-active-border-hover-color: var(--tavenem-color-error);
        --field-active-label-color: var(--tavenem-color-error);
        --field-border-color: var(--tavenem-color-error);
        --field-border-hover-color: var(--tavenem-color-error);
        --field-color: var(--tavenem-color-error);
        --field-label-color: var(--tavenem-color-error);
    }

    &.disabled,
    &:disabled,
    &[disabled],
    &.read-only,
    &[readonly],
    &[inert],
    [inert] & {
        --tavenem-field-input-opacity: 1;

        > .input {
            cursor: default;

            tf-icon, .svg-icon {
                pointer-events: none;
            }

            input {
                opacity: 1;
            }

            > .expand {
                cursor: default;
            }
        }
    }

    &.bg-alt {
        background-color: transparent;
    }

    &.primary.filled,
    &.secondary.filled,
    &.tertiary.filled,
    &.danger.filled,
    &.dark.filled,
    &.default.filled,
    &.info.filled,
    &.success.filled,
    &.warning.filled {
        background-color: transparent;
            
        > .input {
            background-color: hsla(var(--tavenem-theme-color-hue), var(--tavenem-theme-color-saturation), var(--tavenem-theme-color-lightness), .09);

            &:hover {
                background-color: hsla(var(--tavenem-theme-color-hue), var(--tavenem-theme-color-saturation), var(--tavenem-theme-color-lightness), 0.13);
            }

            &:disabled, &[inert], [inert] & {
                background-color: var(--tavenem-theme-color-hover-bright);
            }
        }
    }

    &:disabled,
    &.disabled,
    &[inert],
    [inert] & {
        --field-color: var(--tavenem-color-text-disabled);
        --field-label-color: var(--tavenem-color-text-disabled);

        > .input {
            color: var(--tavenem-color-text-disabled);

            tf-icon {
                color: var(--tavenem-color-text-disabled);
            }
        }

        &.filled > .input {
            background-color: rgba(0, 0, 0, 0.12);
        }

        &.outlined > .input {
            border-color: var(--tavenem-color-action-disabled);
        }
    }
}

.field:has(> label),
tf-datetime-input:has(label) {
    --field-labeled: true;
}

.input {
    color: var(--field-color);
    display: inline-flex;
    font-size: 1rem;
    font-weight: var(--tavenem-font-weight);
    padding-top: 6px;
    position: relative;
}

.input {
    align-items: center;
    box-sizing: content-box;
    column-gap: 8px;
    cursor: text;
    line-height: 1.1875rem;
    min-height: 1.1875rem;
    padding-bottom: 7px;

    input, textarea {
        appearance: none;
        background: none;
        border: 0;
        box-shadow: none;
        box-sizing: content-box;
        color: currentColor;
        display: block;
        font: inherit;
        margin: 0;
        min-height: calc(1.25rem + 10px);
        min-width: 0;
        padding: 0;
        position: relative;
        width: 100%;
        -webkit-tap-highlight-color: transparent;

        &:not(textarea) {
            height: 1.1875rem;
        }

        &:focus {
            outline: 0;
        }

        &:invalid {
            box-shadow: none;
            color: var(--tavenem-color-error);
        }

        &:disabled {
            opacity: 1;
        }
    }

    input[type=search] {
        -moz-appearance: textfield;
        -webkit-appearance: textfield;
    }

    textarea {
        cursor: auto;
        height: auto;
        letter-spacing: inherit;
        resize: none;
    }

    > .expand {
        cursor: pointer;
        transition: .3s cubic-bezier(.25,.8,.5,1),visibility 0s;
    }
}

.input textarea::-webkit-scrollbar {
    cursor: crosshair;
    height: 8px;
    width: 8px;
    z-index: 1;
}

.input textarea::-webkit-scrollbar-thumb {
    background: var(--tavenem-color-border-input);
    border-radius: 1px;
}

.input textarea::-webkit-scrollbar-track {
    background: transparent;
}

.input input::placeholder,
.input textarea::placeholder {
    color: currentColor;
    opacity: 0.42;
    transition: opacity 200ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;
}

.field-helpers {
    color: var(--field-label-color);
    display: flex;
    font-size: 0.75rem;
    font-weight: var(--tavenem-font-weight);
    line-height: 1.66;
    margin-top: 3px;
    overflow: hidden;
    text-align: start;

    &.onfocus {
        opacity: 0;
        pointer-events: none;
        transform: translateY(-100%);
        transition: opacity 50ms cubic-bezier(0,0,.2,1) 0ms,color 200ms cubic-bezier(0,0,.2,1) 0ms,transform 200ms cubic-bezier(0,0,.2,1) 0ms;
    }
}

tf-editor .custom-editor-button.hidden {
    display: none;
}

tf-select .option-list {
    > * > .selected-icon {
        visibility: hidden;
    }

    > * > .unselected-icon {
        display: none;
    }

    > .active > .selected-icon {
        visibility: visible;
    }
}

tf-select[multiple] .option-list {
    > * > .selected-icon {
        display: none;
    }

    > * > .unselected-icon {
        display: inline-block;
    }

    > .active > .selected-icon {
        display: inline-block;
    }

    > .active > .unselected-icon {
        display: none;
    }
}

tf-select[data-search-filter] .search-nonmatch {
    display: none;
}

tf-slider .hashes {
    align-items: center;
    display: none;
    flex-grow: 1;
    height: 100%;
    justify-content: space-between;
    left: 0;
    position: absolute;
    top: 0;
    width: 100%;

    div {
        display: flex;
        flex-direction: column;
        position: relative;

        span:first-child {
            background-color: var(--thumb-color);
            border-radius: 9999px;
            height: 2px;
            width: 2px;
        }

        span + span {
            left: 0;
            padding-top: .25em;
            position: absolute;
            top: 0;
            transform: translate(-50%, 50%);
        }

        &:first-child span + span {
            transform: translate(0, 50%);
        }

        &:last-child span + span {
            transform: translate(-100%, 50%);
        }
    }
}

tf-slider.hashmarks .hashes {
    display: flex;
}