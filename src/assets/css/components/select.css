.select {
    --field-active-label-color: var(--tavenem-color-primary);

    > tf-input > .expand {
        transition: .3s cubic-bezier(.25,.8,.5,1);
    }

    :has(> tf-popover.select-popover:popover-open) > tf-input > .expand {
        transform: rotate(-180deg);
    }

    &.read-only, &[readonly], &[inert], [inert] & {
        cursor: default;
        pointer-events: none;
    }

    > tf-popover.select-popover > .option-list {
        > * > .selected-icon {
            visibility: hidden;
        }

        > * > .unselected-icon {
            display: none;
        }

        > .active > .selected-icon {
            visibility: visible;
        }
    }

    &[multiple] > tf-popover.select-popover > .option-list {
        > * > .selected-icon {
            display: none;
        }

        > * > .unselected-icon {
            display: inline-block;
        }

        > .active > .selected-icon {
            display: inline-block;
        }

        > .active > .unselected-icon {
            display: none;
        }
    }

    &.primary:not(.invalid, .disabled, [inert]),
    &.secondary:not(.invalid, .disabled, [inert]),
    &.tertiary:not(.invalid, .disabled, [inert]),
    &.danger:not(.invalid, .disabled, [inert]),
    &.dark:not(.invalid, .disabled, [inert]),
    &.default:not(.invalid, .disabled, [inert]),
    &.info:not(.invalid, .disabled, [inert]),
    &.success:not(.invalid, .disabled, [inert]),
    &.warning:not(.invalid, .disabled, [inert]) {
        --field-active-label-color: var(--tavenem-theme-color);
    }

    &.invalid {
        --field-active-label-color: var(--tavenem-color-error);
    }
}
