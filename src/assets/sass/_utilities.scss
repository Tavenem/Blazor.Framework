.text-light {
    font-weight: var(--tavenem-font-weight-light);
}

.text-lighter {
    font-weight: lighter;
}

.text-casual {
    --tavenem-casl: 1;
}

.text-close {
    letter-spacing: -.07em;
}

.title-font {
    font-family: var(--tavenem-font-family-title);
}

.body-font {
    font-family: var(--tavenem-font-family);
}

.lh-1 {
    line-height: 1 !important;
}

.lh-sm {
    line-height: var(--tavenem-lineheight-small) !important;
}

.lh-base {
    line-height: var(--tavenem-lineheight-body) !important;

    &.btn {
        line-height: var(--tavenem-lineheight-button) !important;
    }
}
h1, h2, h3, h4, h5, h6,
.h1, .h2, .h3, .h4, .h5, .h6 {
    &.lh-base {
        line-height: var(--tavenem-lineheight-heading) !important;
    }
}

.lh-lg {
    line-height: var(--tavenem-lineheight-large) !important;
}

.small {
    font-size: var(--tavenem-font-size-sm);
    line-height: var(--tavenem-lineheight-small);
}

.codeblock {
    background-color: var(--tavenem-dark-color-bg-alt);
    border-radius: var(--tavenem-border-radius);
    color: var(--tavenem-color-dark-text);
    flex: 0 0 auto;
    padding: 1rem;
    width: 100%;

    > *:first-child {
        border-top-left-radius: inherit;
        border-top-right-radius: inherit;
    }

    > *:last-child {
        border-bottom-left-radius: inherit;
        border-bottom-right-radius: inherit;
    }

    > *:only-child {
        border-radius: inherit;
    }

    > * {
        margin: 0;
        padding: 0;
    }
}

.initialism {
    font-size: var(--tavenem-font-size-sm);
    line-height: var(--tavenem-lineheight-small);
    text-transform: uppercase;
}
.initialism[title] {
    cursor: help;
    text-decoration: underline dotted;
    text-decoration-skip-ink: none;
}

.blockquote {
    font-size: 1.25rem;
}

.blockquote-footer {
    color: var(--tavenem-color-text-secondary);
    margin-bottom: 1rem;
    margin-left: 2.5rem;
    margin-right: 2.5rem;
    margin-top: -1rem;
    font-size: var(--tavenem-font-size-sm);
    line-height: var(--tavenem-lineheight-small);
    text-align: end;

    &::before {
        content: "\00A0\2014\00A0"; // nbsp, em dash, nbsp
    }
}

.img-fluid {
    max-width: 100%;
    height: auto;
}

.clearfix::after {
    display: block;
    clear: both;
    content: "";
}

@each $ratio, $padding in $ratios {
    .ratio-#{$ratio} {
        position: relative;
        width: 100%;

        &::before {
            display: block;
            padding-top: $padding;
            content: "";
        }

        > * {
            height: 100%;
            left: 0;
            position: absolute;
            top: 0;
            width: 100%;
        }
    }
}
.ratio-custom {
    --aspect-ratio: 100%;
    position: relative;
    width: 100%;

    &::before {
        display: block;
        padding-top: var(--aspect-ratio);
        content: "";
    }

    > * {
        height: 100%;
        left: 0;
        position: absolute;
        top: 0;
        width: 100%;
    }
}

.visually-hidden,
.visually-hidden-focusable:not(:focus):not(:focus-within) {
    border: 0 !important;
    clip: rect(0, 0, 0, 0) !important;
    height: 1px !important;
    margin: -1px !important;
    overflow: hidden !important;
    padding: 0 !important;
    position: absolute !important;
    white-space: nowrap !important;
    width: 1px !important;
}

.stretched-link::after {
    bottom: 0;
    content: "";
    left: 0;
    position: absolute;
    right: 0;
    top: 0;
    z-index: 1;
}

.text-truncate {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.vr {
    align-self: stretch;
    background-color: var(--tavenem-color-divider);
    display: inline-block;
    min-height: 1rem;
    vertical-align: text-top;
    width: 1px;

    .dark {
        background-color: var(--tavenem-light-color-divider);
    }

    .light {
        background-color: var(--tavenem-dark-color-divider);
    }
}

.float-end {
    float: inline-end;
}

.float-left {
    float: left;
}

.float-none {
    float: none;
}

.float-right {
    float: right;
}

.float-start {
    float: inline-start;
}

@each $breakpoint, $min-width in $breakpoints {
    @media (min-width: $min-width) {
        .float-#{$breakpoint}-end {
            float: inline-end;
        }

        .float-#{$breakpoint}-left {
            float: left;
        }

        .float-#{$breakpoint}-none {
            float: none;
        }

        .float-#{$breakpoint}-right {
            float: right;
        }

        .float-#{$breakpoint}-start {
            float: inline-start;
        }
    }
}

@mixin generate-utility($prefix, $property, $map) {
    @if type-of(nth($map, 1)) != "list" {
        $map: zip($map, $map);
    }

    @if $prefix == "" {
        $prefix: $property;
    }

    @if $prefix != "" {
        $prefix: $prefix + "-";
    }

    @each $key, $value in $map {
        .#{$prefix}#{$key} {
            #{$property}: $value !important;
        }
    }

    @each $breakpoint, $min-width in $breakpoints {
        @media (min-width: $min-width) {
            @each $key, $value in $map {
                $prop: $prefix + $breakpoint + "-" + $key;

                @if $prefix == "" {
                    $prop: $key + "-" + $breakpoint;
                }

                .#{$prop} {
                    #{$property}: $value !important;
                }
            }
        }
    }
}

@include generate-utility("d", display, $display-values);

@media print {
    .d-print-block {
        display: block !important;
    }

    .d-print-flex {
        display: flex !important;
    }

    .d-print-grid {
        display: grid !important;
    }

    .d-print-inline {
        display: inline !important;
    }

    .d-print-inline-block {
        display: inline-block !important;
    }

    .d-print-inline-flex {
        display: inline-flex !important;
    }

    .d-print-none {
        display: none !important;
    }

    .d-print-table {
        display: table !important;
    }

    .d-print-table-cell {
        display: table-cell !important;
    }

    .d-print-table-row {
        display: table-row !important;
    }
}

@include generate-utility("position", position, $position-values);

.bottom {
    bottom: 0;
}

.left {
    left: 0;
}

.right {
    right: 0;
}

.top {
    top: 0;
}

@each $fraction in $position-fractions {
    .bottom-#{$fraction} {
        bottom: $fraction;
    }

    .left-#{$fraction} {
        left: $fraction;
    }

    .right-#{$fraction} {
        right: $fraction;
    }

    .top-#{$fraction} {
        top: $fraction;
    }
}

.translate-middle {
    transform: translate(-50%, -50%);
}

.translate-middle-x {
    transform: translateX(-50%);
}

.translate-middle-y {
    transform: translateY(-50%);
}

.fixed {
    position: fixed;
    z-index: calc(var(--tavenem-zindex-fixed) + 13);
}

.sticky {
    position: sticky;
    z-index: calc(var(--tavenem-zindex-fixed) + 12);
}

@each $breakpoint, $min-width in $breakpoints {
    @media (min-width: $min-width) {
        .fixed-#{$breakpoint} {
            position: fixed;
            z-index: calc(var(--tavenem-zindex-fixed) + 11);
        }

        .sticky-#{$breakpoint} {
            position: sticky;
            top: 0;
            z-index: calc(var(--tavenem-zindex-fixed) + 10);
        }
    }
}

.full-width {
    margin-left: 0 !important;
    margin-right: 0 !important;
    padding-left: 0 !important;
    padding-right: 0 !important;
    width: 100% !important;
}

.border {
    border-color: var(--tavenem-theme-color-darken-2, var(--tavenem-color-border));
    border-style: solid !important;
    border-width: 1px !important;
}

.border-transparent {
    border-color: transparent;
    border-style: solid;
    border-width: 1px;
}

.border-0 {
    border: 0 !important;
}

@each $side in $sides {
    .border-#{$side} {
        border-#{$side}-color: var(--tavenem-theme-color-darken-2, var(--tavenem-color-border));
        border-#{$side}-style: solid !important;
        border-#{$side}-width: 1px !important;
    }

    .border-#{$side}-0 {
        border-#{$side}: 0 !important;
    }
}

@include generate-utility("h", height, $dimension-values);
@include generate-utility("w", width, $dimension-values);

.mh-100 {
    max-height: 100% !important;
}

.mw-100 {
    max-width: 100% !important;
}

.vh-100 {
    height: 100vh !important;
}

.vw-100 {
    width: 100vw !important;
}

.min-vh-100 {
    min-height: 100vh !important;
}

.min-vw-100 {
    min-width: 100vw !important;
}

.flex-fill {
    flex: 1 1 auto !important;
}

@each $breakpoint, $min-width in $breakpoints {
    @media (min-width: $min-width) {
        .flex-#{$breakpoint}-fill {
            flex: 1 1 auto !important;
        }
    }
}

@include generate-utility("flex", flex-direction, $flex-directions);

@for $i from 0 through 5 {
    .flex-grow-#{$i} {
        flex-grow: $i !important;
    }
}

@each $breakpoint, $min-width in $breakpoints {
    @media (min-width: $min-width) {
        @for $i from 0 through 5 {
            .flex-#{$breakpoint}-grow-#{$i} {
                flex-grow: $i !important;
            }
        }
    }
}

.flex-shrink-0 {
    flex-shrink: 0 !important;
}

.flex-shrink-1 {
    flex-shrink: 1 !important;
}

@each $breakpoint, $min-width in $breakpoints {
    @media (min-width: $min-width) {
        .flex-#{$breakpoint}-shrink-0 {
            flex-shrink: 0 !important;
        }

        .flex-#{$breakpoint}-shrink-1 {
            flex-shrink: 1 !important;
        }
    }
}

@include generate-utility("", align-content, $align-content-values);
@include generate-utility("", align-items, $align-items-values);
@include generate-utility("", align-self, $align-items-values);
@include generate-utility("flex", flex-wrap, $flex-wrap-values);
@include generate-utility("", justify-content, $justify-content-values);
@include generate-utility("order", order, $order-values);

@include generate-utility("gap", gap, $positive-spacers);

.center-items {
    align-items: center !important;
    justify-content: center !important;
    justify-items: center !important;
}

.center-self {
    align-self: center !important;
    justify-self: center !important;
}

@include generate-utility("m", margin, $spacers-and-auto);
@include generate-utility("mb", margin-bottom, $spacers-and-auto);
@include generate-utility("mt", margin-top, $spacers-and-auto);

@include generate-utility("me", margin-inline-end, $spacers-and-auto);
@include generate-utility("ml", margin-left, $spacers-and-auto);
@include generate-utility("mr", margin-right, $spacers-and-auto);
@include generate-utility("ms", margin-inline-start, $spacers-and-auto);

@each $key, $value in $spacers-and-auto {
    .mx-#{$key} {
        margin-left: $value !important;
        margin-right: $value !important;
    }

    .my-#{$key} {
        margin-bottom: $value !important;
        margin-top: $value !important;
    }
}

@each $breakpoint, $min-width in $breakpoints {
    @media (min-width: $min-width) {
        @each $key, $value in $spacers-and-auto {
            .mx-#{$breakpoint}-#{$key} {
                margin-left: $value !important;
                margin-right: $value !important;
            }

            .my-#{$breakpoint}-#{$key} {
                margin-bottom: $value !important;
                margin-top: $value !important;
            }
        }
    }
}

@include generate-utility("p", padding, $spacers);
@include generate-utility("pb", padding-bottom, $spacers);
@include generate-utility("pt", padding-top, $spacers);

@include generate-utility("pe", padding-inline-end, $spacers);
@include generate-utility("pl", padding-left, $spacers);
@include generate-utility("pr", padding-right, $spacers);
@include generate-utility("ps", padding-inline-start, $spacers);

@each $key, $value in $spacers {
    .px-#{$key} {
        padding-left: $value !important;
        padding-right: $value !important;
    }

    .py-#{$key} {
        padding-bottom: $value !important;
        padding-top: $value !important;
    }
}

@each $breakpoint, $min-width in $breakpoints {
    @media (min-width: $min-width) {
        @each $key, $value in $spacers {
            .px-#{$breakpoint}-#{$key} {
                padding-left: $value !important;
                padding-right: $value !important;
            }

            .py-#{$breakpoint}-#{$key} {
                padding-bottom: $value !important;
                padding-top: $value !important;
            }
        }
    }
}

.font-monospace {
    --tavenem-mono: 1;
    font-family: var(--tavenem-font-family-monospace);
}

@include generate-utility("overflow", overflow, $overflow-values);
@include generate-utility("text", text-align, $text-alignments);
@include generate-utility("text", text-transform, $text-transforms);
@include generate-utility("align", vertical-align, $vertical-align-values);

.text-wrap {
    white-space: normal !important;
}

.text-nowrap {
    white-space: nowrap !important;
}

.text-break {
    word-wrap: break-word !important;
    word-break: break-word !important;
}

*[dir="rtl"] .text-break {
    word-wrap: unset !important;
    word-break: unset !important;
}

.user-select-all {
    -moz-user-select: all !important;
    -webkit-user-select: all !important;
    user-select: all !important;
}

.user-select-auto {
    -moz-user-select: auto !important;
    -webkit-user-select: auto !important;
    user-select: auto !important;
}

.user-select-none {
    -moz-user-select: none !important;
    -webkit-user-select: none !important;
    user-select: none !important;
}

.pe-auto {
    pointer-events: auto !important;
}

.pe-none {
    pointer-events: none !important;
}

.square {
    border-radius: 0 !important;
}

.rounded {
    border-radius: var(--tavenem-border-radius) !important;

    *:first-child {
        border-top-left-radius: inherit;
        border-top-right-radius: inherit;
    }

    *:last-child {
        border-bottom-left-radius: inherit;
        border-bottom-right-radius: inherit;
    }
}

.rounded-bottom {
    border-bottom-left-radius: var(--tavenem-border-radius) !important;
    border-bottom-right-radius: var(--tavenem-border-radius) !important;

    *:last-child {
        border-bottom-left-radius: inherit;
        border-bottom-right-radius: inherit;
    }
}

.rounded-bottom-left {
    border-bottom-left-radius: var(--tavenem-border-radius) !important;

    *:last-child {
        border-bottom-left-radius: inherit;
    }
}

.rounded-bottom-right {
    border-bottom-right-radius: var(--tavenem-border-radius) !important;

    *:last-child {
        border-bottom-right-radius: inherit;
    }
}

.rounded-left {
    border-bottom-left-radius: var(--tavenem-border-radius) !important;
    border-top-left-radius: var(--tavenem-border-radius) !important;

    *:first-child {
        border-top-left-radius: inherit;
    }

    *:last-child {
        border-bottom-left-radius: inherit;
    }
}

.rounded-right {
    border-bottom-right-radius: var(--tavenem-border-radius) !important;
    border-top-right-radius: var(--tavenem-border-radius) !important;

    *:first-child {
        border-top-right-radius: inherit;
    }

    *:last-child {
        border-bottom-right-radius: inherit;
    }
}

.rounded-top {
    border-top-left-radius: var(--tavenem-border-radius) !important;
    border-top-right-radius: var(--tavenem-border-radius) !important;

    *:first-child {
        border-top-left-radius: inherit;
        border-top-right-radius: inherit;
    }
}

.rounded-top-left {
    border-top-left-radius: var(--tavenem-border-radius) !important;

    *:first-child {
        border-top-left-radius: inherit;
    }
}

.rounded-top-right {
    border-top-right-radius: var(--tavenem-border-radius) !important;

    *:first-child {
        border-top-right-radius: inherit;
    }
}

.rounded-circle {
    border-radius: 50% !important;

    *:first-child {
        border-top-left-radius: inherit;
        border-top-right-radius: inherit;
    }

    *:last-child {
        border-bottom-left-radius: inherit;
        border-bottom-right-radius: inherit;
    }
}

.rounded-pill {
    border-radius: 9999px !important;

    *:first-child {
        border-top-left-radius: inherit;
        border-top-right-radius: inherit;
    }

    *:last-child {
        border-bottom-left-radius: inherit;
        border-bottom-right-radius: inherit;
    }
}

.transparent {
    background-color: transparent !important;
}

.text-muted {
    color: var(--tavenem-color-text-secondary);
}

.text-disabled {
    color: var(--tavenem-color-text-disabled);
}

.text-reset {
    color: inherit !important;
}

.text-color-reset {
    color: var(--tavenem-color-text) !important;
}

.elevation-0 {
    box-shadow: none !important;

    &:hover,
    &:focus-visible,
    &:active {
        box-shadow: none !important;
    }
}

@for $i from 1 through 5 {
    .elevation-#{$i} {
        box-shadow: var(--tavenem-shadow-#{$i}) !important;
    }
}

.visible {
    visibility: visible !important;
}

.invisible {
    visibility: hidden !important;
}

ul.bullets {
    list-style: disc outside none;
}

ul.bullets ul {
    list-style-type: circle;
}

ul, menu, ol {
    &.inline {
        padding-left: 0;
    }
}

ul, menu, ol, dl {
    &.inline {
        display: inline-flex;
        flex-wrap: wrap;
        list-style: none;
        gap: .5rem;
        margin-bottom: 0;

        ul, menu, ol {
            padding-left: 0;
        }

        ul, menu, ol, dl {
            display: inline-flex;
            flex-wrap: wrap;
            list-style: none;
            gap: .5rem;
            margin-bottom: 0;
        }

        dl > dd {
            margin-bottom: 0;
        }
    }
}

dl.inline {
    > dd {
        margin-bottom: 0;
    }
}

.shake,
.shake-hover:hover {
    animation: tf-shake 0.82s cubic-bezier(.36,.07,.19,.97) both;
    transform: translateX(0);
}

.can-drag:not(:disabled, [disabled], .disabled) > *:not(.no-drag) {
    cursor: grab;
    user-select: none;

    &:active {
        cursor: grabbing;
    }
}

.can-drop {
    background-color: var(--tavenem-color-valid-hover);
    border-color: var(--tavenem-color-valid) !important;
    border-style: solid;
    border-width: 1px;
}

.no-drop {
    background-color: var(--tavenem-color-error-hover);
    border-color: var(--tavenem-color-error) !important;
    border-style: solid;
    border-width: 1px;

    &:hover {
        cursor: no-drop;
    }
}

.svg-icon {
    height: 1.5em;
    fill: currentColor;
}
