<Project Sdk="Microsoft.NET.Sdk.Razor">

  <PropertyGroup>
    <TargetFramework>net8.0</TargetFramework>
    <LangVersion>preview</LangVersion>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>
  
  <PropertyGroup>
    <PackageId>Tavenem.Blazor.Framework</PackageId>
    <Version>1.0.0</Version>
    <Authors>Wil Stead</Authors>
    <Description>Blazor style and component framework.</Description>
    <Copyright>Copyright Â© Wil Stead</Copyright>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageProjectUrl>https://github.com/Tavenem/Blazor.Framework</PackageProjectUrl>
    <PackageIcon>tavenem_128.png</PackageIcon>
    <PackageTags>Blazor Components</PackageTags>
    <RepositoryUrl>https://github.com/Tavenem/Blazor.Framework.git</RepositoryUrl>
    <RepositoryBranch>main</RepositoryBranch>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <EmbedUntrackedSources>true</EmbedUntrackedSources>
  </PropertyGroup>

  <ItemGroup>
    <SupportedPlatform Include="browser" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="ClosedXML" Version="0.102.1" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.1.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.AspNetCore.Components.Web" Version="8.0.0-rc.1.23421.29" />
  </ItemGroup>
	
  <ItemGroup>
    <None Include="tavenem_128.png" Pack="true" PackagePath="\" />
  </ItemGroup>
	
  <PropertyGroup>
    <TypeScriptCompileBlocked>true</TypeScriptCompileBlocked>
  </PropertyGroup>

  <PropertyGroup>
    <ClientAssetsDirectory>assets\</ClientAssetsDirectory>
    <ClientAssetsRestoreInputs>$(MSBuildProjectFile);$(ClientAssetsDirectory)package-lock.json;$(ClientAssetsDirectory)package.json</ClientAssetsRestoreInputs>
    <ClientAssetsRestoreOutputs>$(ClientAssetsDirectory)node_modules\.package-lock.json</ClientAssetsRestoreOutputs>

    <!-- Run restore only once for multi targeting builds -->
    <ClientAssetsRestoreBeforeTargets Condition="'$(TargetFramework)' == 'net8.0'">DispatchToInnerBuilds</ClientAssetsRestoreBeforeTargets>
  </PropertyGroup>

  <ItemGroup>
    <Content Update="$(ClientAssetsDirectory)**" Pack="false">
      <CopyToPublishDirectory>Never</CopyToPublishDirectory>
      <CopyToOutputDirectory>Never</CopyToOutputDirectory>
    </Content>
    <ClientAssetsInputs Include="$(ClientAssetsDirectory)rollup.config.js;$(ClientAssetsDirectory)scripts\**\*.ts" Exclude="$(DefaultItemExcludes);$(ClientAssetsDirectory)scripts\**\*.d.ts;$(ClientAssetsDirectory)scripts\**\_*.ts" />
    <ScssFiles Include="$(ClientAssetsDirectory)**\*.scss" Exclude="$(ClientAssetsDirectory)**\_*.scss" />
    <ClientAssetsInputs Remove="assets\scripts\tavenem-contents.ts" />
    <ClientAssetsInputs Remove="assets\scripts\tavenem-initialize-framework.ts" />
    <CssLibFiles Include="$(ClientAssetsDirectory)node_modules\highlight.js\styles\stackoverflow-light.css;$(ClientAssetsDirectory)node_modules\@benrbray\prosemirror-math\style\math.css;$(ClientAssetsDirectory)node_modules\katex\dist\katex.min.css" />
  </ItemGroup>

  <Target Name="ClientAssetsRestore" BeforeTargets="$(ClientAssetsRestoreBeforeTargets)" Inputs="$(ClientAssetsRestoreInputs)" Outputs="$(ClientAssetsRestoreOutputs)">
    <Message Importance="high" Text="Running npm install..." />
    <Exec Command="npm install" WorkingDirectory="$(ClientAssetsDirectory)" />
    <Exec Command="npm dedupe" WorkingDirectory="$(ClientAssetsDirectory)" />
  </Target>
  
  <Target Name="ClientAssetsBuild" DependsOnTargets="ClientAssetsRestore" BeforeTargets="AssignTargetPaths" Inputs="@(ClientAssetsInputs)" Outputs="$(IntermediateOutputPath)clientassetsbuild.complete.txt">
    <PropertyGroup>
      <_ClientAssetsOutputFullPath>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)clientassets'))/</_ClientAssetsOutputFullPath>
    </PropertyGroup>

    <MakeDir Directories="$(_ClientAssetsOutputFullPath)" />
    
    <Message Importance="high" Text="Running npm run build:$(Configuration)..." />
    <Exec Command="npm run build:$(Configuration) -- -d $(_ClientAssetsOutputFullPath)" WorkingDirectory="$(ClientAssetsDirectory)" />

    <ItemGroup>
      <_ClientAssetsBuildOutput Include="$(IntermediateOutputPath)clientassets\**"></_ClientAssetsBuildOutput>
    </ItemGroup>

    <WriteLinesToFile File="$(IntermediateOutputPath)clientassetsbuild.complete.txt" Lines="@(_ClientAssetsBuildOutput)" />
  </Target>
  
  <Target Name="DefineClientAssets" AfterTargets="ClientAssetsBuild" DependsOnTargets="ResolveStaticWebAssetsConfiguration">
    <ItemGroup>
      <FileWrites Include="@(_ClientAssetsBuildOutput)" />
      <FileWrites Include="$(IntermediateOutputPath)clientassetsbuild.complete.txt" />
    </ItemGroup>
    
    <DefineStaticWebAssets CandidateAssets="@(_ClientAssetsBuildOutput)" SourceId="$(PackageId)" SourceType="Computed" ContentRoot="$(_ClientAssetsOutputFullPath)" BasePath="$(StaticWebAssetBasePath)">
      <Output TaskParameter="Assets" ItemName="StaticWebAsset" />
    </DefineStaticWebAssets>
  </Target>
	
  <Target Name="CssLibCopy" DependsOnTargets="ClientAssetsRestore" Inputs="@(CssLibFiles)" Outputs="$(IntermediateOutputPath)csslibs.complete.txt">
    <PropertyGroup>
      <_SassOutputFolderPath>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)sass'))/</_SassOutputFolderPath>
    </PropertyGroup>
    
    <MakeDir Directories="$(_SassOutputFolderPath)" />

    <Copy SourceFiles="@(CssLibFiles)" DestinationFolder="$(_SassOutputFolderPath)" />

    <ItemGroup>
      <_CssLibCopyOutput Include="$(IntermediateOutputPath)sass\**"></_CssLibCopyOutput>
    </ItemGroup>
    
    <WriteLinesToFile File="$(IntermediateOutputPath)csslibs.complete.txt" Lines="@(_CssLibCopyOutput)" />
  </Target>
	
  <Target Name="SassBuild" DependsOnTargets="CssLibCopy" BeforeTargets="AssignTargetPaths" Inputs="@(ScssFiles);@(CssLibFiles)" Outputs="$(IntermediateOutputPath)stylebuild.complete.txt">
    <PropertyGroup>
      <_SassOutputFullPath>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)sass/framework.css'))</_SassOutputFullPath>
      <_CssOutputFolderPath>$([System.IO.Path]::GetFullPath('$(IntermediateOutputPath)css'))/</_CssOutputFolderPath>
    </PropertyGroup>
    
    <MakeDir Directories="$(_CssOutputFolderPath)" />

    <Message Importance="high" Text="Running npm run sass..." />
    <Exec Command="npm run sass -- $(_SassOutputFullPath)" WorkingDirectory="$(ClientAssetsDirectory)" />
    
    <Message Importance="high" Text="Running npm run postcss..." />
    <Exec Command="npm run postcss -- $(_SassOutputFullPath) -d $(_CssOutputFolderPath)" WorkingDirectory="$(ClientAssetsDirectory)" />

    <ItemGroup>
      <_CssBuildOutput Include="$(IntermediateOutputPath)css\**"></_CssBuildOutput>
    </ItemGroup>
    
    <WriteLinesToFile File="$(IntermediateOutputPath)stylebuild.complete.txt" Lines="@(_CssBuildOutput)" />
  </Target>
  
  <Target Name="DefineCssAssets" AfterTargets="SassBuild" DependsOnTargets="ResolveStaticWebAssetsConfiguration">
    <ItemGroup>
      <FileWrites Include="@(_CssBuildOutput)" />
      <FileWrites Include="$(IntermediateOutputPath)stylebuild.complete.txt" />
    </ItemGroup>
    
    <DefineStaticWebAssets CandidateAssets="@(_CssBuildOutput)" SourceId="$(PackageId)" SourceType="Computed" ContentRoot="$(_CssOutputFolderPath)" BasePath="$(StaticWebAssetBasePath)">
      <Output TaskParameter="Assets" ItemName="StaticWebAsset" />
    </DefineStaticWebAssets>
  </Target>

</Project>
