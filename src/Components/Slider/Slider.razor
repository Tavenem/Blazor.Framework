@namespace Tavenem.Blazor.Framework

@typeparam TValue

@inherits FormComponentBase<TValue>

<div @attributes="AdditionalAttributes" class="@CssClass" style="@CssStyle">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    <div class="input">
        <div>
            <div class="filler" style="@($"width:{BarWidth.ToString("F2").TrimEnd('0').TrimEnd('.')}%")"></div>
        </div>
        <div>
            <div class="hashes">
                @for (var i = 0; i < _tickCount; i++)
                {
                    var index = i;
                    <div>
                        <span />
                        @if (HashLabels?.Count > index)
                        {
                            <span>@HashLabels[index]</span>
                        }
                    </div>
                }
            </div>
        </div>
        <input @ref="ElementReference"
               @attributes="InputAttributes"
               id="@Id"
               type="range"
               class="@InputCssClass"
               style="@InputCssStyle"
               autofocus="@AutoFocus"
               disabled="@(Disabled || ReadOnly || !IsInteractive)"
               max="@MaxString"
               min="@MinString"
               name="@NameValue"
               step="@StepString"
               tabindex="@TabIndex"
               value="@CurrentValueAsString"
               @oninput="OnInput"
               @onchange="OnChangeAsync" />
        <span class="label" style="@($"left:{BarWidth.ToString("F2").TrimEnd('0').TrimEnd('.')}%")">@InputValue</span>
    </div>
    @if (IsInvalidAndTouched)
    {
        <div class="field-helpers">
            <ul class="mr-auto mb-0 pl-0">
                @foreach (var message in GetValidationMessages())
                {
                    <li>@message</li>
                }
            </ul>
        </div>
    }
</div>
