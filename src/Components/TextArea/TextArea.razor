@namespace Tavenem.Blazor.Framework

@inherits InputComponentBase<string>

<div @attributes="AdditionalAttributes" id="@Id" class="@CssClass" style="@CssStyle" @onclick="FocusAsync">
    <div class="input">
        <textarea @ref="ElementReference"
                  id="@InputId"
                  class="@InputCssClass"
                  style="@InputCssStyle"
                  autocomplete="@AutocompleteValue"
                  autocorrect="@AutocorrectValue"
                  disabled="@Disabled"
                  maxlength="@MaxLength"
                  name="@NameValue"
                  placeholder="@(string.IsNullOrEmpty(Placeholder) ? " " : Placeholder)"
                  readonly="@ReadOnly"
                  required="@Required"
                  rows="@Rows"
                  spellcheck="@SpellcheckValue"
                  tabindex="@TabIndex"
                  value="@CurrentValue"
                  @oninput="OnInput"
                  @onchange="OnChange" />
        @if (ShowEmoji)
        {
            <EmojiInput Class="nested m-0" IconButton="true">
                <Tooltip Delay="750">insert emoji</Tooltip>
            </EmojiInput>
        }
    </div>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@InputId">@Label</label>
    }
    @if ((ShowLength && MaxLength.HasValue)
        || !string.IsNullOrEmpty(HelpText)
        || HelpTextContent.HasValue
        || IsInvalidAndTouched)
    {
        <div class="@HelpersClass">
            @if (IsInvalidAndTouched)
            {
                <ul class="mr-auto mb-0 pl-0">
                    @foreach (var message in GetValidationMessages())
                    {
                        <li>@message</li>
                    }
                </ul>
            }
            else if (HelpTextContent.HasValue)
            {
                <div class="mr-auto">@HelpTextContent.Value</div>
            }
            else if (!string.IsNullOrEmpty(HelpText))
            {
                <div class="mr-auto">@HelpText</div>
            }
            @if (ShowLength && MaxLength.HasValue)
            {
                <div class="ml-auto">
                    <span class="current-length">@(CurrentValue?.Length ?? 0)</span>
                    <span>/</span>
                    <span>@MaxLength</span>
                </div>
            }
        </div>
    }
    @ChildContent
</div>
