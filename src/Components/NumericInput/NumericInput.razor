@namespace Tavenem.Blazor.Framework

@typeparam TValue

@inherits InputComponentBase<TValue>

<div @attributes="AdditionalAttributes" id="@ContainerId" class="@CssClass" style="@CssStyle" @onclick="FocusAsync">
    <tf-input @ref="ElementReference"
              @attributes="InputAttributes"
              id="@InputId"
              autocomplete="@AutocompleteValue"
              autofocus="@AutoFocus"
              class="input"
              data-input-class="@InputCssClass"
              data-input-debounce="@UpdateOnInputDebounce"
              data-input-id="@Id"
              data-input-style="@InputCssStyle"
              disabled="@Disabled"
              display="@DisplayString"
              inputmode="@InputMode"
              max="@MaxString"
              min="@MinString"
              name="@NameValue"
              readonly="@ReadOnly"
              required="@Required"
              size="@EffectiveSize"
              step="@StepString"
              tabindex="@TabIndex"
              value="@CurrentValueAsString"
              @valuechange="OnValueChange"
              @valueinput="OnValueInput">
        @if (PrefixContent is not null)
        {
            <div slot="prefix" style="display:contents">
                @PrefixContent(Value)
            </div>
        }
        else
        {
            if (!string.IsNullOrEmpty(PrefixIcon))
            {
                <tf-icon slot="prefix">@PrefixIcon</tf-icon>
            }
            if (!string.IsNullOrEmpty(PrefixText))
            {
                <span slot="prefix">@PrefixText</span>
            }
        }
        @if (PostfixContent is not null)
        {
            @PostfixContent(Value)
        }
        else if (!string.IsNullOrEmpty(PostfixIcon) || !string.IsNullOrEmpty(PostfixText))
        {
            @if (!string.IsNullOrEmpty(PostfixIcon))
            {
                <tf-icon>@PostfixIcon</tf-icon>
            }
            @if (!string.IsNullOrEmpty(PostfixText))
            {
                <span>@PostfixText</span>
            }
        }
        @if (ShowStepButtons && !ReadOnly)
        {
            <div class="numeric-spin">
                @if (IsInteractive)
                {
                    <button @onclick="Increment" class="btn btn-text" disabled="@IncrementDisabled" tabindex="-1">
                        <tf-icon class="@ThemeColor.ToCSS()">@StepUpIcon</tf-icon>
                    </button>
                    <button @onclick="Decrement" class="btn btn-text" disabled="@DecrementDisabled" tabindex="-1">
                        <tf-icon class="@ThemeColor.ToCSS()">@StepDownIcon</tf-icon>
                    </button>
                }
                else
                {
                    <button class="btn btn-text"
                            disabled="@IncrementDisabled"
                            tabindex="-1"
                            onclick="document.getElementById('@InputId').increment()">
                        <tf-icon class="@ThemeColor.ToCSS()">@StepUpIcon</tf-icon>
                    </button>
                    <button class="btn btn-text"
                            disabled="@DecrementDisabled"
                            tabindex="-1"
                            onclick="document.getElementById('@InputId').decrement()">
                        <tf-icon class="@ThemeColor.ToCSS()">@StepDownIcon</tf-icon>
                    </button>
                }
            </div>
        }
    </tf-input>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    @if (!string.IsNullOrEmpty(HelpText)
        || HelpTextContent.HasValue
        || IsInvalidAndTouched)
    {
        <div class="@HelpersClass">
            @if (IsInvalidAndTouched)
            {
                <ul class="mr-auto mb-0 pl-0">
                    @foreach (var message in GetValidationMessages())
                    {
                        <li>@message</li>
                    }
                </ul>
            }
            else if (HelpTextContent.HasValue)
            {
                <div class="mr-auto">@HelpTextContent.Value</div>
            }
            else if (!string.IsNullOrEmpty(HelpText))
            {
                <div class="mr-auto">@HelpText</div>
            }
        </div>
    }
    @ChildContent
</div>


