@namespace Tavenem.Blazor.Framework

@typeparam TValue

@inherits InputComponentBase<TValue>

<tf-numeric-input @ref="ElementReference"
                  @attributes="AdditionalAttributes"
                  id="@Id"
                  autocomplete="@AutocompleteValue"
                  autofocus="@AutoFocus"
                  class="@CssClass"
                  data-hide-steppers="@(!ShowStepButtons)"
                  data-input-class="@InputCssClass"
                  data-input-debounce="@UpdateOnInputDebounce"
                  data-input-style="@InputCssStyle"
                  data-label="@Label"
                  disabled="@Disabled"
                  display="@DisplayString"
                  inputmode="@InputMode"
                  max="@MaxString"
                  min="@MinString"
                  name="@NameValue"
                  readonly="@ReadOnly"
                  required="@Required"
                  size="@Size"
                  step="@StepString"
                  style="@CssStyle"
                  tabindex="@TabIndex"
                  value="@CurrentValueAsString"
                  @valuechange="OnValueChange"
                  @valueinput="OnValueInput">
    @if (PrefixContent is not null)
    {
        <div slot="prefix" style="display:contents">
            @PrefixContent(Value)
        </div>
    }
    else
    {
        if (!string.IsNullOrEmpty(PrefixIcon))
        {
            <tf-icon slot="prefix">@PrefixIcon</tf-icon>
        }
        if (!string.IsNullOrEmpty(PrefixText))
        {
            <span slot="prefix">@PrefixText</span>
        }
    }
    @if (PostfixContent is not null)
    {
        <div slot="postfix" style="display:contents">
            @PostfixContent(Value)
        </div>
    }
    else if (!string.IsNullOrEmpty(PostfixIcon) || !string.IsNullOrEmpty(PostfixText))
    {
        @if (!string.IsNullOrEmpty(PostfixIcon))
        {
            <tf-icon slot="postfix">@PostfixIcon</tf-icon>
        }
        @if (!string.IsNullOrEmpty(PostfixText))
        {
            <span slot="postfix">@PostfixText</span>
        }
    }
    @if (IsInvalidAndTouched)
    {
        <ul slot="helpers" class="mr-auto mb-0 pl-0">
            @foreach (var message in GetValidationMessages())
            {
                <li>@message</li>
            }
        </ul>
    }
    else if (HelpTextContent.HasValue)
    {
        <div slot="helpers" class="@HelpTextClass">@HelpTextContent.Value</div>
    }
    else if (!string.IsNullOrEmpty(HelpText))
    {
        <div slot="helpers" class="@HelpTextClass">@HelpText</div>
    }
    @ChildContent
</tf-numeric-input>


