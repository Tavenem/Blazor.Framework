@namespace Tavenem.Blazor.Framework

@inherits PersistentComponentBase

@attribute [CascadingTypeParameter(nameof(TTabItem))]
@typeparam TTabItem

<div @attributes="AdditionalAttributes" id="@Id" class="@CssClass" style="@CssStyle">
    <CascadingValue Value="this" IsFixed="true">
        <div id="@ToolbarId"
             class="@ToolbarCssClass">
            <div class="tabs-toolbar-inner">
                @PreTabContent
                @if (ShowScrollButtons)
                {
                    <button @onclick="ScrollBack"
                            class="tab-scroll-btn btn btn-icon"
                            disabled="@(!IsInteractive || _backButtonDisabled)">
                        <tf-icon>@BackIcon</tf-icon>
                    </button>
                }
                <div @ref="_tabsContent" class="tabs-toolbar-content">
                    <div class="tabs-toolbar-wrapper"
                         style="@ScrollStyle"
                         role="tablist"
                         tabindex="0"
                         @onkeydown="OnKeyDownAsync">
                        @for (var i = 0; i < _panels.Count; i++)
                        {
                            var index = i;
                            @if (IsInteractive)
                            {
                                <div @ref="_panels[index].PanelReference"
                                     @key="@_panels[index].Id"
                                     id="@_panels[index].Id"
                                     @onclick="@(_ => ActivatePanelAsync(index))"
                                     draggable="@(_panels[index].GetIsDraggable() ? "true" : "false")"
                                     class="@GetTabClass(index)"
                                     role="tab"
                                     aria-controls="@_panels[index].PanelId"
                                     aria-selected="@(index == ActivePanelIndex ? "true" : "false")">
                                    @if (_panels[index].TabContent is not null)
                                    {
                                        @_panels[index].TabContent
                                    }
                                    else if (_panels[index].TitleMarkup.HasValue
                                        && !string.IsNullOrWhiteSpace(_panels[index].TitleMarkup!.Value.Value))
                                    {
                                        @_panels[index].TitleMarkup!.Value
                                    }
                                    else
                                    {
                                        @_panels[index].Title
                                    }
                                    @if (_panels[index].OnClose.HasDelegate
                                        || OnClose.HasDelegate)
                                    {
                                        <tf-close @onclick="@(_ => OnCloseTabAsync(index))" />
                                    }
                                </div>
                            }
                            else
                            {
                                <a href="@GetPanelUrl(index)"
                                   @key="@_panels[index].Id"
                                   id="@_panels[index].Id"
                                   class="@GetTabClass(index)"
                                   role="tab"
                                   aria-controls="@_panels[index].PanelId"
                                   aria-selected="@(index == ActivePanelIndex ? "true" : "false")">
                                    @if (_panels[index].TabContent is not null)
                                    {
                                        @_panels[index].TabContent
                                    }
                                    else if (_panels[index].TitleMarkup.HasValue
                                        && !string.IsNullOrWhiteSpace(_panels[index].TitleMarkup!.Value.Value))
                                    {
                                        @_panels[index].TitleMarkup!.Value
                                    }
                                    else
                                    {
                                        @_panels[index].Title
                                    }
                                    @if (_panels[index].OnClose.HasDelegate
                                        || OnClose.HasDelegate)
                                    {
                                        <tf-close disabled />
                                    }
                                </a>
                            }
                        }
                        @if (Items is not null
                            && PanelTemplate is not null)
                        {
                            for (var i = 0; i < _dynamicItems.Count && i < Items.Count; i++)
                            {
                                var index = i;
                                @if (IsInteractive)
                                {
                                    <DraggableDropTarget @ref="_dynamicItems[index].DragDropComponent"
                                                         @key="@_dynamicItems[index].Id"
                                                         Id="@_dynamicItems[index].Id"
                                                         TDragItem="TTabItem"
                                                         TDropItem="TTabItem"
                                                         DragEffectAllowed="DragEffectAllowed"
                                                         IsDraggable="EnableDragDrop"
                                                         IsDropTarget="EnableDragDrop"
                                                         Item="Items[index]"
                                                         OnDrop="@(e => OnDropOnItemAsync(index, e))"
                                                         OnDropped="@(e => OnDroppedItemAsync(index, e))">
                                        <div @ref="_dynamicItems[index].ElementReference"
                                             @onclick="@(_ => ActivatePanelAsync(index + _panels.Count))"
                                             class="@GetTabClass(index + _panels.Count)"
                                             role="tab"
                                             aria-selected="@(index - _panels.Count == ActivePanelIndex ? "true" : "false")"
                                             aria-controls="@_dynamicItems[index].PanelId">
                                            @if (_dynamicItems[index].DragDropComponent?.HasValidDrop == true
                                                || (index == 0 && _panels.Any(x => x.HasValidDrop)))
                                            {
                                                <div class="@DropPlaceholderClass"></div>
                                            }
                                            @if (TabTemplate is not null)
                                            {
                                                @TabTemplate(Items[index + _panels.Count])
                                            }
                                            else if (TabTitle is not null)
                                            {
                                                @TabTitle(Items[index + _panels.Count])
                                            }
                                            @if (CanCloseTabs || OnClose.HasDelegate)
                                            {
                                                <tf-close @onclick="@(_ => OnCloseTabAsync(index))" @onclick:stopPropagation="true" />
                                            }
                                        </div>
                                    </DraggableDropTarget>
                                }
                                else
                                {
                                    <a href="@GetPanelUrl(index + _panels.Count)"
                                       class="@GetTabClass(index + _panels.Count)"
                                       role="tab"
                                       aria-selected="@(index - _panels.Count == ActivePanelIndex ? "true" : "false")"
                                       aria-controls="@_dynamicItems[index].PanelId">
                                        @if (TabTemplate is not null)
                                        {
                                            @TabTemplate(Items[index + _panels.Count])
                                        }
                                        else if (TabTitle is not null)
                                        {
                                            @TabTitle(Items[index + _panels.Count])
                                        }
                                        @if (CanCloseTabs || OnClose.HasDelegate)
                                        {
                                            <tf-close disabled />
                                        }
                                    </a>
                                }
                            }
                        }
                        @if (IsInteractive && HasValidDrop && NoDropTargetChildren)
                        {
                            <div class="@DropPlaceholderClass"></div>
                        }
                        @if (OnAdd is not null)
                        {
                            <button @onclick="OnAddTabAsync"
                                    class="btn btn-icon add-btn"
                                    disabled="@(!IsInteractive)">
                                <tf-icon>@AddIcon</tf-icon>
                            </button>
                        }
                        <div class="tab-slider" style="@SliderStyle"></div>
                    </div>
                </div>
                @if (ShowScrollButtons)
                {
                    <button @onclick="ScrollForward"
                            class="tab-scroll-btn btn btn-icon"
                            disabled="@(!IsInteractive || _forwardButtonDisabled)">
                        <tf-icon>@ForwardIcon</tf-icon>
                    </button>
                }
                @PostTabContent
            </div>
        </div>
        @if (HeaderContent is not null)
        {
            @HeaderContent(ActiveItem)
        }
        <div class="tab-panels">
            @ChildContent
            @if (Items is not null
                && PanelTemplate is not null)
            {
                for (var i = 0; i < _dynamicItems.Count && i < Items.Count; i++)
                {
                    var index = i;
                    <div @key="@_dynamicItems[index].PanelId"
                         id="@_dynamicItems[index].PanelId"
                         role="tabpanel"
                         hidden="@(index + _panels.Count != ActivePanelIndex)"
                         aria-expanded="@(index + _panels.Count == ActivePanelIndex ? "true" : "false")">
                        @if (index + _panels.Count == ActivePanelIndex)
                        {
                            @PanelTemplate(Items[index])
                        }
                    </div>
                }
            }
        </div>
    </CascadingValue>
</div>
