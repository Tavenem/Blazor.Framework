@using Tavenem.Blazor.Framework.Components.Tabs

@namespace Tavenem.Blazor.Framework

@inherits PersistentComponentBase

@attribute [CascadingTypeParameter(nameof(TTabItem))]
@typeparam TTabItem

<tf-tabs @attributes="AdditionalAttributes"
         id="@Id"
         class="@CssClass"
         data-active-index="@ActivePanelIndex"
         style="@CssStyle"
         @ondelete="OnDeleteAsync"
         @onvaluechange="OnValueChangeAsync">
    <CascadingValue Value="this" IsFixed="true">
        <div id="@ToolbarId"
             class="@ToolbarCssClass">
            <div class="tabs-toolbar-inner">
                @PreTabContent
                <div class="tabs-toolbar-content">
                    <div class="tabs-toolbar-wrapper" role="tablist" tabindex="0">
                        @for (var i = 0; i < _panels.Count; i++)
                        {
                            var index = i;
                            <Tab @key="@_panels[index].Id"
                                 Id="@_panels[index].Id"
                                 IsDraggable="false"
                                 IsDropTarget="false"
                                 TabPanel="_panels[index]" />
                        }
                        @if (Items is not null
                            && PanelTemplate is not null)
                        {
                            for (var i = 0; i < _dynamicItems.Count && i < Items.Count; i++)
                            {
                                var index = i;
                                <Tab @ref="_dynamicItems[index].DragDropComponent"
                                     @key="@_dynamicItems[index].Id"
                                     TTabItem="TTabItem"
                                     Id="@_dynamicItems[index].Id"
                                     DragEffectAllowed="DragEffectAllowed"
                                     IsDraggable="EnableDragDrop"
                                     IsDropTarget="EnableDragDrop"
                                     Item="Items[index]"
                                     JsonTypeInfo="JsonTypeInfo"
                                     OnDrop="@(e => OnDropOnItemAsync(index, e))"
                                     OnDropped="@(e => OnDroppedItemAsync(index, e))"
                                     TabInfo="_dynamicItems[index]">
                                    @if (_dynamicItems[index].DragDropComponent?.HasValidDrop == true
                                        || (index == 0 && _panels.Any(x => x.HasValidDrop)))
                                    {
                                        <div class="@DropPlaceholderClass"></div>
                                    }
                                    @if (TabTemplate is not null)
                                    {
                                        @TabTemplate(Items[index + _panels.Count])
                                    }
                                    else if (TabTitle is not null)
                                    {
                                        @TabTitle(Items[index + _panels.Count])
                                    }
                                </Tab>
                            }
                        }
                        @if (IsInteractive)
                        {
                            if (HasValidDrop && NoDropTargetChildren)
                            {
                                <div class="@DropPlaceholderClass"></div>
                            }
                            @if (OnAdd is not null)
                            {
                                <button @onclick="OnAddTabAsync"
                                        class="btn btn-icon add-btn"
                                        disabled="@(!IsInteractive)">
                                    <svg class="svg-icon" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z"/></svg>
                                </button>
                            }
                        }
                    </div>
                </div>
                @PostTabContent
            </div>
        </div>
        @if (HeaderContent is not null)
        {
            @HeaderContent(ActiveItem)
        }
        <div class="tab-panels">
            @ChildContent
            @if (Items is not null
                && PanelTemplate is not null)
            {
                for (var i = 0; i < _dynamicItems.Count && i < Items.Count; i++)
                {
                    var index = i;
                    <tf-tabpanel @key="@_dynamicItems[index].PanelId"
                                 id="@_dynamicItems[index].PanelId">
                        @PanelTemplate(Items[index])
                    </tf-tabpanel>
                }
            }
        </div>
    </CascadingValue>
</tf-tabs>
