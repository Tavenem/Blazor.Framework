@namespace Tavenem.Blazor.Framework

@attribute [CascadingTypeParameter(nameof(TValue))]
@typeparam TValue

@inherits SelectBase<TValue, TValue>

<tf-picker @attributes="AdditionalAttributes"
           id="@ContainerId"
           class="@CssClass"
           data-popover-container
           disabled="@Disabled"
           readonly="@ReadOnly"
           style="@CssStyle"
           tabindex="-1"
           value="@CurrentValueAsString"
           @searchinput="OnSearchInputAsync"
           @valuechange="OnPickerValueChange">
    <tf-input @ref="ElementReference"
              @attributes="InputAttributes"
              id="@InputId"
              autofocus="@AutoFocus"
              class="@OuterInputCssClass"
              data-input-class="@InputCssClass"
              data-input-id="@Id"
              data-input-style="@InputCssStyle"
              disabled="@Disabled"
              display="@DisplayString"
              name="@NameValue"
              placeholder="@Placeholder"
              readonly="@ReadOnly"
              required="@Required"
              size="1"
              tabindex="@TabIndex"
              value="@CurrentValueAsString">
        <tf-icon class="expand">@DefaultIcons.Expand</tf-icon>
    </tf-input>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    @if (!string.IsNullOrEmpty(HelpText)
        || IsInvalidAndTouched)
    {
        <div class="field-helpers">
            @if (IsInvalidAndTouched)
            {
                <ul class="mr-auto mb-0 pl-0">
                    @foreach (var message in GetValidationMessages())
                    {
                        <li>@message</li>
                    }
                </ul>
            }
            else if (!string.IsNullOrEmpty(HelpText))
            {
                <div class="mr-auto">@HelpText</div>
            }
        </div>
    }
    <Popover @ref="Popover"
             Class="contained-popover filled"
             AnchorId="@InputId"
             AnchorOrigin="Origin.Bottom_Left"
             PopoverOrigin="Origin.Top_Left"
             MatchWidth="true"
             MaxHeight="min(300px,90vh)">
        <div class="@OptionListCssClass">
            <CascadingValue Value="this" IsFixed="true">
                @ChildContent
                @if (Options is not null)
                {
                    if (OptionTemplate is null)
                    {
                        foreach (var value in Options)
                        {
                            <Option @key="value" Value="value" Label="@(Labels?.Invoke(value) ?? value?.ToString())" />
                        }
                    }
                    else
                    {
                        foreach (var value in Options)
                        {
                            <Option @key="value" Value="value" Label="@(Labels?.Invoke(value) ?? value?.ToString())">
                                @OptionTemplate(value)
                            </Option>
                        }
                    }
                }
                @if (OptionPairs is not null)
                {
                    foreach (var (key, value) in OptionPairs)
                    {
                        <Option @key="key" Value="key" Label="@value" />
                    }
                }
            </CascadingValue>
        </div>
    </Popover>
</tf-picker>
