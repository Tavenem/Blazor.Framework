<Dialog>
    <ChildContent>
        <Form @ref="ImgForm" Model="Img">
            <TextInput Label="URL"
                       @bind-Value="Img.Src"
                       UpdateOnInput="true"
                       Validation="ValidateUri"
                       Required="true" />
            <TextInput Label="Title (optional)"
                       @bind-Value="Img.Title" />
            <TextInput Label="Alt (optional)"
                       @bind-Value="Img.Alt" />
        </Form>
    </ChildContent>
    <FooterContent>
        <div class="message-box-buttons">
            <button @onclick="@(_ => Dialog?.Cancel())" class="btn btn-text">Cancel</button>
            <button @onclick="SubmitAsync" class="btn btn-text primary" disabled="@string.IsNullOrEmpty(Img.Src)">Ok</button>
        </div>
    </FooterContent>
</Dialog>

@code {
    [CascadingParameter] private DialogInstance? Dialog { get; set; }

    private ImgInfo Img { get; set; } = new();

    private Form? ImgForm { get; set; }

    private async Task SubmitAsync()
    {
        if (ImgForm is null
            || string.IsNullOrEmpty(Img.Src))
        {
            return;
        }

        var valid = await ImgForm.ValidateAsync();
        if (!valid)
        {
            return;
        }

        if (!Uri.TryCreate(Img.Src, UriKind.RelativeOrAbsolute, out var uri))
        {
            return;
        }

        Dialog?.Close(DialogResult.Ok(Img));
    }

#pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
    private static async IAsyncEnumerable<string> ValidateUri(string? value, object? _)
    {
        if (string.IsNullOrEmpty(value))
        {
            yield break;
        }

        if (value.StartsWith('#'))
        {
            yield break;
        }

        if (Uri.TryCreate(value, UriKind.RelativeOrAbsolute, out var _))
        {
            yield break;
        }

        yield return "Must be a valid URL";
    }
#pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
}
