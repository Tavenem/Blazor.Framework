@namespace Tavenem.Blazor.Framework

@inherits PersistentComponentBase

@ChildContent
<nav @ref="ElementReference"
     @attributes="AdditionalAttributes"
     id="@Id"
     role="navigation"
     class="@CssClass"
     style="@CssStyle"
     tabindex="-1">
    <ol>
        <li>
            @if (Interactive || IsDisabled || CurrentPage == 0)
            {
                <button @onclick="OnFirstAsync"
                        class="@PageCssClassControl"
                        disabled="@(IsDisabled || CurrentPage == 0)">
                    <tf-icon>@FirstPageIcon</tf-icon>
                </button>
            }
            else
            {
                <a href="GetFirstPageUrl" class="@PageCssClassControl">
                    <tf-icon>@FirstPageIcon</tf-icon>
                </a>
            }
        </li>
        <li>
            @if (Interactive || IsDisabled || CurrentPage == 0)
            {
                <button @onclick="OnPreviousAsync"
                        class="@PageCssClassControl"
                        disabled="@(IsDisabled || CurrentPage == 0)">
                    <tf-icon>@PreviousPageIcon</tf-icon>
                </button>
            }
            else
            {
                <a href="GetPreviousPageUrl" class="@PageCssClassControl">
                    <tf-icon>@PreviousPageIcon</tf-icon>
                </a>
            }
        </li>
        @if (FirstPage > 0)
        {
            <li>&hellip;</li>
        }
        @for (ulong i = FirstPage; i <= LastPage; i++)
        {
            var index = i;
            @if (index == CurrentPage)
            {
                <li @key="index" class="active">
                    <div class="@PageCssClass">@((index + 1).ToString("N0"))</div>
                </li>
            }
            else
            {
                <li @key="index">
                    @if (Interactive || IsDisabled)
                    {
                        <button @onclick="@(_ => OnSetPageAsync(index))" class="@PageCssClass" disabled="@IsDisabled">
                            @((index + 1).ToString("N0"))
                        </button>
                    }
                    else
                    {
                        <a href="@GetPageUrl(index)" class="@PageCssClass">
                            <tf-icon>@PreviousPageIcon</tf-icon>
                        </a>
                    }
                </li>
            }
        }
        @if (PageCount.HasValue && LastPage < PageCount.Value - 1)
        {
            <li>&hellip;</li>
        }
        <li>
            @if (Interactive || IsDisabled || CurrentPage == PageCount - 1)
            {
                <button @onclick="OnNextAsync"
                        class="@PageCssClassControl"
                        disabled="@(IsDisabled || CurrentPage == PageCount - 1)">
                    <tf-icon>@NextPageIcon</tf-icon>
                </button>
            }
            else
            {
                <a href="GetNextPageUrl" class="@PageCssClassControl">
                    <tf-icon>@NextPageIcon</tf-icon>
                </a>
            }
        </li>
        <li>
            @if (Interactive || IsDisabled || CurrentPage == PageCount - 1)
            {
                <button @ref="LastPageElement"
                        @onclick="OnLastAsync"
                        class="@PageCssClassControl"
                        disabled="@(IsDisabled || CurrentPage == PageCount - 1)">
                    <tf-icon>@LastPageIcon</tf-icon>
                </button>
            }
            else
            {
                <a href="GetLastPageUrl" class="@PageCssClassControl">
                    <tf-icon>@LastPageIcon</tf-icon>
                </a>
            }
        </li>
    </ol>
    @ChildContent
</nav>
