@namespace Tavenem.Blazor.Framework

@inherits InputComponentBase<string>

<div @attributes="AdditionalAttributes" class="@CssClass" style="@CssStyle" @onclick="FocusAsync">
    <div id="@InputId" class="input">
        @if (PrefixContent is not null)
        {
            @PrefixContent(Value)
        }
        else if (!string.IsNullOrEmpty(PrefixIcon) || !string.IsNullOrEmpty(PrefixText))
        {
            @if (!string.IsNullOrEmpty(PrefixIcon))
            {
                <tf-icon>@PrefixIcon</tf-icon>
            }
            @if (!string.IsNullOrEmpty(PrefixText))
            {
                <span>@PrefixText</span>
            }
        }
        @if (IsInteractive)
        {
            <input type="@InputType.ToCSS()"
                   disabled="@Disabled"
                   hidden
                   name="@NameValue"
                   readonly="@ReadOnly"
                   value="@CurrentValue" />
            <input @ref="ElementReference"
                   @attributes="InputAttributes"
                   id="@Id"
                   type="@InputType.ToCSS()"
                   class="@InputCssClass"
                   style="@InputCssStyle"
                   autocomplete="@AutocompleteValue"
                   autocorrect="@AutocorrectValue"
                   autofocus="@AutoFocus"
                   disabled="@Disabled"
                   maxlength="@MaxLength"
                   pattern="@Pattern"
                   placeholder="@(string.IsNullOrEmpty(Placeholder) ? " " : Placeholder)"
                   readonly="@ReadOnly"
                   required="@Required"
                   size="@EffectiveSize"
                   spellcheck="@SpellcheckValue"
                   tabindex="@TabIndex"
                   value="@DisplayString"
                   @onclick="OnClick"
                   @onclick:stopPropagation="true"
                   @oninput="OnInputAsync"
                   @onchange="OnChangeAsync"
                   @onfocusin="OnFocusIn"
                   @onfocusout="OnFocusOut"
                   @onkeydown="OnKeyDownAsync"
                   @onkeyup="OnKeyUpAsync" />
        }
        else
        {
            <input @ref="ElementReference"
                   @attributes="InputAttributes"
                   id="@Id"
                   autocomplete="@AutocompleteValue"
                   autocorrect="@AutocorrectValue"
                   autofocus="@AutoFocus"
                   class="@InputCssClass"
                   disabled="@Disabled"
                   list="@(Suggestions?.Any() == true || SuggestionValues?.Any() == true ? $"{Id}-suggestions" : null)"
                   maxlength="@MaxLength"
                   name="@NameValue"
                   pattern="@Pattern"
                   placeholder="@(string.IsNullOrEmpty(Placeholder) ? " " : Placeholder)"
                   readonly="@ReadOnly"
                   required="@Required"
                   size="@EffectiveSize"
                   spellcheck="@SpellcheckValue"
                   style="@InputCssStyle"
                   tabindex="@TabIndex"
                   type="@InputType.ToCSS()"
                   value="@CurrentValue"
                   @onclick="OnClick"
                   @onclick:stopPropagation="true"
                   @oninput="OnInputAsync"
                   @onchange="OnChangeAsync"
                   @onfocusin="OnFocusIn"
                   @onfocusout="OnFocusOut"
                   @onkeydown="OnKeyDownAsync"
                   @onkeyup="OnKeyUpAsync" />
        }
        @if (ShowClear)
        {
            <button class="@ClearButtonCssClass" tabindex="-1" @onclick="Clear">
                <tf-icon>@ClearIcon</tf-icon>
            </button>
        }
        @if (ShowEmoji && IsInteractive)
        {
            <EmojiInput IconButton="true"
                        @bind-Value="Emoji"
                        @bind-Value:after="OnSelectEmojiAsync">
                <Tooltip Delay="750">insert emoji</Tooltip>
            </EmojiInput>
        }
        @if (PostfixContent is not null)
        {
            @PostfixContent(Value)
        }
        else if (!string.IsNullOrEmpty(PostfixIcon) || !string.IsNullOrEmpty(PostfixText))
        {
            @if (!string.IsNullOrEmpty(PostfixIcon))
            {
                <tf-icon>@PostfixIcon</tf-icon>
            }
            @if (!string.IsNullOrEmpty(PostfixText))
            {
                <span>@PostfixText</span>
            }
        }
    </div>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    @if ((ShowLength && MaxLength.HasValue)
        || !string.IsNullOrEmpty(HelpText)
        || HelpTextContent.HasValue
        || IsInvalidAndTouched)
    {
        <div class="@HelpersClass">
            @if (IsInvalidAndTouched)
            {
                <ul class="mr-auto mb-0 pl-0">
                    @foreach (var message in GetValidationMessages())
                    {
                        <li>@message</li>
                    }
                </ul>
            }
            else if (HelpTextContent.HasValue)
            {
                <div class="mr-auto">@HelpTextContent.Value</div>
            }
            else if (!string.IsNullOrEmpty(HelpText))
            {
                <div class="mr-auto">@HelpText</div>
            }
            @if (ShowLength && MaxLength.HasValue && IsInteractive)
            {
                <div class="ml-auto">
                    <span>@CurrentLength</span>
                    <span>/</span>
                    <span>@MaxLength</span>
                </div>
            }
        </div>
    }
    @ChildContent
    @if (IsInteractive)
    {
        <Popover @ref="SuggestionPopover"
                 Class="filled"
                 AnchorId="@InputId"
                 AnchorOrigin="Origin.Bottom_Left"
                 PopoverOrigin="Origin.Top_Left"
                 IsOpen="ShowSuggestions"
                 MatchWidth="true"
                 MaxHeight="min(300px,90vh)">
            <menu class="@SuggestionListCssClass"
                  @onclick:stopPropagation="true">
                @foreach (var suggestion in FilteredSuggestions)
                {
                    <li @key="suggestion"
                        tabindex="0"
                        @onclick="@(_ => SuggestionSelectedAsync(suggestion))"
                        @onkeydown="@(e => SuggestionKeyDownAsync(e, suggestion))">@suggestion</li>
                }
                @if (SuggestionTemplate is null)
                {
                    @foreach (var suggestion in FilteredSuggestionValues)
                    {
                        <li @key="suggestion.Key"
                            tabindex="0"
                            @onclick="@(_ => SuggestionSelectedAsync(suggestion.Key))"
                            @onkeydown="@(e => SuggestionKeyDownAsync(e, suggestion.Key))">@suggestion.Value.ToString()</li>
                    }
                }
                else
                {
                    @foreach (var suggestion in FilteredSuggestionValues)
                    {
                        <li @key="suggestion.Key"
                            tabindex="0"
                            @onclick="@(_ => SuggestionSelectedAsync(suggestion.Key))"
                            @onkeydown="@(e => SuggestionKeyDownAsync(e, suggestion.Key))">
                            @SuggestionTemplate(suggestion.Value)
                        </li>
                    }
                }
                @if (LoadingSuggestions)
                {
                    <tf-progress-circle></tf-progress-circle>
                }
            </menu>
        </Popover>
    }
    else if (Suggestions?.Any() == true || SuggestionValues?.Any() == true)
    {
        <datalist id="@($"{Id}-suggestions")">
            @if (Suggestions?.Any() == true)
            {
                @foreach (var suggestion in Suggestions)
                {
                    <option value="@suggestion"></option>
                }
            }
            @if (SuggestionValues?.Any() == true)
            {
                @if (SuggestionTemplate is null)
                {
                    @foreach (var suggestion in SuggestionValues)
                    {
                        <option value="@suggestion.Key">@suggestion.Value</option>
                    }
                }
                else
                {
                    @foreach (var suggestion in SuggestionValues)
                    {
                        <option value="@suggestion.Key">@SuggestionTemplate(suggestion.Value)</option>
                    }
                }
            }
        </datalist>
    }
</div>
