@typeparam TDataItem

<Dialog Style="min-width:75vw">
    <ChildContent>
        @if (EditedItem is not null)
        {
            <Form @ref="DialogEditForm" Class="d-flex flex-column mx-3 gap-3">
            @foreach (var column in Columns)
            {
                @if (column.GetCanEdit())
                {
                    if (column.EditContent is not null)
                    {
                        @column.EditContent(EditedItem)
                    }
                    else if (column is Column<TDataItem, string> stringColumn)
                    {
                        <TextInput @bind-Value:get="@stringColumn.GetCellValue(EditedItem)"
                                   @bind-Value:set="@(v => stringColumn.SetCellValue(EditedItem, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   Label="@column.GetLabel()"
                                   Validation="@((v, _) => stringColumn.Validate(v, EditedItem))"
                                   Class="dense" />
                    }
                    else if (column is Column<TDataItem, bool> boolColumn)
                    {
                        <Checkbox @bind-Value:get="@boolColumn.GetCellValue(EditedItem)"
                                  @bind-Value:set="@(v => boolColumn.SetCellValue(EditedItem, v))"
                                  Label="@column.GetLabel()"
                                  Validation="@((v, _) => boolColumn.Validate(v, EditedItem))"
                                  Class="dense" />
                    }
                    else if (column is Column<TDataItem, bool?> nullableBoolColumn)
                    {
                        <Checkbox @bind-Value:get="@nullableBoolColumn.GetCellValue(EditedItem)"
                                  @bind-Value:set="@(v => nullableBoolColumn.SetCellValue(EditedItem, v))"
                                  AllowNull="true"
                                  Label="@column.GetLabel()"
                                  Validation="@((v, _) => nullableBoolColumn.Validate(v, EditedItem))"
                                  Class="dense" />
                    }
                    else if (column is Column<TDataItem, byte> byteColumn)
                    {
                        <NumericInput @bind-Value:get="@byteColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => byteColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => byteColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, byte?> nullableByteColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableByteColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableByteColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableByteColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, decimal> decimalColumn)
                    {
                        <NumericInput @bind-Value:get="@decimalColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => decimalColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => decimalColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, decimal?> nullableDecimalColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableDecimalColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableDecimalColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableDecimalColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, double> doubleColumn)
                    {
                        <NumericInput @bind-Value:get="@doubleColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => doubleColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => doubleColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, double?> nullableDoubleColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableDoubleColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableDoubleColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableDoubleColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, float> floatColumn)
                    {
                        <NumericInput @bind-Value:get="@floatColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => floatColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => floatColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, float?> nullableFloatColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableFloatColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableFloatColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableFloatColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, int> intColumn)
                    {
                        <NumericInput @bind-Value:get="@intColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => intColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => intColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, int?> nullableIntColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableIntColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableIntColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableIntColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, long> longColumn)
                    {
                        <NumericInput @bind-Value:get="@longColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => longColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => longColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, long?> nullableLongColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableLongColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableLongColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableLongColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, nint> nintColumn)
                    {
                        <NumericInput @bind-Value:get="@nintColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nintColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nintColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, nint?> nullableNintColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableNintColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableNintColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableNintColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, nuint> nuintColumn)
                    {
                        <NumericInput @bind-Value:get="@nuintColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nuintColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nuintColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, nuint?> nullableNuintColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableNuintColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableNuintColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableNuintColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, sbyte> sbyteColumn)
                    {
                        <NumericInput @bind-Value:get="@sbyteColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => sbyteColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => sbyteColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, sbyte?> nullableSbyteColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableSbyteColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableSbyteColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableSbyteColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, short> shortColumn)
                    {
                        <NumericInput @bind-Value:get="@shortColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => shortColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => shortColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, short?> nullableShortColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableShortColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableShortColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableShortColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, uint> uintColumn)
                    {
                        <NumericInput @bind-Value:get="@uintColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => uintColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => uintColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, uint?> nullableUintColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableUintColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableUintColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableUintColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, ulong> ulongColumn)
                    {
                        <NumericInput @bind-Value:get="@ulongColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => ulongColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => ulongColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, ulong?> nullableUlongColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableUlongColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableUlongColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableUlongColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, ushort> ushortColumn)
                    {
                        <NumericInput @bind-Value:get="@ushortColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => ushortColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => ushortColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column is Column<TDataItem, ushort?> nullableUshortColumn)
                    {
                        <NumericInput @bind-Value:get="@nullableUshortColumn.GetCellValue(EditedItem)"
                                      @bind-Value:set="@(v => nullableUshortColumn.SetCellValue(EditedItem, v))"
                                      Format="@column.Format"
                                      FormatProvider="column.FormatProvider"
                                      Label="@column.GetLabel()"
                                      Validation="@((v, _) => nullableUshortColumn.Validate(v, EditedItem))"
                                      Class="dense" />
                    }
                    else if (column.IsEnum)
                    {
                        <Select TValue="object"
                                @bind-Value:get="@column.GetCellObjectValue(EditedItem)"
                                @bind-Value:set="@(v => column.SetCellObjectValue(EditedItem, v))"
                                Label="@column.GetLabel()"
                                OptionPairs="@column.GetEnumOptions()"
                                Validation="@((v, _) => column.ValidateObject(v, EditedItem))"
                                Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.DateTime> dateTimeColumn)
                    {
                        <DateTimeInput @bind-Value:get="@dateTimeColumn.GetCellValue(EditedItem)"
                                       @bind-Value:set="@(v => dateTimeColumn.SetCellValue(EditedItem, v))"
                                       Format="@column.Format"
                                       FormatProvider="column.FormatProvider"
                                       ShowTime="true"
                                       Label="@column.GetLabel()"
                                       Validation="@((v, _) => dateTimeColumn.Validate(v, EditedItem))"
                                       Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.DateTime?> nullableDateTimeColumn)
                    {
                        <DateTimeInput @bind-Value:get="@nullableDateTimeColumn.GetCellValue(EditedItem)"
                                       @bind-Value:set="@(v => nullableDateTimeColumn.SetCellValue(EditedItem, v))"
                                       Format="@column.Format"
                                       FormatProvider="column.FormatProvider"
                                       ShowTime="true"
                                       Label="@column.GetLabel()"
                                       Validation="@((v, _) => nullableDateTimeColumn.Validate(v, EditedItem))"
                                       Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.DateTimeOffset> dateTimeOffsetColumn)
                    {
                        <DateTimeInput @bind-Value:get="@dateTimeOffsetColumn.GetCellValue(EditedItem)"
                                       @bind-Value:set="@(v => dateTimeOffsetColumn.SetCellValue(EditedItem, v))"
                                       Format="@column.Format"
                                       FormatProvider="column.FormatProvider"
                                       ShowTime="true"
                                       ShowTimeZone="true"
                                       Label="@column.GetLabel()"
                                       Validation="@((v, _) => dateTimeOffsetColumn.Validate(v, EditedItem))"
                                       Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.DateTimeOffset?> nullableDateTimeOffsetColumn)
                    {
                        <DateTimeInput @bind-Value:get="@nullableDateTimeOffsetColumn.GetCellValue(EditedItem)"
                                       @bind-Value:set="@(v => nullableDateTimeOffsetColumn.SetCellValue(EditedItem, v))"
                                       Format="@column.Format"
                                       FormatProvider="column.FormatProvider"
                                       ShowTime="true"
                                       ShowTimeZone="true"
                                       Label="@column.GetLabel()"
                                       Validation="@((v, _) => nullableDateTimeOffsetColumn.Validate(v, EditedItem))"
                                       Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.DateOnly> dateOnlyColumn)
                    {
                        <DateTimeInput @bind-Value:get="@dateOnlyColumn.GetCellValue(EditedItem)"
                                       @bind-Value:set="@(v => dateOnlyColumn.SetCellValue(EditedItem, v))"
                                       Format="@column.Format"
                                       FormatProvider="column.FormatProvider"
                                       Label="@column.GetLabel()"
                                       Validation="@((v, _) => dateOnlyColumn.Validate(v, EditedItem))"
                                       Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.DateOnly?> nullableDateOnlyColumn)
                    {
                        <DateTimeInput @bind-Value:get="@nullableDateOnlyColumn.GetCellValue(EditedItem)"
                                       @bind-Value:set="@(v => nullableDateOnlyColumn.SetCellValue(EditedItem, v))"
                                       Format="@column.Format"
                                       FormatProvider="column.FormatProvider"
                                       Label="@column.GetLabel()"
                                       Validation="@((v, _) => nullableDateOnlyColumn.Validate(v, EditedItem))"
                                       Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.TimeOnly> timeOnlyColumn)
                    {
                        <DateTimeInput @bind-Value:get="@timeOnlyColumn.GetCellValue(EditedItem)"
                                       @bind-Value:set="@(v => timeOnlyColumn.SetCellValue(EditedItem, v))"
                                       Format="@column.Format"
                                       FormatProvider="column.FormatProvider"
                                       Label="@column.GetLabel()"
                                       Validation="@((v, _) => timeOnlyColumn.Validate(v, EditedItem))"
                                       Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.TimeOnly?> nullableTimeOnlyColumn)
                    {
                        <DateTimeInput @bind-Value:get="@nullableTimeOnlyColumn.GetCellValue(EditedItem)"
                                       @bind-Value:set="@(v => nullableTimeOnlyColumn.SetCellValue(EditedItem, v))"
                                       Format="@column.Format"
                                       FormatProvider="column.FormatProvider"
                                       Label="@column.GetLabel()"
                                       Validation="@((v, _) => nullableTimeOnlyColumn.Validate(v, EditedItem))"
                                       Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.Drawing.Color> colorColumn)
                    {
                        <ColorInput @bind-Value:get="@colorColumn.GetCellValue(EditedItem)"
                                    @bind-Value:set="@(v => colorColumn.SetCellValue(EditedItem, v))"
                                    ColorMode="ColorMode.RGB"
                                    Format="@column.Format"
                                    FormatProvider="column.FormatProvider"
                                    Label="@column.GetLabel()"
                                    Validation="@((v, _) => colorColumn.Validate(v, EditedItem))"
                                    Class="dense" />
                    }
                    else if (column is Column<TDataItem, System.Drawing.Color?> nullableColorColumn)
                    {
                        <ColorInput @bind-Value:get="@nullableColorColumn.GetCellValue(EditedItem)"
                                    @bind-Value:set="@(v => nullableColorColumn.SetCellValue(EditedItem, v))"
                                    ColorMode="ColorMode.RGB"
                                    Format="@column.Format"
                                    FormatProvider="column.FormatProvider"
                                    Label="@column.GetLabel()"
                                    Validation="@((v, _) => nullableColorColumn.Validate(v, EditedItem))"
                                    Class="dense" />
                    }
                    else
                    {
                        <Field Label="@column.GetLabel()" Class="dense">
                            @if (column.ChildContent is null)
                            {
                                @column.ToString(EditedItem)
                            }
                            else
                            {
                                @column.ChildContent(EditedItem)
                            }
                        </Field>
                    }
                }
                else if (column.GetIsShown())
                {
                    <Field Label="@column.GetLabel()" Class="dense" ReadOnly="true" Disabled="true">
                        @if (column.ChildContent is null)
                        {
                            @column.ToString(EditedItem)
                        }
                        else
                        {
                            @column.ChildContent(EditedItem)
                        }
                    </Field>
                }
            }
            </Form>
        }
    </ChildContent>
    <FooterContent>
        <button class="btn btn-text" @onclick="@OnCancel">Cancel</button>
        <button class="btn btn-text primary" @onclick="@OnSaveAsync">Save</button>
    </FooterContent>
</Dialog>