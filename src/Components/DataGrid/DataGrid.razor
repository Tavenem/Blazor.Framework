@using Tavenem.Blazor.Framework.Components.DataGrid
@using Tavenem.Blazor.Framework.InternalComponents.DataGrid

@namespace Tavenem.Blazor.Framework

@attribute [CascadingTypeParameter(nameof(TDataItem))]
@typeparam TDataItem

@inherits TavenemComponentBase

<div class="d-none">
    <CascadingValue Value="this" TValue="IDataGrid<TDataItem>" IsFixed="true">
        @ChildContent
    </CascadingValue>
</div>
<div @attributes="AdditionalAttributes" class="@CssClass" style="@CssStyle">
    <div class="datagrid-toolbar">
        <div>
            @if (!string.IsNullOrWhiteSpace(Title))
            {
                <span class="@TitleClass">@Title</span>
            }
            @HeaderContent
        </div>
        <div>
            @if (AllowSearch && _columns.Any(x => x.IsString && x.IsQuickFilter))
            {
                <TextInput Value="@QuickFilter"
                           ValueChanged="OnChangeQuickFilterAsync"
                           PostfixIcon="@DefaultIcons.Search"
                           UpdateOnInput="true"
                           UpdateOnInputDebounce="500" />
            }
            @if (AllowAdd)
            {
                <button class="btn btn-icon small" @onclick="OnAddAsync"><tf-icon>@DefaultIcons.Add</tf-icon></button>
            }
            @if (AllowExport)
            {
                <button class="btn btn-icon small" @onclick="ShowExportDialogAsync">
                    <tf-icon>@DefaultIcons.ImportExport</tf-icon>
                </button>
            }
            <button class="btn btn-icon small" @onclick="ShowColumnFilterDialogAsync">
                <tf-icon>@DefaultIcons.Filter</tf-icon>
            </button>
        </div>
    </div>
    <Form @ref="TableEditForm" Style="@FormStyle">
        <table class="@TableCssClass">
            <colgroup>
                @if (SelectionType == SelectionType.Multiple)
                {
                    <col />
                }
                @if (AllowEdit || AllowDelete)
                {
                    <col />
                }
                @if (ExpandedContent is not null)
                {
                    <col />
                }
                @foreach (var column in _columns.Where(x => x.GetIsShown()))
                {
                    <col @key="column" class="@column.ColumnClass" />
                }
            </colgroup>
            <thead>
                <tr>
                    @if (SelectionType == SelectionType.Multiple)
                    {
                        <th class="input">
                            <Checkbox TValue="bool?"
                                      Value="SelectAllValue"
                                      ValueChanged="OnSetSelectAllAsync"
                                      ThemeColor="ThemeColor"
                                      Class="dense" />
                        </th>
                    }
                    @if (AllowEdit || AllowDelete)
                    {
                        <th></th>
                    }
                    @if (ExpandedContent is not null)
                    {
                        <th></th>
                    }
                    @foreach (var column in _columns.Where(x => x.GetIsShown()))
                    {
                        <th @key="column" class="@GetColumnHeaderClass(column)">
                            <div @onclick="@(_ => OnColumnSortAsync(column))">
                                @if (column.LabelContent is null)
                                {
                                    <span style="white-space:nowrap">
                                        @column.GetLabel()
                                    </span>
                                }
                                else
                                {
                                    @column.LabelContent
                                }
                                @if (column.GetIsSortable())
                                {
                                    <tf-icon class="@GetColumnHeaderIconClass(column)">
                                        @DefaultIcons.Sort_Ascending
                                    </tf-icon>
                                }
                            </div>
                            @if (column.CanFilter)
                            {
                                <div>
                                    @if (column.IsString)
                                    {
                                        <TextInput Value="@column.TextFilter"
                                                    ValueChanged="@(v => OnFilterChangedAsync(column, v))"
                                                    PostfixIcon="@DefaultIcons.Search"
                                                    UpdateOnInput="true"
                                                    UpdateOnInputDebounce="Debounce"
                                                    Class="dense" />
                                    }
                                    else if (column.IsBool)
                                    {
                                        <Checkbox TValue="bool?"
                                                    Value="@column.BoolFilter"
                                                    ValueChanged="@(v => OnBoolFilterChangedAsync(column, v))"
                                                    AllowNull="true"
                                                    Class="dense" />
                                    }
                                    else if (column.IsNumeric)
                                    {
                                        <NumericInput TValue="double?"
                                                        Value="@column.NumberFilter"
                                                        ValueChanged="@(v => OnNumberFilterChangedAsync(column, v))"
                                                        UpdateOnInput="true"
                                                        UpdateOnInputDebounce="Debounce"
                                                        Class="dense" />
                                    }
                                    else if (column.IsDateTime)
                                    {
                                        <Switch @bind-Value="column.DateTimeFilterIsBefore"
                                                UncheckedLabel="After"
                                                Label="Before"
                                                Class="dense" />
                                        <DateTimeInput TValue="DateTimeOffset?"
                                                        Value="@column.DateTimeFilter"
                                                        ValueChanged="@(v => OnDateTimeFilterChangedAsync(column, v))"
                                                        DateType="@(column is Column<TDataItem, TimeOnly> ? DateType.None : DateType.Date)"
                                                        ShowTime="@(column is not Column<TDataItem, DateOnly>)"
                                                        Class="dense" />
                                    }
                                </div>
                            }
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                <tr class="loading-row">
                    <td colspan="1000">
                        @if (IsLoading)
                        {
                            <tf-progress-linear class="@LoadingClass"></tf-progress-linear>
                        }
                    </td>
                </tr>
                @if (DataGroups is null)
                {
                    if (!AnyItems)
                    {
                        <tr>
                            <td colspan="1000" style="text-align:center;vertical-align:middle">
                                <div class="my-3">
                                    @if (IsLoading)
                                    {
                                        <tf-progress-circle class="@ThemeColor.ToCSS()"></tf-progress-circle>
                                    }
                                    else if (NoDataContent is null)
                                    {
                                        if (AnyUnfilteredItems)
                                        {
                                            <span>Nothing matches the current filters</span>
                                        }
                                        else
                                        {
                                            <span>No Data</span>
                                        }
                                    }
                                    else
                                    {
                                        @NoDataContent
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                    else if (!_columns.Any(x => x.GetIsShown()))
                    {
                        <tr>
                            <td colspan="1000" style="text-align:center;vertical-align:middle">
                                <div class="d-flex align-items-center my-3 gap-2">
                                    <span>No columns displayed</span>
                                    <button class="btn btn-icon small" @onclick="ShowColumnFilterDialogAsync">
                                        <tf-icon>@DefaultIcons.Filter</tf-icon>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <CascadingValue Value="this" IsFixed="true">
                            <CascadingValue Value="TableEditForm" IsFixed="true">
                                @foreach (TDataItem item in CurrentPageItems)
                                {
                                    <Row TDataItem="TDataItem" Item="item" />
                                }
                            </CascadingValue>
                        </CascadingValue>
                    }
                }
                else if (DataGroups.Count == 0)
                {
                    <tr>
                        <td colspan="1000" style="text-align:center;vertical-align:middle">
                            <div class="my-3">
                                @if (IsLoading)
                                {
                                    <tf-progress-circle class="@ThemeColor.ToCSS()"></tf-progress-circle>
                                }
                                else if (NoDataContent is null)
                                {
                                    <span>No Data</span>
                                }
                                else
                                {
                                    @NoDataContent
                                }
                            </div>
                        </td>
                    </tr>
                }
                else
                {
                    @foreach (var group in DataGroups)
                    {
                        <tr @key="group">
                            <td colspan="1000" style="background-color:var(--tavenem-color-bg-alt)">
                                <span class="d-inline-flex align-items-center gap-2">
                                    <button class="btn btn-icon small" @onclick="@(_ => OnToggleGroupExpansion(group))">
                                        <tf-icon class="@GetGroupExpandClass(group.Key)">@DefaultIcons.Expand</tf-icon>
                                    </button>
                                    @if (GroupContent is null)
                                    {
                                        if (GroupLabel is null)
                                        {
                                            <span><strong>@group.Key?.ToString()</strong></span>
                                        }
                                        else
                                        {
                                            <span><strong>@GroupLabel(group.Key)</strong></span>
                                        }
                                    }
                                    else
                                    {
                                        @GroupContent(group.Key)
                                    }
                                </span>
                            </td>
                        </tr>
                        @if (GetGroupIsExpanded(group.Key))
                        {
                            <CascadingValue Value="this" IsFixed="true">
                                <CascadingValue Value="TableEditForm" IsFixed="true">
                                    @foreach (TDataItem item in group)
                                    {
                                        <Row TDataItem="TDataItem" Item="item" />
                                    }
                                </CascadingValue>
                            </CascadingValue>
                            @if (group.Any()
                                && _columns.Any(x => x.FooterContent is not null))
                            {
                                <tr>
                                    @if (SelectionType == SelectionType.Multiple)
                                    {
                                        <td></td>
                                    }
                                    @if (AllowEdit || AllowDelete)
                                    {
                                        <td></td>
                                    }
                                    @if (ExpandedContent is not null)
                                    {
                                        <td></td>
                                    }
                                    @foreach (var column in _columns.Where(x => x.GetIsShown()))
                                    {
                                        <td @key="column">
                                            @if (column.FooterContent is not null)
                                            {
                                                @column.FooterContent(group)
                                            }
                                        </td>
                                    }
                                </tr>
                            }
                        }
                    }
                }
            </tbody>
            <tfoot>
                @if (AnyItems
                    && _columns.Any(x => x.FooterContent is not null))
                {
                    <tr>
                        @if (SelectionType == SelectionType.Multiple)
                        {
                            <td></td>
                        }
                        @if (AllowEdit || AllowDelete)
                        {
                            <td></td>
                        }
                        @if (ExpandedContent is not null)
                        {
                            <td></td>
                        }
                        @foreach (var column in _columns.Where(x => x.GetIsShown()))
                        {
                            <td @key="column">
                                @if (column.FooterContent is not null)
                                {
                                    @column.FooterContent(CurrentPageItems)
                                }
                            </td>
                        }
                    </tr>
                }
            </tfoot>
        </table>
    </Form>
    @if ((LoadItems is null
    && ItemCount > RowsPerPage)
        || CurrentDataPage?.TotalCount > RowsPerPage)
    {
        <div class="datagrid-pagination">
            @if (ShowRowsPerPage)
            {
                <span>Items per page:</span>
                <Select TValue="ushort"
                        Value="RowsPerPage"
                        ValueChanged="OnChangeRowsPerPageAsync"
                        Options="RowsPerPageOptions"
                        InputClass="text-center" />
            }
            <span>@((Offset + 1).ToString("N0"))</span><span>&ndash;</span><span>@((Offset + (ulong)CurrentPageItems.Count()).ToString("N0"))</span>
            @if (LoadItems is null || CurrentDataPage?.TotalCount.HasValue == true)
            {
                <span>of</span>
                <span>@((LoadItems is null ? (ulong)ItemCount : CurrentDataPage!.TotalCount!.Value).ToString("N0"))</span>
            }
            <Pagination CurrentPage="CurrentPage"
                        CurrentPageChanged="OnPageChangedAsync"
                        LastRequested="OnLastPageAsync"
                        NextRequested="OnNextPageAsync"
                        PageCount="PageCount"
                        ThemeColor="ThemeColor" />
        </div>
    }
</div>
