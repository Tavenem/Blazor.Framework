@namespace Tavenem.Blazor.Framework.InternalComponents.DataGrid

@typeparam TDataItem

@if (DataGrid is null || Item is null)
{
    return;
}
<tr id="@Id"
    class="@RowCssClass"
    data-close-picker="@(Select is not null)"
    data-close-picker-value="@(Select?.GetRowValueAsString(this) ?? Item?.ToString())"
    data-close-picker-display="@(Select?.GetRowAsDisplayString(this) ?? Item?.ToString())"
    @onclick="@OnClickAsync">
    @if (DataGrid.SelectionType == SelectionType.Multiple)
    {
        <td>
            <Checkbox @bind-Value:get="IsSelected"
                      @bind-Value:set="@(v => DataGrid.OnSelectAsync(this, v))"
                      ThemeColor="ThemeColor" />
        </td>
    }
    @if (DataGrid.AllowEdit && DataGrid.IsInteractive)
    {
        <td style="width:calc(2.75rem + 10px)">
            <span class="d-inline-flex gap-1 align-items-center justify-content-space-around">
                @if (IsEditing)
                {
                    <button class="btn btn-icon small"
                            data-tooltip-id="datagrid-cancel-tooltip"
                            @onclick="CancelEdit">
                        <svg class="svg-icon" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="m336-280 144-144 144 144 56-56-144-144 144-144-56-56-144 144-144-144-56 56 144 144-144 144 56 56ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Z"/></svg>
                    </button>
                    <button class="@ThemeButtonClass"
                            data-tooltip-id="datagrid-save-tooltip"
                            @onclick="OnSaveAsync">
                        <svg class="svg-icon" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M840-680v480q0 33-23.5 56.5T760-120H200q-33 0-56.5-23.5T120-200v-560q0-33 23.5-56.5T200-840h480l160 160ZM480-240q50 0 85-35t35-85q0-50-35-85t-85-35q-50 0-85 35t-35 85q0 50 35 85t85 35ZM240-560h360v-160H240v160Z"/></svg>
                    </button>
                }
                else
                {
                    <button class="btn btn-icon small"
                            data-tooltip-id="datagrid-edit-tooltip"
                            @onclick="OnEditAsync"
                            @onclick:stopPropagation="true">
                        <svg class="svg-icon" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M120-120v-170l528-527q12-11 26.5-17t30.5-6q16 0 31 6t26 18l55 56q12 11 17.5 26t5.5 30q0 16-5.5 30.5T817-647L290-120H120Zm584-528 56-56-56-56-56 56 56 56Z"/></svg>
                    </button>
                    @if (DataGrid.AllowDelete)
                    {
                        <button class="btn btn-icon small"
                                data-tooltip-id="datagrid-delete-tooltip"
                                @onclick="OnDeleteAsync"
                                @onclick:stopPropagation="true">
                            <svg class="svg-icon" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm80-160h80v-360h-80v360Zm160 0h80v-360h-80v360Z"/></svg>
                        </button>
                    }
                }
            </span>
        </td>
    }
    else if (DataGrid.AllowDelete && DataGrid.IsInteractive)
    {
        <td>
            <button class="btn btn-icon small"
                    data-tooltip-id="datagrid-delete-tooltip"
                    @onclick="OnDeleteAsync"
                    @onclick:stopPropagation="true">
                <svg class="svg-icon" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px"><path d="M280-120q-33 0-56.5-23.5T200-200v-520h-40v-80h200v-40h240v40h200v80h-40v520q0 33-23.5 56.5T680-120H280Zm80-160h80v-360h-80v360Zm160 0h80v-360h-80v360Z"/></svg>
            </button>
        </td>
    }
    @if (HasRowExpansion)
    {
        <td>
            @if (DataGrid.HasExpandedContent?.Invoke(Item!) != false)
            {
                if (DataGrid.PersistState)
                {
                    <a class="btn btn-icon small" href="@GetRowExpansionToggleUrl()">
                        <svg class="@ExpandClass" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/></svg>
                    </a>
                }
                else if (DataGrid.IsInteractive)
                {
                    <button class="btn btn-icon small"
                            @onclick="OnToggleExpansionAsync">
                        <svg class="@ExpandClass" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/></svg>
                    </button>
                }
                else
                {
                    <button class="btn btn-icon small" disabled>
                        <svg class="@ExpandClass" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/></svg>
                    </button>
                }
            }
        </td>
    }
    @foreach (var column in DataGrid.Columns.Where(x => x.GetIsShown()))
    {
        <td class="@column.GetCellClass(Item)" data-label="@column.Label">
            @if (IsEditing
                && column.GetCanEdit())
            {
                if (column.EditContent is not null)
                {
                    @column.EditContent(Item)
                }
                else if (column is Column<TDataItem, string> stringColumn)
                {
                    <TextInput Value="@stringColumn.GetCellValue(Item)"
                               ValueChanged="@(v => stringColumn.SetCellValue(Item, v))"
                               Format="@column.Format"
                               FormatProvider="column.FormatProvider"
                               Validation="@((v, _) => stringColumn.Validate(v, Item))"
                               Class="dense" />
                }
                else if (column is Column<TDataItem, bool> boolColumn)
                {
                    <Checkbox TValue="bool"
                              Value="@boolColumn.GetCellValue(Item)"
                              ValueChanged="@(v => boolColumn.SetCellValue(Item, v))"
                              Validation="@((v, _) => boolColumn.Validate(v, Item))"
                              Class="dense" />
                }
                else if (column is Column<TDataItem, bool?> nullableBoolColumn)
                {
                    <Checkbox TValue="bool?"
                              Value="@nullableBoolColumn.GetCellValue(Item)"
                              ValueChanged="@(v => nullableBoolColumn.SetCellValue(Item, v))"
                              AllowNull="true"
                              Validation="@((v, _) => nullableBoolColumn.Validate(v, Item))"
                              Class="dense" />
                }
                else if (column is Column<TDataItem, byte> byteColumn)
                {
                    <NumericInput TValue="byte"
                                  Value="@byteColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => byteColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => byteColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, byte?> nullableByteColumn)
                {
                    <NumericInput TValue="byte?"
                                  Value="@nullableByteColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableByteColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableByteColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, decimal> decimalColumn)
                {
                    <NumericInput TValue="decimal"
                                  Value="@decimalColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => decimalColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => decimalColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, decimal?> nullableDecimalColumn)
                {
                    <NumericInput TValue="decimal?"
                                  Value="@nullableDecimalColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableDecimalColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableDecimalColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, double> doubleColumn)
                {
                    <NumericInput TValue="double"
                                  Value="@doubleColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => doubleColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => doubleColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, double?> nullableDoubleColumn)
                {
                    <NumericInput TValue="double?"
                                  Value="@nullableDoubleColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableDoubleColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableDoubleColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, float> floatColumn)
                {
                    <NumericInput TValue="float"
                                  Value="@floatColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => floatColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => floatColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, float?> nullableFloatColumn)
                {
                    <NumericInput TValue="float?"
                                  Value="@nullableFloatColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableFloatColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableFloatColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, int> intColumn)
                {
                    <NumericInput TValue="int"
                                  Value="@intColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => intColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => intColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, int?> nullableIntColumn)
                {
                    <NumericInput TValue="int?"
                                  Value="@nullableIntColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableIntColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableIntColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, long> longColumn)
                {
                    <NumericInput TValue="long"
                                  Value="@longColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => longColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => longColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, long?> nullableLongColumn)
                {
                    <NumericInput TValue="long?"
                                  Value="@nullableLongColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableLongColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableLongColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, nint> nintColumn)
                {
                    <NumericInput TValue="nint"
                                  Value="@nintColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nintColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nintColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, nint?> nullableNintColumn)
                {
                    <NumericInput TValue="nint?"
                                  Value="@nullableNintColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableNintColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableNintColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, nuint> nuintColumn)
                {
                    <NumericInput TValue="nuint"
                                  Value="@nuintColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nuintColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nuintColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, nuint?> nullableNuintColumn)
                {
                    <NumericInput TValue="nuint?"
                                  Value="@nullableNuintColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableNuintColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableNuintColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, sbyte> sbyteColumn)
                {
                    <NumericInput TValue="sbyte"
                                  Value="@sbyteColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => sbyteColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => sbyteColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, sbyte?> nullableSbyteColumn)
                {
                    <NumericInput TValue="sbyte?"
                                  Value="@nullableSbyteColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableSbyteColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableSbyteColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, short> shortColumn)
                {
                    <NumericInput TValue="short"
                                  Value="@shortColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => shortColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => shortColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, short?> nullableShortColumn)
                {
                    <NumericInput TValue="short?"
                                  Value="@nullableShortColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableShortColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableShortColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, uint> uintColumn)
                {
                    <NumericInput TValue="uint"
                                  Value="@uintColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => uintColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => uintColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, uint?> nullableUintColumn)
                {
                    <NumericInput TValue="uint?"
                                  Value="@nullableUintColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableUintColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Label="@column.GetLabel()"
                                  Validation="@((v, _) => nullableUintColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, ulong> ulongColumn)
                {
                    <NumericInput TValue="ulong"
                                  Value="@ulongColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => ulongColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => ulongColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, ulong?> nullableUlongColumn)
                {
                    <NumericInput TValue="ulong?"
                                  Value="@nullableUlongColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableUlongColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableUlongColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, ushort> ushortColumn)
                {
                    <NumericInput TValue="ushort"
                                  Value="@ushortColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => ushortColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => ushortColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column is Column<TDataItem, ushort?> nullableUshortColumn)
                {
                    <NumericInput TValue="ushort?"
                                  Value="@nullableUshortColumn.GetCellValue(Item)"
                                  ValueChanged="@(v => nullableUshortColumn.SetCellValue(Item, v))"
                                  Format="@column.Format"
                                  FormatProvider="column.FormatProvider"
                                  Validation="@((v, _) => nullableUshortColumn.Validate(v, Item))"
                                  Class="dense" />
                }
                else if (column.IsEnum)
                {
                    <Select TValue="object"
                            Value="@column.GetCellObjectValue(Item)"
                            ValueChanged="@(v => column.SetCellObjectValue(Item, v))"
                            OptionPairs="@column.GetEnumOptions()"
                            Validation="@((v, _) => column.ValidateObject(v, Item))"
                            Class="dense" />
                }
                else if (column is Column<TDataItem, System.DateTime> dateTimeColumn)
                {
                    <DateTimeInput TValue="System.DateTime"
                                   Value="@dateTimeColumn.GetCellValue(Item)"
                                   ValueChanged="@(v => dateTimeColumn.SetCellValue(Item, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   ShowTime="true"
                                   Validation="@((v, _) => dateTimeColumn.Validate(v, Item))"
                                   Class="dense" />
                }
                else if (column is Column<TDataItem, System.DateTime?> nullableDateTimeColumn)
                {
                    <DateTimeInput TValue="System.DateTime?"
                                   Value="@nullableDateTimeColumn.GetCellValue(Item)"
                                   ValueChanged="@(v => nullableDateTimeColumn.SetCellValue(Item, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   ShowTime="true"
                                   Validation="@((v, _) => nullableDateTimeColumn.Validate(v, Item))"
                                   Class="dense" />
                }
                else if (column is Column<TDataItem, System.DateTimeOffset> dateTimeOffsetColumn)
                {
                    <DateTimeInput TValue="System.DateTimeOffset"
                                   Value="@dateTimeOffsetColumn.GetCellValue(Item)"
                                   ValueChanged="@(v => dateTimeOffsetColumn.SetCellValue(Item, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   ShowTime="true"
                                   ShowTimeZone="true"
                                   Validation="@((v, _) => dateTimeOffsetColumn.Validate(v, Item))"
                                   Class="dense" />
                }
                else if (column is Column<TDataItem, System.DateTimeOffset?> nullableDateTimeOffsetColumn)
                {
                    <DateTimeInput TValue="System.DateTimeOffset?"
                                   Value="@nullableDateTimeOffsetColumn.GetCellValue(Item)"
                                   ValueChanged="@(v => nullableDateTimeOffsetColumn.SetCellValue(Item, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   ShowTime="true"
                                   ShowTimeZone="true"
                                   Validation="@((v, _) => nullableDateTimeOffsetColumn.Validate(v, Item))"
                                   Class="dense" />
                }
                else if (column is Column<TDataItem, System.DateOnly> dateOnlyColumn)
                {
                    <DateTimeInput TValue="System.DateOnly"
                                   Value="@dateOnlyColumn.GetCellValue(Item)"
                                   ValueChanged="@(v => dateOnlyColumn.SetCellValue(Item, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   Validation="@((v, _) => dateOnlyColumn.Validate(v, Item))"
                                   Class="dense" />
                }
                else if (column is Column<TDataItem, System.DateOnly?> nullableDateOnlyColumn)
                {
                    <DateTimeInput TValue="System.DateOnly?"
                                   Value="@nullableDateOnlyColumn.GetCellValue(Item)"
                                   ValueChanged="@(v => nullableDateOnlyColumn.SetCellValue(Item, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   Validation="@((v, _) => nullableDateOnlyColumn.Validate(v, Item))"
                                   Class="dense" />
                }
                else if (column is Column<TDataItem, System.TimeOnly> timeOnlyColumn)
                {
                    <DateTimeInput TValue="System.TimeOnly"
                                   Value="@timeOnlyColumn.GetCellValue(Item)"
                                   ValueChanged="@(v => timeOnlyColumn.SetCellValue(Item, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   Validation="@((v, _) => timeOnlyColumn.Validate(v, Item))"
                                   Class="dense" />
                }
                else if (column is Column<TDataItem, System.TimeOnly?> nullableTimeOnlyColumn)
                {
                    <DateTimeInput TValue="System.TimeOnly?"
                                   Value="@nullableTimeOnlyColumn.GetCellValue(Item)"
                                   ValueChanged="@(v => nullableTimeOnlyColumn.SetCellValue(Item, v))"
                                   Format="@column.Format"
                                   FormatProvider="column.FormatProvider"
                                   Validation="@((v, _) => nullableTimeOnlyColumn.Validate(v, Item))"
                                   Class="dense" />
                }
                else if (column is Column<TDataItem, System.Drawing.Color> colorColumn)
                {
                    <ColorInput TValue="System.Drawing.Color"
                                Value="@colorColumn.GetCellValue(Item)"
                                ValueChanged="@(v => colorColumn.SetCellValue(Item, v))"
                                ColorMode="ColorMode.RGB"
                                Format="@column.Format"
                                FormatProvider="column.FormatProvider"
                                Validation="@((v, _) => colorColumn.Validate(v, Item))"
                                Class="dense" />
                }
                else if (column is Column<TDataItem, System.Drawing.Color?> nullableColorColumn)
                {
                    <ColorInput TValue="System.Drawing.Color?"
                                Value="@nullableColorColumn.GetCellValue(Item)"
                                ValueChanged="@(v => nullableColorColumn.SetCellValue(Item, v))"
                                ColorMode="ColorMode.RGB"
                                Format="@column.Format"
                                FormatProvider="column.FormatProvider"
                                Validation="@((v, _) => nullableColorColumn.Validate(v, Item))"
                                Class="dense" />
                }
                else if (column.ChildContent is null)
                {
                    @column.ToString(Item)
                }
                else
                {
                    @column.ChildContent(Item)
                }
            }
            else if (column.ChildContent is null)
            {
                if (column.IsBool)
                {
                    if (column.IsNullable
                        || column.IsTrue(Item))
                    {
                        @column.GetBoolIcon(Item)
                    }
                }
                else
                {
                    @column.ToString(Item)
                }
            }
            else
            {
                @column.ChildContent(Item)
            }
        </td>
    }
</tr>
@if (DataGrid.ExpandedContent is not null && IsExpanded)
{
    <tr>
        <td colspan="1000">
            <div class="d-flex flex-column">
                <div style="display:flex;height:.25rem;overflow:hidden;width:100%">
                    @if (IsLoading && DataGrid.GetRowWasExpanded(Item))
                    {
                        <tf-progress-linear class="@LoadingClass"></tf-progress-linear>
                    }
                </div>
                <div class="flex-grow-1 w-100">
                    @if (IsLoading && !DataGrid.GetRowWasExpanded(Item))
                    {
                        <tf-progress-circle class="@ThemeColor.ToCSS()"></tf-progress-circle>
                    }
                    else
                    {
                        @DataGrid.ExpandedContent(Item)
                    }
                </div>
            </div>
        </td>
    </tr>
}
