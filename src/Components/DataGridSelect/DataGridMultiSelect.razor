@using Tavenem.Blazor.Framework.Components.DataGrid

@namespace Tavenem.Blazor.Framework

@attribute [CascadingTypeParameter(nameof(TDataItem))]
@typeparam TDataItem
@typeparam TValue

@inherits DataGridSelectBase<TDataItem, IEnumerable<TValue>, TValue>

<tf-select @attributes="AdditionalAttributes"
           id="@ContainerId"
           class="@CssClass"
           data-popover-container
           disabled="@Disabled"
           multiple
           readonly="@ReadOnly"
           style="@CssStyle"
           tabindex="-1"
           value="@CurrentValueAsString"
           @valuechange="OnPickerValueChangeAsync">
    <tf-input @ref="ElementReference"
              @attributes="InputAttributes"
              id="@InputId"
              autofocus="@AutoFocus"
              class="@OuterInputCssClass"
              data-input-class="@InputCssClass"
              data-input-id="@Id"
              data-input-style="@InputCssStyle"
              disabled="@Disabled"
              name="@NameValue"
              placeholder="@Placeholder"
              readonly
              required="@Required"
              size="1"
              tabindex="@TabIndex">
        <svg class="svg-icon expand" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"/></svg>
    </tf-input>
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    @if (!string.IsNullOrEmpty(HelpText)
        || IsInvalidAndTouched)
    {
        <div class="field-helpers">
            @if (IsInvalidAndTouched)
            {
                <ul class="mr-auto mb-0 pl-0">
                    @foreach (var message in GetValidationMessages())
                    {
                        <li>@message</li>
                    }
                </ul>
            }
            else if (!string.IsNullOrEmpty(HelpText))
            {
                <div class="mr-auto">@HelpText</div>
            }
        </div>
    }
    <Popover Class="contained-popover filled"
             AnchorId="@InputId"
             AnchorOrigin="Origin.Bottom_Left"
             PopoverOrigin="Origin.Top_Left"
             MatchWidth="true">
        <CascadingValue Value="this" TValue="IDataGridSelect<TDataItem>" IsFixed="true">
            @ChildContent
            <DataGrid @ref="DataGrid"
                      TDataItem="TDataItem"
                      AllowExport="false"
                      Items="Items"
                      LoadItems="LoadItems"
                      RowsPerPage="5"
                      SelectionType="SelectionType.Multiple"
                      SelectedItemsChanged="UpdateCurrentValue"
                      ShowRowsPerPage="false"
                      ThemeColor="ThemeColor"
                      MaxHeight="90vh" />
        </CascadingValue>
    </Popover>
</tf-select>
