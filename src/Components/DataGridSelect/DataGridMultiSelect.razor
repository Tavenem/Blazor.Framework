@using Tavenem.Blazor.Framework.Components.DataGrid

@namespace Tavenem.Blazor.Framework

@attribute [CascadingTypeParameter(nameof(TDataItem))]
@typeparam TDataItem
@typeparam TValue

@inherits DataGridSelectBase<TDataItem, IEnumerable<TValue>, TValue>

<tf-select @ref="ElementReference"
           @attributes="AdditionalAttributes"
           id="@Id"
           autofocus="@AutoFocus"
           class="@CssClass"
           data-input-class="@InputCssClass"
           data-input-readonly
           data-input-style="@InputCssStyle"
           data-label="@Label"
           disabled="@Disabled"
           multiple
           name="@NameValue"
           placeholder="@Placeholder"
           readonly="@ReadOnly"
           required="@Required"
           style="@CssStyle"
           tabindex="@TabIndex"
           value="@CurrentValueAsString"
           @valuechange="OnPickerValueChangeAsync">
    @if (IsInvalidAndTouched)
    {
        <ul slot="helpers" class="mr-auto mb-0 pl-0">
            @foreach (var message in GetValidationMessages())
            {
                <li>@message</li>
            }
        </ul>
    }
    else if (!string.IsNullOrEmpty(HelpText))
    {
        <div slot="helpers" class="mr-auto">@HelpText</div>
    }
    <div style="display:content" slot="popover">
        <CascadingValue Value="this" TValue="IDataGridSelect<TDataItem>" IsFixed="true">
            @ChildContent
            <DataGrid @ref="DataGrid"
                      TDataItem="TDataItem"
                      AllowExport="false"
                      Items="Items"
                      LoadItems="LoadItems"
                      RowsPerPage="@RowsPerPage"
                      SelectionType="SelectionType.Multiple"
                      SelectedItemsChanged="UpdateCurrentValue"
                      ShowRowsPerPage="false"
                      ThemeColor="ThemeColor"
                      MaxHeight="min(332px,90vh)" />
        </CascadingValue>
    </div>
</tf-select>
