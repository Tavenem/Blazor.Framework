@namespace Tavenem.Blazor.Framework

@inherits PersistentComponentBase

<div @attributes="AdditionalAttributes" id="@Id" class="@CssClass" style="@CssStyle">
    <ol class="step-list">
        @foreach (var step in VisibleSteps)
        {
            <li class="step-selector">
                <span class="step-separator step-separator-begin"></span>
                @if (PersistState && !IsInteractive)
                {
                    <a href="@GetStepUrl(step)" class="@GetStepActivatorCssClass(step)">
                        <span class="step-number"></span>
                        @if (!string.IsNullOrEmpty(step.Title))
                        {
                            <span style="margin-inline-start:.5rem">@step.Title</span>
                        }
                    </a>
                }
                else if (IsInteractive)
                {
                    <span class="@GetStepActivatorCssClass(step)" @onclick="@(_ => OnActivateStepAsync(step))">
                        <span class="step-number"></span>
                        @if (!string.IsNullOrEmpty(step.Title))
                        {
                            <span style="margin-inline-start:.5rem">@step.Title</span>
                        }
                    </span>
                }
                <span class="step-separator step-separator-end"></span>
            </li>
        }
    </ol>
    <Form AutoValidate="AutoValidate"
          EditContext="EditContext"
          FieldChanged="FieldChanged"
          Model="Model"
          Validation="Validation!"
          ValidationRequested="ValidationRequested"
          ValidationStateChanged="OnValidationStateChanged"
          Class="d-flex flex-column align-self-stretch mb-3 flex-grow-1">
        @for (var i = 0; i < _steps.Count; i++)
        {
            var index = i;
            <div class="@GetStepCssClass(index)">
                @_steps[index].ChildContent
            </div>
        }
    </Form>
    @if (!HideButtons)
    {
        <div class="d-flex">
            @if (IsPreviousButtonVisible)
            {
                @if (PersistState && !IsInteractive)
                {
                    <a href="@GetPreviousStepUrl()" class="@PreviousButtonCssClass">
                        <svg class="svg-icon me-2" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000"><path d="M0 0h24v24H0z" fill="none"/><path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/></svg>
                        <span>Back</span>
                    </a>
                }
                else if (IsInteractive && !IsPreviousButtonDisabled)
                {
                    <button @onclick="OnPreviousAsync" class="@PreviousButtonCssClass">
                        <svg class="svg-icon me-2" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000"><path d="M0 0h24v24H0z" fill="none"/><path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/></svg>
                        <span>Back</span>
                    </button>
                }
                else
                {
                    <button class="@PreviousButtonCssClass" disabled>
                        <svg class="svg-icon me-2" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#000000"><path d="M0 0h24v24H0z" fill="none"/><path d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/></svg>
                        <span>Back</span>
                    </button>
                }
            }
            @if (IsFinishButtonVisible)
            {
                <button @onclick="OnFinishAsync" class="@FinishButtonCssClass" disabled="@IsFinishButtonDisabled">@FinishButtonText</button>
            }
            else if (IsNextButtonVisible)
            {
                @if (PersistState && !IsInteractive)
                {
                    <a href="@GetNextStepUrl()" class="@NextButtonCssClass">
                        <span>Next</span>
                        <svg class="svg-icon ms-2" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/></svg>
                    </a>
                }
                else if (IsInteractive && !IsNextButtonDisabled)
                {
                    <button @onclick="OnNextAsync" class="@NextButtonCssClass">
                        <span>Next</span>
                        <svg class="svg-icon ms-2" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/></svg>
                    </button>
                }
                else
                {
                    <button class="@NextButtonCssClass" disabled>
                        <span>Next</span>
                        <svg class="svg-icon ms-2" xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px"><path d="M0 0h24v24H0z" fill="none"/><path d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/></svg>
                    </button>
                }
            }
        </div>
    }
</div>
<CascadingValue Value="this">
    @ChildContent
</CascadingValue>
