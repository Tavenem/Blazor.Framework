@namespace Tavenem.Blazor.Framework.InternalComponents

@typeparam TListItem

@inherits DraggableDropTarget<TListItem, TListItem>

@if (SeparatorBeforeValue)
{
    <hr />
}
@if (IsCollapsibleValue)
{
    <CascadingValue Value="this">
        <ListItemCollapse @ref="CollapseReference"
                          TListItem="TListItem"
                          Id="@Id"
                          Class="@CollapseClass"
                          Disabled="Disabled"
                          Style="@Style"
                          ThemeColor="ThemeColor"
                          Title="@(ChildContent is null ? Item?.ToString() : null)">
            <TitleContent>@ChildContent</TitleContent>
            <ChildContent>
                @if (Item is not null)
                {
                    if (ElementList?.CollapsibleTemplateValue is null)
                    {
                        <span>@(Item?.ToString())</span>
                    }
                    else
                    {
                        @ElementList.CollapsibleTemplateValue(Item)
                    }
                }
            </ChildContent>
        </ListItemCollapse>
    </CascadingValue>
}
else
{
    <div @ref="ElementReference"
         @attributes="AdditionalAttributes"
         id="@Id"
         role="listitem"
         class="@CssClass"
         style="@CssStyle"
         draggable="@(GetIsDraggable() ? "true" : "false")"
         @onclick="OnClickAsync"
         @onclick:stopPropagation="true">
        @if (HasValidDrop)
        {
            <div class="@ElementList?.DropPlaceholderClass"></div>
        }
        @if (!string.IsNullOrWhiteSpace(IconName))
        {
            <tf-icon @onclick="OnClickIconAsync"
                     @onclick:stopPropagation="true"
                     class="@IconClassName">@IconName</tf-icon>
        }
        else if (ElementList is not null
            && ElementList.SelectionType != SelectionType.None
            && ElementList.ShowSelectionIconValue)
        {
            <div class="list-icon-spacer"></div>
        }
        @if (ChildContent is null)
        {
            <span>@(Item?.ToString())</span>
        }
        else
        {
            @ChildContent
        }
    </div>
}
@if (SeparatorAfterValue)
{
    <hr />
}
