@namespace Tavenem.Blazor.Framework

@inherits FormComponentBase<string>

<tf-editor @ref="ElementReference"
           @attributes="AdditionalAttributes"
           id="@Id"
           class="@CssClass"
           data-label="@Label"
           data-lock-mode="@LockEditMode"
           data-lock-syntax="@LockSyntax"
           data-syntax="@Syntax.ToCSS()"
           data-update-on-input="@UpdateOnInput"
           disabled="@Disabled"
           name="@NameValue"
           height="@Height"
           max-height="@MaxHeight"
           placeholder="@Placeholder"
           readonly="@ReadOnly"
           required="@Required"
           spellcheck="@SpellcheckValue"
           style="@CssStyle"
           tabindex="@TabIndex"
           value="@Value"
           wysiwyg="@(EditorMode == EditorMode.WYSIWYG)"
           @onvalueinput="OnInput"
           @onvaluechange="OnChange">
    @ChildContent
    @if (CustomToolbarButtons is not null && IsInteractive)
    {
        foreach (var customButton in CustomToolbarButtons)
        {
            var buttonClass = string.IsNullOrEmpty(customButton.Text)
                ? "btn btn-icon rounded small custom-editor-button"
                : "btn btn-text rounded small custom-editor-button";
            <button id="@customButton.Id"
                    class="@buttonClass"
                    data-mode="@customButton.EditMode"
                    slot="buttons"
                    @onclick="@(_ => OnCustomButtonAsync(customButton))">
                @if (!string.IsNullOrEmpty(customButton.Icon))
                {
                    <tf-icon>@customButton.Icon</tf-icon>
                }
                @if (!string.IsNullOrEmpty(customButton.Text))
                {
                    var spanClass = string.IsNullOrEmpty(customButton.Icon)
                        ? null
                        : "ms-1";
                    <span class="@spanClass">@customButton.Text</span>
                }
                @if (!string.IsNullOrEmpty(customButton.Tooltip))
                {
                    <Tooltip>@customButton.Tooltip</Tooltip>
                }
            </button>
        }
    }
    @if (!ReadOnly && IsInvalidAndTouched)
    {
        <ul slot="helpers" class="mr-auto mb-0 pl-0">
            @foreach (var message in GetValidationMessages())
            {
                <li>@message</li>
            }
        </ul>
    }
</tf-editor>
