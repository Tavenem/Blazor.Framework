@namespace Tavenem.Blazor.Framework

@attribute [CascadingTypeParameter(nameof(TValue))]
@typeparam TValue

@inherits FormComponentBase<TValue>

<fieldset @ref="FieldSet"
          @attributes="AdditionalAttributes"
          class="@CssClass"
          style="@CssStyle"
          aria-required="@Required"
          tabindex="@(Disabled ? -1 : TabIndex)">
    <div class="content">
        @if (!string.IsNullOrEmpty(Label))
        {
            <legend>@Label</legend>
        }
        <div class="options">
            <CascadingValue Value="this" IsFixed="true">
                <CascadingValue Value="_context">
                    @ChildContent
                    @if (Values?.Count > 0)
                    {
                        if (LabelTemplate is null)
                        {
                            <RadioButton @ref="FirstButton"
                                         @key="Values[0]"
                                         TValue="TValue"
                                         Id="@Id"
                                         Value="Values[0]"
                                         Label="@Values[0]?.ToString()"
                                         AdditionalAttributes="InputAttributes"
                                         AutoFocus="AutoFocus"
                                         CheckedIcon="@CheckedIcon"
                                         IsCheckedIconOutlined="IsCheckedIconOutlined"
                                         UncheckedIcon="@UncheckedIcon"
                                         IsUncheckedIconOutlined="IsCheckedIconOutlined" />
                            for (var i = 1; i < Values.Count; i++)
                            {
                                var index = i;
                                <RadioButton @key="Values[index]"
                                             TValue="TValue"
                                             Value="Values[index]"
                                             Label="@Values[index]?.ToString()"
                                             AdditionalAttributes="InputAttributes"
                                             CheckedIcon="@CheckedIcon"
                                             IsCheckedIconOutlined="IsCheckedIconOutlined"
                                             UncheckedIcon="@UncheckedIcon"
                                             IsUncheckedIconOutlined="IsCheckedIconOutlined" />
                            }
                        }
                        else
                        {
                            <RadioButton @ref="FirstButton"
                                         @key="Values[0]"
                                         TValue="TValue"
                                         Id="@Id"
                                         Value="Values[0]"
                                         Label="@Values[0]?.ToString()"
                                         AdditionalAttributes="InputAttributes"
                                         AutoFocus="AutoFocus"
                                         CheckedIcon="@CheckedIcon"
                                         IsCheckedIconOutlined="IsCheckedIconOutlined"
                                         UncheckedIcon="@UncheckedIcon"
                                         IsUncheckedIconOutlined="IsCheckedIconOutlined">
                                <LabelContent>
                                    @LabelTemplate(context)
                                </LabelContent>
                            </RadioButton>
                            for (var i = 1; i < Values.Count; i++)
                            {
                                var index = i;
                                <RadioButton @key="Values[index]"
                                             TValue="TValue"
                                             Value="Values[index]"
                                             Label="@Values[index]?.ToString()"
                                             AdditionalAttributes="InputAttributes"
                                             CheckedIcon="@CheckedIcon"
                                             IsCheckedIconOutlined="IsCheckedIconOutlined"
                                             UncheckedIcon="@UncheckedIcon"
                                             IsUncheckedIconOutlined="IsCheckedIconOutlined">
                                    <LabelContent>
                                        @LabelTemplate(context)
                                    </LabelContent>
                                </RadioButton>
                            }
                        }
                    }
                    @if (ValuePairs is not null)
                    {
                        var startIndex = Values is null || Values.Count == 0 ? 1 : 0;
                        @if (Values is null || Values.Count == 0)
                        {
                            <RadioButton @ref="FirstButton"
                                         @key="ValuePairs[0].Key"
                                         TValue="TValue"
                                         Id="@Id"
                                         Value="ValuePairs[0].Key"
                                         Label="@ValuePairs[0].Value"
                                         AdditionalAttributes="InputAttributes"
                                         AutoFocus="AutoFocus"
                                         CheckedIcon="@CheckedIcon"
                                         IsCheckedIconOutlined="IsCheckedIconOutlined"
                                         UncheckedIcon="@UncheckedIcon"
                                         IsUncheckedIconOutlined="IsCheckedIconOutlined" />
                        }
                        for (var i = startIndex; i < ValuePairs.Count; i++)
                        {
                            var index = i;
                            <RadioButton @key="ValuePairs[index].Key"
                                         TValue="TValue"
                                         Value="ValuePairs[index].Key"
                                         Label="@ValuePairs[index].Value"
                                         AdditionalAttributes="InputAttributes"
                                         CheckedIcon="@CheckedIcon"
                                         IsCheckedIconOutlined="IsCheckedIconOutlined"
                                         UncheckedIcon="@UncheckedIcon"
                                         IsUncheckedIconOutlined="IsCheckedIconOutlined" />
                        }
                    }
                </CascadingValue>
            </CascadingValue>
        </div>
    </div>
    @if (IsInvalidAndTouched)
    {
        <div class="field-helpers">
            <ul class="mr-auto mb-0 pl-0">
                @foreach (var message in GetValidationMessages())
                {
                    <li>@message</li>
                }
            </ul>
        </div>
    }
</fieldset>


