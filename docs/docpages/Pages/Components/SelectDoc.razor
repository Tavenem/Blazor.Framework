@page "/components/select"

<PageTitle>Select - Tavenem Blazor Framework</PageTitle>

<h1>Select</h1>

<p>
    The <code>Select</code> components are rich wrappers for select elements.
</p>

<p>
    Note: like all Tavenem Framework picker components, this control cannot be used on static
    server-side rendered pages. It will always be disabled when rendered statically. This is because
    it relies on interactivity to operate. When <em>pre</em>rendered server-side, it will be
    disabled during the prerender pass, then become enabled when interactivity becomes available.
</p>

<h2>Basics</h2>

<p>
    Selects come in three styles. The default uses a simple underline. Add the <code>filled</code>
    class to give it a shaded background. Add the <code>outlined</code> class to use a full outline.
</p>

<Collapse Id="ce-1" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <Select Options="_options" Label="Normal" />
            <Select Options="_options" Label="Filled" Class="filled" />
            <Select Options="_options" Label="Outlined" Class="outlined" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Normal"" />
    <Select Options=""_options"" Label=""Filled"" Class=""filled"" />
    <Select Options=""_options"" Label=""Outlined"" Class=""outlined"" />
</div>

@code {
    private string[] _options = new[] { ""Option 1"", ""Option 2"", ""Option 3"" };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>Value</code> property can be bound to any data type. Most native data types are
    supported by default, but custom data types may require a converter. This can take the form of a
    <code>TypeConverter</code> attribute directly on the data type to support conversion to and from
    a <code>string</code> directly, or a special converter class assigned to the
    <code>Converter</code> property of the select component which can perform bespoke conversions
    for that particular component.
</p>

<Collapse Id="ce-2" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <Select Options="_options" @bind-Value="_value" Label="Bound" Class="w-100" />
            <span>Bound value: @_value</span>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" @bind-Value=""_value"" Label=""Bound"" Class=""w-100"" />
    <span>Bound value: @_value</span>
</div>

@code {
    private string[] _options = new[] { ""Option 1"", ""Option 2"", ""Option 3"" };
    private string? _value = ""Option 1"";
}")
    </ChildContent>
</Collapse>

<h2>Options</h2>

<p>
    The list of options for the select can be assigned in up to three ways.
</p>

<h3>Manual</h3>

<p>
    You can add <code>Option</code> components within the select. Each should have a
    <code>Value</code> and either a <code>Label</code> or a <code>ChildContent RenderFragment</code>
    (which receives the current value as a context parameter) to set the displayed content.
</p>

<Collapse Id="ce-3" IsInitiallyOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Select TValue="int">
                <Option Value="1" Label="Option 1" />
                <Option Value="2" Label="Option 2" />
                <Option Value="3" Label="Option 3">
                    Option <strong>3</strong>
                </Option>
            </Select>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Select TValue=""int"">
    <Option Value=""1"" Label=""Option 1"" />
    <Option Value=""2"" Label=""Option 2"" />
    <Option Value=""3"" Label=""Option 3"">
        Option <strong>3</strong>
    </Option>
</Select>")
    </ChildContent>
</Collapse>

<p>
    Note: even when using <code>ChildContent</code> to define the label for the option list, you
    should still supply a simple <code>Label</code> string, since that will be displayed in the
    select control when the option is selected. If a label is omitted, <code>ToString</code> will be
    called on the value to populate the select.
</p>

<p>
    You can add a separator before or after a manual option by setting its
    <code>SeparatorBefore</code> or <code>SeparatorAfter</code> properties to <code>true</code>.
</p>

<p>
    You can disable a manual option with its <code>Disabled</code> property.
</p>

<Collapse Id="ce-4" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Select TValue="int">
                <Option Value="1" Label="Option 1" SeparatorAfter="true" />
                <Option Value="2" Label="Option 2" />
                <Option Value="3" Label="Option 3" Disabled="true" />
            </Select>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Select TValue=""int"">
    <Option Value=""1"" Label=""Option 1"" SeparatorAfter=""true"" />
    <Option Value=""2"" Label=""Option 2"" />
    <Option Value=""3"" Label=""Option 3"" Disabled=""true"" />
</Select>")
    </ChildContent>
</Collapse>

<h3>Options property</h3>

<p>
    You can also assign an enumertaion of values to the <code>Options</code> property. You should
    also supply a function for the <code>Labels</code> property, which will retrieve a label for
    each option based on its value. If no <code>Labels</code> function is provided,
    <code>ToString</code> will be called on the values. If you provide a <code>RenderFragment</code>
    for the <code>OptionTemplate</code> property, it will be used instead of <code>Labels</code> to
    render the values in the option list.
</p>

<Collapse Id="ce-5" IsInitiallyOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Select Options="_options1" Labels="@(x => $"Option {x}")">
                <OptionTemplate>
                    Option @context
                </OptionTemplate>
            </Select>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Select Options=""_options"" Labels=""@(x => $""Option {x}"")"">
    <OptionTemplate>
        Option @context
    </OptionTemplate>
</Select>

@code {
    private int[] _options = Enumerable.Range(1, 25).ToArray();
}")
    </ChildContent>
</Collapse>

<h3>OptionPairs property</h3>

<p>
    Finally, you can assign an enumertaion of <code>KeyValuePair&lt;TOption, string></code> to the
    <code>OptionPairs</code> property. The <code>Key</code> of each item should contain the value of
    each option, and the <code>Value</code> should contain its label.
</p>

<Collapse Id="ce-6" IsInitiallyOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Select OptionPairs="_options2" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Select OptionPairs=""_options"" />

@code {
    private List<KeyValuePair<int, string>> _options = new() { new(1, ""Option 1""), new(2, ""Option 2""), new(3, ""Option 3"") };
}")
    </ChildContent>
</Collapse>

<p>
    Note that all three potential option sources work together. You can have manual
    <code>Option</code> components, <code>Options</code>, <em>and</em> <code>OptionPairs</code> if
    you wish. The dropdown will show all the results in a combined list (in that order).
</p>

<h3>DataGrid</h3>

<p>
    A select can also contain a <a href="./components/datagrid">DataGrid</a>, replacing the
    individual options with a full grid of rows and columns. For this, use the
    <code>DataGridSelect</code> component.
</p>

<p>
    Either the <code>Items</code> or <code>LoadItems</code> property should be set. These are passed
    on to the internal <code>DataGrid</code>, and mirror the properties of the same names on that
    component. See the <a href="./components/datagrid">DataGrid documentation</a> for details.
</p>

<p>
    You should also set the <code>ItemLabel</code> property to a function which returns an
    appropriate display string for a given item. This is used to populate the select input with the
    selected value.
</p>

<p>
    You can place <code>Column</code> definitions directly inside the <code>DataGridSelect</code>
    component. They will be passed down to the internal <code>DataGrid</code>.
</p>

<p>
    The bound value is defined by the <code>RowValue</code> property, which should be a function
    that selects a value from a data item (row).
</p>

<Collapse Id="ce-7" IsInitiallyOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGridSelect Items="_items" ItemLabel="@(x => $"{x.LastName}, {x.FirstName}")" RowValue="@(x => x)">
                <Column Label="First" Value="@(x => x.FirstName)" IsQuickFilter="true" />
                <Column Label="Last" Value="@(x => x.LastName)" IsQuickFilter="true" />
                <Column Label="Exec?" Value="@(x => x.IsExecutive)" CanSort="false" />
                <Column Label="Hire date" Value="@(x => x.HireDate)" Format="d" CanFilter="false" IsShown="false" />
            </DataGridSelect>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGridSelect Items=""_items"" ItemLabel=""@(x => $""{x.LastName}, {x.FirstName}"")"" RowValue=""@(x => x)"">
    <Column Label=""First"" Value=""@(x => x.FirstName)"" IsQuickFilter=""true"" />
    <Column Label=""Last"" Value=""@(x => x.LastName)"" IsQuickFilter=""true"" />
    <Column Label=""Exec?"" Value=""@(x => x.IsExecutive)"" CanSort=""false"" />
    <Column Label=""Hire date"" Value=""@(x => x.HireDate)"" Format=""d"" CanFilter=""false"" IsShown=""false"" />
</DataGridSelect>

@code {
    private class DataItem
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public bool IsExecutive { get; set; }
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<h2>Multiselect</h2>

<p>
    To permit multiple selections, use the <code>MultiSelect</code> component, and bind
    <code>Value</code> to any enumerable type.
</p>

<p>
    Multiselects automatically include a special option, placed at the beginning of the list, which
    selects all other available options.
</p>

<Collapse Id="ce-8" IsInitiallyOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <MultiSelect Options="_options1" Labels="@(x => $"Option {x}")">
                <OptionTemplate>
                    Option @context
                </OptionTemplate>
            </MultiSelect>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<MultiSelect Options=""_options"" Labels=""@(x => $""Option {x}"")"">
    <OptionTemplate>
        Option @context
    </OptionTemplate>
</MultiSelect>

@code {
    private int[] _options = Enumerable.Range(1, 25).ToArray();
}")
    </ChildContent>
</Collapse>

<p>
    You can use the <code>DataGridMultiSelect</code> component for multiple selection with a nested
    <code>DataGrid</code>.
</p>

<Collapse Id="ce-9" IsInitiallyOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGridMultiSelect Items="_items" ItemLabel="@(x => $"{x.LastName}, {x.FirstName}")" RowValue="@(x => x)">
                <Column Label="First" Value="@(x => x.FirstName)" IsQuickFilter="true" />
                <Column Label="Last" Value="@(x => x.LastName)" IsQuickFilter="true" />
                <Column Label="Exec?" Value="@(x => x.IsExecutive)" CanSort="false" />
                <Column Label="Hire date" Value="@(x => x.HireDate)" Format="d" CanFilter="false" IsShown="false" />
            </DataGridMultiSelect>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGridSelect Items=""_items"" ItemLabel=""@(x => $""{x.LastName}, {x.FirstName}"")"" RowValue=""@(x => x)"">
    <Column Label=""First"" Value=""@(x => x.FirstName)"" IsQuickFilter=""true"" />
    <Column Label=""Last"" Value=""@(x => x.LastName)"" IsQuickFilter=""true"" />
    <Column Label=""Exec?"" Value=""@(x => x.IsExecutive)"" CanSort=""false"" />
    <Column Label=""Hire date"" Value=""@(x => x.HireDate)"" Format=""d"" CanFilter=""false"" IsShown=""false"" />
</DataGridSelect>

@code {
    private class DataItem
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public bool IsExecutive { get; set; }
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<h2>Disabled & read-only</h2>

<p>
    The select can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Id="ce-10" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Select OptionPairs="_options2" @bind-Value="_disabled" Label="Disabled" Disabled="true" />
                <Select OptionPairs="_options2" @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="filled" />
                <Select OptionPairs="_options2" @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="outlined" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <Select OptionPairs="_options2" @bind-Value="_disabled" Label="Read-only" ReadOnly="true" />
                <Select OptionPairs="_options2" @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="filled" />
                <Select OptionPairs="_options2" @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select OptionPairs=""_options"" @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" />
    <Select OptionPairs=""_options"" @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""filled"" />
    <Select OptionPairs=""_options"" @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""outlined"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <Select OptionPairs=""_options"" @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" />
    <Select OptionPairs=""_options"" @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""filled"" />
    <Select OptionPairs=""_options"" @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""outlined"" />
</div>

@code {
    private int _disabled = 2;
    private List<KeyValuePair<int, string>> _options = new() { new(1, ""Option 1""), new(2, ""Option 2""), new(3, ""Option 3"") };
}")
    </ChildContent>
</Collapse>

<h2>Label</h2>

<p>
    The <code>Label</code> property assigns a label to the input. The label will appear within the
    input like a placeholder when it is empty, and has no explicit placeholder.
</p>

<Collapse Id="ce-11" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <Select Options="_options" Label="Label" />
            <Select Options="_options" Label="Label" Placeholder="Placeholder" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Label"" />
    <Select Options=""_options"" Label=""Label"" Placeholder=""Placeholder"" />
</div>")
    </ChildContent>
</Collapse>

<h2>Placeholder</h2>

<p>
    The <code>Placeholder</code> property assigns a placeholder to the select.
</p>

<Collapse Id="ce-12" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <Select Options="_options" Label="Normal" Placeholder="Placeholder" />
            <Select Options="_options" Label="Filled" Placeholder="Placeholder" Class="filled" />
            <Select Options="_options" Label="Outlined" Placeholder="Placeholder" Class="outlined" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Normal"" Placeholder=""Placeholder"" />
    <Select Options=""_options"" Label=""Filled"" Placeholder=""Placeholder"" Class=""filled"" />
    <Select Options=""_options"" Label=""Outlined"" Placeholder=""Placeholder"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<h2>Help text</h2>

<p>
    You can supply help text for the field with the <code>HelpText</code> property.
</p>

<Collapse Id="ce-13" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <Select Options="_options" Label="Normal" HelpText="Some help text" />
            <Select Options="_options" Label="Filled" HelpText="Some help text" Class="filled" />
            <Select Options="_options" Label="Outlined" HelpText="Some help text" Class="outlined" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Normal"" HelpText=""Some help text"" />
    <Select Options=""_options"" Label=""Filled"" HelpText=""Some help text"" Class=""filled"" />
    <Select Options=""_options"" Label=""Outlined"" HelpText=""Some help text"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that help text is replaced by any field validation errors.
</p>

<h2>Required</h2>

<p>
    Set the <code>Required</code> property to specify whether the field is required. This adds an
    indicator to the label, and automatic verification rules which warn the user when the select is
    empty. The warning will only appear after the user has interacted with the select for the first
    time.
</p>

<Collapse Id="ce-14" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <Select Options="_options" Label="Required" Required="true" />
            <Select Options="_options" Label="Required" Required="true" Class="filled" />
            <Select Options="_options" Label="Required" Required="true" Class="outlined" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Required"" Required=""true"" />
    <Select Options=""_options"" Label=""Required"" Required=""true"" Class=""filled"" />
    <Select Options=""_options"" Label=""Required"" Required=""true"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<h2>Tab index</h2>

<p>
    Set the <code>TabIndex</code> property to specify the value of the select's <code>tabindex</code>
    attribute.
</p>

<h2>Clear button</h2>

<p>
    If your bound data type is a reference type, or a nullable value type, the select will have a
    button that allows the user to clear the selected value. The button will only appear when there
    is currently a selected value, and it is not disabled, read-only, or required.
</p>

<h2>Name</h2>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<h2>Auto-focus</h2>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<h2>Methods</h2>

<p>
    The <code>Clear</code> method will clear the current selection.
</p>

<p>
    The <code>FocusAsync</code> method will give the select focus.
</p>

<h2>Customization</h2>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Id="ce-15" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Select Options="_options" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" />
                <Select Options="_options" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="filled" />
                <Select Options="_options" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <Select Options="_options" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" />
                <Select Options="_options" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="filled" />
                <Select Options="_options" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <Select Options="_options" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" />
                <Select Options="_options" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="filled" />
                <Select Options="_options" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" />
    <Select Options=""_options"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""filled"" />
    <Select Options=""_options"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" />
    <Select Options=""_options"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""filled"" />
    <Select Options=""_options"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" />
    <Select Options=""_options"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""filled"" />
    <Select Options=""_options"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can add the <code>dense</code> class to any variant to reduce the margins and padding.
</p>

<Collapse Id="ce-16" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <Select Options="_options" Label="Normal" Class="dense" />
            <Select Options="_options" Label="Filled" Class="filled dense" />
            <Select Options="_options" Label="Outlined" Class="outlined dense" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Select Options=""_options"" Label=""Normal"" Class=""dense"" />
    <Select Options=""_options"" Label=""Filled"" Class=""filled dense"" />
    <Select Options=""_options"" Label=""Outlined"" Class=""outlined dense"" />
</div>

@code {
    private string[] _options = new[] { ""Option 1"", ""Option 2"", ""Option 3"" };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the select itself, while the <code>InputAttributes</code> property can be used
    to assign arbitrary attributes to it.
</p>

<h2>Validation</h2>

<p>
    See <a href="./components/form#validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private class DataItem
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public bool IsExecutive { get; set; }
        public DateTime HireDate { get; set; }
    }
    private int _disabled = 2;
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = "James", LastName = "Smith", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = "Mary", LastName = "Johnson", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = "Robert", LastName = "Williams", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = "Patricia", LastName = "Brown", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = "John", LastName = "Jones", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = "Jennifer", LastName = "Garcia", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = "Michael", LastName = "Miller", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
    private string[] _options = new[] { "Option 1", "Option 2", "Option 3" };
    private int[] _options1 = Enumerable.Range(1, 25).ToArray();
    private List<KeyValuePair<int, string>> _options2 = new() { new(1, "Option 1"), new(2, "Option 2"), new(3, "Option 3") };
    private string? _value = "Option 1";
    private Func<DataGridRequest, Task<DataPage<DataItem>>> _loadItems => async request =>
    {
        await Task.Delay(1000);
        return new DataPage<DataItem>(
            _items.Query(request).ToList(),
            (ulong)_items.Count,
            (ulong)_items.Count > request.Offset + request.Count);
    };
}
