@page "/components/datagrid"

<PageTitle>DataGrid - Tavenem Blazor Framework</PageTitle>

<h1>Data Grid</h1>

<p>
    The <code>DataGrid</code> component is a rich table control for displaying item collections in
    rows and columns, with filtering, sorting, grouping, paging, selection, editing, exporting, and
    other data operations built in.
</p>

<h2>Basics</h2>

<p>
    The simplest <code>DataGrid</code> can be built by simply assigning any list of items to the
    <code>Items</code> property.
</p>

<Collapse Id="ce-1" IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-1" Items="_items" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    It's also possible to load items dynamically, by assigning a function to the
    <code>LoadItems</code> property.
</p>

<Collapse Id="ce-2" IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-2" LoadItems="_loadItems" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid LoadItems=""_loadItems"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
    private Func<DataGridRequest, Task<DataPage<DataItem>>> _loadItems => async request =>
    {
        await Task.Delay(1000);
        return new DataPage<DataItem>(
            _items.Query(request).ToList(),
            (ulong)_items.Count,
            (ulong)_items.Count > request.Offset + request.Count);
    };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>LoadItems</code> function receives a <code>DataGridRequest</code> record as a
    parameter. This object contains four properties:
</p>

<dl>
    <dt><code>Count</code></dt>
    <dd>
        <p>The number of items requested.</p>
        <p>
            A value of zero indicates that all data which matches the current filters is expected.
            If that might result in an excessive number of rows, you can set <code>HasMore</code>
            <code>true</code> in the result (the actual results in this case are irrelevant). This
            signals that all rows are not available, and a warning will explain to the user that a
            stricter set of filters should be applied, since there were too many results.
        </p>
    </dd>
    
    <dt><code>Offset</code></dt>
    <dd>The number of items to skip.</dd>
    
    <dt><code>Filters</code></dt>
    <dd>
        A list of <code>FilterInfo</code> objects, with the following properties:

        <dl>
            <dt><code>Property</code></dt>
            <dd>The name of the property by which to filter.</dd>
            
            <dt><code>TextFilter</code></dt>
            <dd>
                <p>A filter to apply to text.</p>
                <p>If <code>null</code> the filter should be ignored.</p>
                <p>An item should be considered a match if it contains the filter text anywhere within it.</p>
                <p>A case-insensitive search is expected.</p>
                <p>Ignoring minor textual differences (such as e.g. accented characters) is preferred.</p>
            </dd>

            <dt><code>ExactMatch</code></dt>
            <dd>
                <p>
                    If <code>true TextFilter</code> should be considered a match only
                    when the entire text of the data matches the filter exactly.
                </p>
                <p>If <code>null</code> the filter should be ignored.</p>
                <p>The search should become case-sensitive, and should not disregard minor textual differences.</p>
            </dd>
            
            <dt><code>QuickFilter</code></dt>
            <dd>
                <p>A filter to apply to text.</p>
                <p>This should be considered a space-delimited set of terms.</p>
                <p>If <code>null</code> the filter should be ignored.</p>
                <p>An item should be considered a match if it contains any of the terms anywhere within it.</p>
                <p>A case-insensitive search is expected.</p>
                <p>Ignoring minor textual differences (such as e.g. accented characters) is preferred.</p>
                <p>
                    Unlike <code>TextFilter</code>, a data item (row) should be considered a match
                    if <em>any</em> property with a quick filter is matched, but only if
                    <em>all</em> quick filter terms are matched by at least one property.
                </p>
            </dd>
            
            <dt><code>BoolFilter</code></dt>
            <dd>
                <p>A filter to apply to boolean data.</p>
                <p>If <code>null</code> the filter should be ignored.</p>
            </dd>
            
            <dt><code>NumberFilter</code></dt>
            <dd>
                <p>A filter to apply to numeric data.</p>
                <p>If <code>null</code> the filter should be ignored.</p>
            </dd>
            
            <dt><code>DateTimeFilter</code></dt>
            <dd>
                <p>A filter to apply to date/time data.</p>
                <p>If <code>null</code> the filter should be ignored.</p>
            </dd>
            
            <dt><code>DateFormat</code></dt>
            <dd>
                <p>The format to use for date/time comparisons.</p>
                <p>
                    Both the source data and the <code>DateTimeFilter</code> should be transformed
                    (when possible) using this format. The data should be considered a match when
                    the representation of each in the given format is a match.
                </p>
            </dd>
        </dl>
    </dd>
    
    <dt><code>Order</code></dt>
    <dd>
        A list of <code>SortInfo</code> objects, with the following properties:

        <dl>
            <dt><code>Property</code></dt>
            <dd>The name of the property by which to sort.</dd>
            
            <dt><code>Descending</code></dt>
            <dd>Whether to sort in descending order.</dd>
        </dl>
    </dd>
</dl>

<p>
    <code>LoadItems</code> expects a <code>Task</code> wrapping a <code>DataPage</code> object as a
    return value. A <code>DataPage</code> has the following properties:
</p>

<dl>
    <dt><code>Items</code></dt>
    <dd>A <code>List</code> containing the returned items.</dd>
    
    <dt><code>TotalCount</code></dt>
    <dd>
        An optional (nullable) property which specifies the total total number of items available
        (i.e. not the count of the items returned for the requested page, but the count of all items
        available which match the given filters). This is used to determine the total number of
        pages available. If not provided, the paging controls use the rules for an indeterminate
        number of pages.
    </dd>
    
    <dt><code>HasMore</code></dt>
    <dd>
        A boolean value indicating whether more items after the current page are available. This
        should be set if <code>TotalCount</code> is not, to enable indeterminate paging. If it is
        left <code>false</code> and <code>TotalCount</code> has no value, it is assumed that the
        returned page is the final page of items.
    </dd>
</dl>

<p>
    A <code>DataGridRequest</code> can be used to filter and sort an <code>IEnumerable&lt;T></code>
    directly (via an extension method), as well as count the total number of matching items.
</p>

<p>
    <code>DataGridRequest</code> also provides methods to transform its properties into a T-SQL
    command with parameters for either retrieving a page of items, or counting the total number of
    matching items. This should <em>only</em> be done on a trusted machine (i.e. server-side).
    Transforming to SQL on an untrusted machine (i.e. client-side) and executing the resulting
    command directly, or passing the transformed strings to a server for execution, exposes your
    data to attack. When transformed on a trusted machine, parameterization and escaping of
    client-supplied values should mitigate the risk of such threats.
</p>

<p>
    The <code>NoDataContent RenderFragment</code> is displayed when a <code>DataGrid</code> contains
    no rows. If omitted, a default is used.
</p>

<h2>Columns</h2>

<p>
    By default the <code>DataGrid</code> uses reflection to find the public, readable properties and
    fields of its item type, and displays each in a column with an appropriate format. Note that
    this will not work if you use AOT compilation.
</p>

<p>
    You can control which properties are included by setting the columns explicitly. This works even
    with AOT compilation.
</p>

<Collapse Id="ce-3" IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-3" Title="Employees" Items="_items">
                <Column Label="Id" Value="@(x => x.Id)" IsShown="false" />
                <Column Label="First" Value="@(x => x.FirstName)" IsQuickFilter="true" />
                <Column Label="Last" Value="@(x => x.LastName)" IsQuickFilter="true" />
                <Column Label="Exec?" Value="@(x => x.IsExecutive)" CanSort="false">
                    @if (context.IsExecutive)
                    {
                        <tf-icon class="success">thumb_up</tf-icon>
                    }
                </Column>
                <Column Label="Hire date" Value="@(x => x.HireDate)" Format="d" CanFilter="false">
                    <FooterContent>
                        <div class="d-flex flex-column">
                            <span>Longest tenure: @(context.Any() ? ((DateTime.Now - context.Min(x => x.HireDate)).Days / 365.25).ToString("F1") : "0") years</span>
                            <span>Average: @(context.Any() ? (new TimeSpan((long)Math.Round(context.Average(x => (DateTime.Now - x.HireDate).Ticks))).Days / 365.25).ToString("F1") : "0") years</span>
                        </div>
                    </FooterContent>
                </Column>
            </DataGrid>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Title=""Employees"" Items=""_items"">
    <Column Label=""Id"" Value=""@(x => x.Id)"" IsShown=""false"" />
    <Column Label=""First"" Value=""@(x => x.FirstName)"" IsQuickFilter=""true"" />
    <Column Label=""Last"" Value=""@(x => x.LastName)"" IsQuickFilter=""true"" />
    <Column Label=""Exec?"" Value=""@(x => x.IsExecutive)"" CanSort=""false"">
        @if (context.IsExecutive)
        {
            <tf-icon class=""success"">thumb_up</tf-icon>
        }
    </Column>
    <Column Label=""Hire date"" Value=""@(x => x.HireDate)"" Format=""d"" CanFilter=""false"">
        <FooterContent>
            <div class=""d-flex flex-column"">
                <span>Longest tenure: @(context.Any() ? ((DateTime.Now - context.Min(x => x.HireDate)).Days / 365.25).ToString(""F1"") : ""0"") years</span>
        <span>Average: @(context.Any() ? (new DateTime(context.Average(x => x.HireDate.Ticks)).Days / 365.25).ToString(""F1"") : ""0"") years</span>
            </div>
        </FooterContent>
    </Column>
</DataGrid>

@code {
    private class DataItem
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public bool IsExecutive { get; set; }
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>Value</code> property of a column specifies the property or field the column displays.
    It can be left unset for columns which display custom content. Normally you will need to set the
    <code>TValue</code> type parameter to <code>object</code> when omitting <code>Value</code>.
</p>

<p>
    The <code>Label</code> property sets the header for the column. If left unset, and if
    <code>Value</code> is a simple field or property accessor, a human-readable form of the property
    or field name is used automatically. The <code>LabelContent</code> property can also be set to a
    <code>RenderFragment</code> to display custom content in the header. This property can be set
    for auto-generated columns with the <code>DataGridColumnAttribute</code>, or the
    <code>ShortName</code> or (if that is <code>null</code>) the <code>Name</code> property of a
    <code>DisplayAttribute</code> applied to the property or field.
</p>

<p>
    The <code>ColumnOrder</code> property sets the display order for the column. If left unset,
    manually defined columns will appear in source order, and auto-generated columns appear in an
    arbitrary order. This property can be set for auto-generated columns with the
    <code>DataGridColumnAttribute</code>, or the <code>Order</code> property of a
    <code>DisplayAttribute</code> applied to the property or field.
</p>

<p>
    The <code>ChildContent RenderFragment</code> of a <code>Column</code> can be set to customize
    the content of its cells. It receives the full data item (i.e. row) as a context parameter.
</p>

<p>
    The <code>IsShown</code> property controls whether a given column is initially displayed. The
    user can then show or hide columns using the <code>DataGrid</code> controls. Set the
    <code>CanHide</code> property to <code>false</code> to prevent the user from toggling a column's
    visibility. These properties can both be set for auto-generated columns with the
    <code>DataGridColumnAttribute</code>, or the <code>AutoGenerateField</code> property of a
    <code>DisplayAttribute</code> applied to the property or field.
</p>

<p>
    The horizontal alignment of any column can be set with the <code>Alignment</code> property. This
    property can be set for auto-generated columns with the <code>DataGridColumnAttribute</code>.
</p>

<p>
    The <code>Format</code> property can be set to a format string (appropriate to the data type of
    the column), and the <code>FormatProvider</code> can be set to an <code>IFormatProvider</code>
    instance. These property can both be set for auto-generated columns with the
    <code>DataGridColumnAttribute</code>, and the <code>Format</code> property can be set with the
    <code>DataFormatString</code> property of a <code>DisplayFormatAttribute</code> applied to the
    property or field.
</p>

<p>
    Each column can be assigned a <code>FooterContent RenderFragment</code>. It receives the entire
    set of current page items as a context parameter, and can be used to provide aggregate
    information about the column (or anything else). If your content is grouped, the footer will
    also appear below each group, and the context parameter will contain only the items from that
    group. This allows you to provide aggregates on a group-by-group basis, as well as for the
    entire column.
</p>

<h2>Expanded content</h2>

<p>
    Each row can act as a <code>Collapse</code> component, expanding to display additional content.
    Configure the additional content with the <code>ExpandedContent RenderFragment</code> property.
</p>

<Collapse Id="ce-4" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-4" Items="_items">
                <ChildContent>
                    <Column Label="Last" Value="@(x => x.LastName)" />
                    <Column Label="Hire date" Value="@(x => x.HireDate)" Format="d" CanFilter="false" />
                </ChildContent>
                <ExpandedContent>
                    <div class="d-flex">
                        <span>@context.FirstName</span><span>,</span>
                        <span class="ml-1">@context.LastName</span>
                        @if (context.IsExecutive)
                        {
                            <tf-icon class="info ml-2">verified</tf-icon>
                        }
                    </div>
                </ExpandedContent>
            </DataGrid>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"">
    <ChildContent>
        <Column Label=""Last"" Value=""@(x => x.LastName)"" />
        <Column Label=""Hire date"" Value=""@(x => x.HireDate)"" Format=""d"" CanFilter=""false"" />
    </ChildContent>
    <ExpandedContent>
        <div class=""d-flex"">
            <span>@context.FirstName</span><span>,</span>
            <span class=""ml-1"">@context.LastName</span>
            @if (context.IsExecutive)
            {
                <tf-icon class=""info ml-2"">verified</tf-icon>
            }
        </div>
    </ExpandedContent>
</DataGrid>

@code {
    private class DataItem
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public bool IsExecutive { get; set; }
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    You can assign a function to the <code>HasExpandedContent</code> property which returns a
    boolean value that indicates whether a given data item should expand or not. If you don't assign
    a function to <code>HasExpandedContent</code> it is assumed that all rows can expand.
</p>

<h2>Filtering</h2>

<p>
    A <code>DataGrid</code> supports two kinds of filtering: per-column, and quick filters.
</p>

<h3>Column filtering</h3>

<p>
    Each column has filtering enabled by default, although you can disable it by setting
    <code>CanFilter</code> to <code>false</code> on any column. This property can be set for
    auto-generated columns with the <code>DataGridColumnAttribute</code>, or the
    <code>AutoGenerateFilter</code> property of a <code>DisplayAttribute</code> applied to the
    property or field.
</p>
    
<p>Only columns with certain data types support filtering:</p>

<ul style="list-style:circle">
    <li><code>string</code></li>
    <li><code>bool</code></li>
    <li><code>DateTime</code></li>
    <li><code>DateTimeOffset</code></li>
    <li><code>DateOnly</code></li>
    <li><code>TimeOnly</code></li>
    <li>any numeric type</li>
    <li>a nullable version of any of the above types</li>
</ul>

<p>
    Columns with custom content which do not specify a <code>Value</code> cannot be filtered (since
    they will not contain one of the supported data types).
</p>

<p>
    An initial filter value can be set for a column with the <code>InitialFilter</code> property.
</p>

<Collapse Id="ce-5" IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-5" Title="Employees" Items="_items">
                <Column Label="First" Value="@(x => x.FirstName)" IsQuickFilter="true" />
                <Column Label="Last" Value="@(x => x.LastName)" InitiallySorted="true" IsQuickFilter="true" />
                <Column Label="Exec?" Value="@(x => x.IsExecutive)" CanSort="false" InitialFilter="true">
                    @if (context.IsExecutive)
                    {
                        <tf-icon class="success">thumb_up</tf-icon>
                    }
                </Column>
                <Column Label="Hire date" Value="@(x => x.HireDate)" Format="d" CanFilter="false">
                    <FooterContent>
                        <div class="d-flex flex-column">
                            <span>Longest tenure: @(((DateTime.Now - context.Min(x => x.HireDate)).Days / 365.25).ToString("F1")) years</span>
                            <span>Average: @((new TimeSpan((long)Math.Round(context.Average(x => (DateTime.Now - x.HireDate).Ticks))).Days / 365.25).ToString("F1")) years</span>
                        </div>
                    </FooterContent>
                </Column>
            </DataGrid>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Title=""Employees"" Items=""_items"">
    <Column Label=""First"" Value=""@(x => x.FirstName)"" IsQuickFilter=""true"" />
    <Column Label=""Last"" Value=""@(x => x.LastName)"" InitiallySorted=""true"" IsQuickFilter=""true"" />
    <Column Label=""Exec?"" Value=""@(x => x.IsExecutive)"" CanSort=""false"" InitialFilter=""true"">
        @if (context.IsExecutive)
        {
            <tf-icon class=""success"">thumb_up</tf-icon>
        }
    </Column>
    <Column Label=""Hire date"" Value=""@(x => x.HireDate)"" Format=""d"" CanFilter=""false"">
        <FooterContent>
            <div class=""d-flex flex-column"">
                <span>Longest tenure: @(((DateTime.Now - context.Min(x => x.HireDate)).Days / 365.25).ToString(""F1"")) years</span>
                <span>Average: @((new DateTime(context.Average(x => x.HireDate.Ticks)).Days / 365.25).ToString(""F1"")) years</span>
            </div>
        </FooterContent>
    </Column>
</DataGrid>

@code {
    private class DataItem
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public bool IsExecutive { get; set; }
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<h3>Quick filtering</h3>

<p>
    If any column has <code>IsQuickFilter</code> set to <code>true</code> (it is <code>false</code>
    by default), the <code>DataGrid</code> will have a primary search box in the header. This search
    box will filter the rows so that only items which have each (space delimited) term in this
    search field in at least one quick filter column.  The <code>IsQuickFilter</code> property can
    be set for auto-generated columns with the <code>DataGridColumnAttribute</code>.
</p>

<p>
    You can disable the search box by setting the <code>AllowSearch</code> property to
    <code>false</code> (it is <code>true</code> by default). The <code>QuickFilter</code> property
    can still be set programmatically in this case to perform quick filtering on any columns with
    <code>IsQuickFilter</code> set to <code>true</code>.
</p>

<h3>Persistence</h3>

<p>
    Normally all filters will be reset when navigating away from the page. If you set an explicit
    value for the <code>Id</code> property (which sets the HTML <code>id</code> attribute), the
    current filters will persist between <em>in-app</em> navigations. Navigating away from the
    Blazor app, or using the browser's refresh function, will reset this internal cache.
</p>

<p>
    If you need filters to persist even when the user navigates away from the app or refreshes the
    browser (or in other offline scenarios, such as in a bookmark or external link), you can use
    query parameters in combination with the initial filter properties to achieve this result.
</p>

<h2>Sorting</h2>

<p>
    Each <code>Column</code> supports sorting by default, although you can disable it by setting
    <code>CanSort</code> to <code>false</code> on any column. This property can be set for
    auto-generated columns with the <code>DataGridColumnAttribute</code>.
</p>

<p>
    Columns with custom content which do not specify a <code>Value</code> cannot be sorted (since
    they will not contain values to sort).
</p>

<p>
    Each time the user chooses a sort order, it is added to a queue (or moved to the front of the
    queue). The final sort order is determined by the complete sort queue. This allows the user to
    sort first by one column, and then by another, and so on.
</p>

<p>
    You can set the <code>InitiallySorted</code> property to <code>true</code> to specify that a
    column should be initially sorted. Combine this with the <code>SortDescending</code> property to
    control the direction of the initial sort. These properties can both be set for auto-generated
    columns with the <code>DataGridColumnAttribute</code>.
</p>

<h3>Persistence</h3>

<p>
    Normally all sorting options will be reset when navigating away from the page. If you set an
    explicit value for the <code>Id</code> property (which sets the HTML <code>id</code> attribute),
    the current sorting will persist between <em>in-app</em> navigations. Navigating away from the
    Blazor app, or using the browser's refresh function, will reset this internal cache.
</p>

<p>
    If you need sort options to persist even when the user navigates away from the app or refreshes
    the browser (or in other offline scenarios, such as in a bookmark or external link), you can use
    query parameters in combination with the initial sort properties to achieve this result.
</p>

<h2>Grouping</h2>

<p>
    Set the <code>GroupBy</code> property to a function which accepts a data item and returns a
    string to group items by the equality of that key.
</p>

<Collapse Id="ce-6" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-6" Items="_items" GroupBy="@(x => x.IsExecutive.ToString())">
                <GroupContent>
                    @if (bool.TryParse(context, out var value) && value)
                    {
                        <span>Executives</span>
                        <tf-icon>admin_panel_settings</tf-icon>
                    }
                    else
                    {
                        <span>Non-executives</span>
                        <tf-icon>engineering</tf-icon>
                    }
                </GroupContent>
            </DataGrid>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" GroupBy=""@(x => x.IsExecutive.ToString())"">
    <GroupContent>
        @if (bool.TryParse(context, out var value) && value)
        {
            <span>Executives</span>
            <tf-icon>admin_panel_settings</tf-icon>
        }
        else
        {
            <span>Non-executives</span>
            <tf-icon>engineering</tf-icon>
        }
    </GroupContent>
</DataGrid>

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>GroupBy</code> key will also be used as the label for each group.
</p>

<p>
    Alternatively, the <code>GroupContent RenderFragment</code> can display custom content in the
    group header. It receives the group key as its context parameter.
</p>

<h2>Pagination</h2>

<p>
    The <code>DataGrid</code> contains a built-in <a href="./components/pagination">Pagination</a>
    control. You can set the initial number of items displayed per page with the
    <code>RowsPerPage</code> property (the default is 10). The user can change this value by
    selecting an option from a select populated by the <code>RowsPerPageOptions</code> property (the
    default options are 10, 25, 50, and 100).
</p>

<Collapse Id="ce-7" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-7" Items="_items2" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
        new DataItem { Id = 7, FirstName = ""Linda"", LastName = ""Davis"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(1372) },
        new DataItem { Id = 8, FirstName = ""William"", LastName = ""Rodriguez"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(150) },
        new DataItem { Id = 9, FirstName = ""Elizabeth"", LastName = ""Martinez"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(650) },
        new DataItem { Id = 10, FirstName = ""David"", LastName = ""Hernandez"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1000) },
        new DataItem { Id = 11, FirstName = ""Barbara"", LastName = ""Lopez"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(1759) },
        new DataItem { Id = 12, FirstName = ""Richard"", LastName = ""Gonzales"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(2007) },
        new DataItem { Id = 13, FirstName = ""Susan"", LastName = ""Wilson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1847) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    If the number of items available is less than the number of items per page, the pagination
    controls are not displayed.
</p>

<h2>Selection</h2>

<p>
    The <code>SelectionType</code> property can be set to either <code>Single</code> or
    <code>Multiple</code> to enable row selection.
</p>

<h3>Single selection</h3>

<p>
    With <code>SelectionType</code> set to <code>Single</code>, clicking on a row will select it.
    The <code>SelectedItem</code> property will reflect the currently selected item.
</p>

<Collapse Id="ce-8" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-8" TDataItem="DataItem" Items="_items" SelectionType="SelectionType.Single" @bind-SelectedItem="_selectedItem" />
            <span>Selected employee: @(_selectedItem?.LastName ?? "none")</span>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid TDataItem=""DataItem"" Items=""_items"" SelectionType=""SelectionType.Single"" @bind-SelectedItem=""_selectedItem"" />
<span>Selected employee: @(_selectedItem?.LastName ?? ""none"")</span>

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
    private DataItem? _selectedItem;
}")
    </ChildContent>
</Collapse>

<h3>Multiple selection</h3>

<p>
    With <code>SelectionType</code> set to <code>Multiple</code>, each row gains a checkbox which
    indicates its selection state. There is also a checkbox in the header of that column which
    toggles the selection of all visible items (i.e. filtering the items will change the set which
    is toggled by the checkbox). The <code>SelectedItems</code> property will reflect the currently
    selected items.
</p>

<Collapse Id="ce-9" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-9" TDataItem="DataItem" Items="_items" SelectionType="SelectionType.Multiple" @bind-SelectedItems="_selectedItems" />
            <span>Selected employees: @_selectedItems.Count</span>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid TDataItem=""DataItem"" Items=""_items"" SelectionType=""SelectionType.Multiple"" @bind-SelectedItem=""_selectedItem"" />
<span>Selected employee: @_selectedItems.Count</span>

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
    private List<DataItem> _selectedItems = new();
}")
    </ChildContent>
</Collapse>

<h2>Exporting</h2>

<p>
    The <code>DataGrid</code> component has built-in support for exporting to multiple file types
    (although this can be disabled by setting the <code>AllowExport</code> property to
    <code>false</code>).
</p>

<p>
    Exporting to <a href="https://en.wikipedia.org/wiki/Comma-separated_values">CSV</a>, <a
    href="https://www.microsoft.com/en-us/microsoft-365/excel">Excel</a>, and HTML formats is
    supported by default. The exported data will include the current set of visible columns, plus
    any columns with the <code>ExportHidden</code> property set to <code>true</code> (which allows
    exported files to contain columns not visible in the displayed table). This property can be set
    for auto-generated columns with the <code>DataGridColumnAttribute</code>.
</p>

<p>
    The exported data includes all items (rows) which match the current set of filters, not just
    those on the currently displayed page, sorted in the curent sort order. If the table is using
    <code>LoadItems</code> to fetch data, a new call is made which attempts to fetch all matching
    items, rather than just the items for the current page. If that operation indicates that not all
    data could be retrieved (possibly because too much data would be requested), a warning message
    is displayed and the user is encouraged to try using a more narrow set of filters.
</p>

<p>
    When exporting to HTML, custom content can be added to the beginning of the document by setting
    the <code>HtmlHeaderContent</code> property to a string. This string may contain HTML markup,
    and it is not sanitized as part of the export process, so if you allow user submission of any
    content for this property, be sure to properly sanitize it before assigning it to the
    <code>DataGrid</code>.
</p>

<p>
    Partial support also exists for <a href="https://en.wikipedia.org/wiki/PDF">PDF</a> format: a
    function must be assigned to the <code>PdfExport</code> property which accepts a
    <code>DataGridRequest</code> and returns a <code>Task</code> that wraps a <code>Stream</code>
    which contains the <code>byte</code> representation of the generated document. It is left to the
    implementer to generate an appropriate PDF based on the filter and sort criteria.
</p>

<h2>Editing</h2>

<p>
    The <code>DataGrid</code> component has built-in support for both editing existing data, as well
    as adding new items, although both features are disabled by default.
</p>

<p>
    To enable editing, set the <code>AllowEdit</code> property to <code>true</code>. This adds an
    edit button to each row. When clicked, an automatically-generated dialog is displayed with edit
    controls for every editable column. A read-only, disabled field is displayed for columns which
    can't be edited but for which <code>IsShown</code> is <code>true</code>, in case their
    information might provide important context for the user during an edit operation. Hidden,
    read-only columns are not displayed on the automatically-generated edit dialog at all.
</p>

<Collapse Id="ce-10" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-10" Items="_editableItems1" AllowEdit="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    A column can normally be edited if its <code>Value</code> property is a simple property or field
    accessor, and that property or field also has a public setter. This automatic edit support can
    be disabled, however, by setting the <code>CanEdit</code> property of a column to
    <code>false</code>. This property can be set for auto-generated columns with the the
    <code>DataGridColumnAttribute</code>, or the <code>AllowEdit</code> property of an
    <code>EditableAttribute</code> applied to the property or field.
</p>

<p>
    A column's edit behavior can be customized by providing an action to the <code>SetValue</code>
    property. This allows columns with complex or non-standard <code>Value</code> expression to be
    edited.
</p>

<p>
    The edit control displayed for a column is automatically selected based on the column's data
    type. Strings, boolean values, numeric types, date/time types, and <code>System.Color</code> are
    all automatically editable. If an appropriate edit control cannot be determined (or if the
    column requires a different edit control than the default), you can provide your own edit
    control with the <code>EditContent RenderFragment</code>.
</p>

<p>
    If the edit dialog is canceled, instead of saved, the row's values will be automatically reset
    to their original values. Note, however, that if you provide custom <code>EditContent</code> for
    a column, the automatic reset will only work if you only use input controls which correctly
    implement <code>IFormComponent</code> (this includes all the Tavenem Blazor Framework input
    components).
</p>

<p>
    You can also take complete control over the editing process by assigning a
    <code>Component</code> type to the <code>EditDialog</code> property. If this is set, your own
    component will be displayed as a dialog when the user adds or edits a row, rather than the
    auto-generated edit dialog.
</p>

<p>
    You can supply parameters for your custom edit dialog via the <code>EditDialogParameters</code>
    function parameter. Whether or not you provide a callback for this parameter, the currently
    edited item will also be provided as a parameter with the name "Item" to your dialog.
</p>

<p>
    You can also supply options for your custom edit dialog via the <code>EditDialogOptions</code>
    parameter.
</p>

<p>
    When an edit is complete, the <code>ItemSaved</code> function is invoked (if defined). If this
    callback returns <code>false</code>, the item's edited properties are reverted to their original
    values.
</p>

<h3>Inline editing</h3>

<p>
    You can also enable inline editing by setting the <code>AllowInlineEdit</code> property to
    <code>true</code> (as well as the <code>AllowEdit</code> property). When inline editing is
    enabled, and no custom <code>EditDialog</code> has been configured, <em>and</em> if no columns
    are currently hidden, editing a row will replace the displayed values in all the row's columns
    with edit controls (either your own custom <code>EditContent</code> or the automatically
    generated inputs).
</p>

<p>
    A save and cancel button will replace the edit button on a row which is being edited inline. If
    an inline edit is canceled, the values will revert to their initial state. As with the automatic
    edit dialog, this reset only works for <code>IFormComponent</code> inputs.
</p>

<Collapse Id="ce-11" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-11" Items="_editableItems2" AllowEdit="true" AllowInlineEdit="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" AllowInlineEdit=""true"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<h3>Adding items</h3>

<p>
    You can enable adding new items by setting the <code>AllowAdd</code> property to
    <code>true</code>. This enables an add button in the table header. When activated, this displays
    the same edit dialog as editing a row (your own custom <code>EditDialog</code> or the automatic
    dialog), but with initially empty or default values.
</p>

<p>
    You can also provide a different dialog for adding items by assigning a <code>Component</code>
    type to the <code>AddDialog</code> property. If this is set, it will be used instead of the
    <code>EditDialog</code>. You can also supply <code>AddDialogParameters</code> and/or
    <code>AddDialogOptions</code>.
</p>

<p>
    When the dialog is submitted the <code>ItemAdded</code> function is invoked (if defined). If
    this retuns false, no further action is taken. Otherwise, if the <code>Items</code> collection
    is set, the new item is added to its proper place in the data set (possibly on a different
    page). If <code>LoadItems</code> is set, however, the item is simply added to the current page,
    to avoid a potentially expensive call. If this behavior is undesirable, your
    <code>ItemAdded</code> callback can invoke <code>LoadItemsAsync</code> manually to force a
    refresh.
</p>

<Collapse Id="ce-12" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-12" Items="_editableItems3" AllowEdit="true" AllowAdd="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" AllowAdd=""true"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<h3>Deleting items</h3>

<p>
    You can enable adding new items by setting the <code>AllowDelete</code> property to
    <code>true</code>. This enables a delete button on each row. When activated, this displays a
    confirmation dialog. If accepted, the <code>ItemDeleted</code> function is invoked (if defined).
    If this returns false no further action is taken. Otherwise, if the <code>Items</code>
    collection is set, the item is removed. If <code>LoadItems</code> is set, the item is removed
    from the current page (if present).
</p>

<Collapse Id="ce-13" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-13" Items="_editableItems3" AllowEdit="true" AllowDelete="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" AllowDelete=""true"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<h3>Validation</h3>

<p>
    When editing or adding new items, the values in each cell (i.e. each property of the item) can
    be validated prior to saving by assigning a function to the <code>CellValidation</code> property
    of its <code>Column</code>.
</p>

<p>
    The function is similar to the <code>Validation</code> function of an input component: it
    receives the new value being assigned, the data item (row), and should return an enumeration of
    validation messages, which should be empty if the validation passes.
</p>

<p>
    If validation fails the edit or add operation will not be allowed. If the edit dialog is being
    used, the dialog will not close if the user attempts to sumit it with invalid data. This allows
    the user to see the validation messages for each input control, and correct any mistakes.
</p>

<p>
    If inline editing is enabled, any action which would end inline edit initiates validation
    (including an explicit save operation, or starting inline editing on a different row). If
    validation fails for an explicit save, the save operation does not continue, and the user will
    be able to see invalid cells and correct any mistakes. If validation fails due to an implicit
    save prior to editing a different row, the original edit is canceled, and all cells revert to
    their original values.
</p>

<h2>Persistent State</h2>

<p>
    If the <code>PersistState</code> property is set to <code>true</code>, the component will
    automatically keep track of the current page, row and group expansion state, sorting, and
    filtering in the URL's query string. This allows the component to preserve its state through
    page refreshes, and also to include the current state in a bookmark or shared URL.
</p>

<p>
    When turning on this feature, it is strongly recommended that the component be assigned a unique,
    stable value in its <code>Id</code> parameter (or via a splatted <code>id</code> attribute).
    This <code>Id</code> will be used in the generated query string to identify the component.
    Although an <code>Id</code> is generated automatically when one is not provided, the automatic
    value cannot be guaranteed to remain the same.
</p>

<p>
    Note that even when a component has <code>PersistState</code> set to <code>false</code>, its
    initial state can still be controlled via query string. The property only controls whether the
    query string is dynamically updated to reflect changing states.
</p>

<p>
    Note also that item selection, even if enabled, is not persisted. This is because selected
    values may be of any type, and so their representation in a URL query string is better handled
    by your own code, which can optimize for your particular dataset.
</p>

<h2>Customization</h2>

<p>
    The <code>Title</code> property can be used to display a title in the header of the
    <code>DataGrid</code>.
</p>

<p>
    You can also use the <code>HeaderContent RenderFragment</code> to add any custom content to the
    header.
</p>

<Collapse Id="ce-14" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-14" Items="_items" Title="Example Title">
                <HeaderContent>
                    <tf-icon class="info">table_rows</tf-icon>
                </HeaderContent>
            </DataGrid>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" Title=""Example Title"">
    <HeaderContent>
        <tf-icon class=""info"">table_rows</tf-icon>
    </HeaderContent>
</DataGrid>

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Id="ce-15" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-15-1" Items="_items" Title="Primary" ThemeColor="ThemeColor.Primary" SelectionType="SelectionType.Single" TableClass="striped hover" />
            <DataGrid Id="d-15-2" Items="_items" Title="Secondary" ThemeColor="ThemeColor.Secondary" SelectionType="SelectionType.Single" TableClass="striped hover" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" Title=""Primary"" ThemeColor=""ThemeColor.Primary"" SelectionType=""SelectionType.Single"" TableClass=""striped hover"" />
<DataGrid Items=""_items"" Title=""Secondary"" ThemeColor=""ThemeColor.Secondary"" SelectionType=""SelectionType.Single"" TableClass=""striped hover"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>TableClass</code> property can be used to assign classes to the inner <a
    href="./components/table">Table</a> element.
</p>

<p>
    You can add the <code>dense</code> class to reduce padding.
</p>

<Collapse Id="ce-16" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-16" Items="_items" TableClass="dense" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" TableClass=""dense"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>border</code> class will add both external and internal lines.
</p>

<Collapse Id="ce-17" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-17" Items="_items" TableClass="border" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" TableClass=""border"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>striped</code> class will add an alternate background color to every other row, while
    the <code>hover</code> class will change the background color of hovered rows.
</p>

<Collapse Id="ce-18" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-18" Items="_items" TableClass="striped hover" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" TableClass=""striped hover"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>DataGrid</code> components adds the <code>sticky-header</code> and
    <code>sticky-footer</code> classes automatically. Specify a value for the <code>MaxHeight</code>
    property to see this in action.
</p>

<Collapse Id="ce-19" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DataGrid Id="d-19" Items="_items2" MaxHeight="300px" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DataGrid Items=""_items"" MaxHeight=""300px"" />

@code {
    private class DataItem
    {
        [DataGridColumn(CanEdit = false, CanFilter = false, Label = ""Employee #"")]
        public int Id { get; set; }

        public string? FirstName { get; set; }

        public string? LastName { get; set; }

        [DataGridColumn(ColumnOrder = 1, Label = ""Executive?"")]
        public bool IsExecutive { get; set; }

        [DataGridColumn(Format = ""d"")]
        public DateTime HireDate { get; set; }
    }
    private List<DataItem> _items = new()
    {
        new DataItem { Id = 0, FirstName = ""James"", LastName = ""Smith"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1263) },
        new DataItem { Id = 1, FirstName = ""Mary"", LastName = ""Johnson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1121) },
        new DataItem { Id = 2, FirstName = ""Robert"", LastName = ""Williams"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(210) },
        new DataItem { Id = 3, FirstName = ""Patricia"", LastName = ""Brown"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(720) },
        new DataItem { Id = 4, FirstName = ""John"", LastName = ""Jones"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(550) },
        new DataItem { Id = 5, FirstName = ""Jennifer"", LastName = ""Garcia"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(160) },
        new DataItem { Id = 6, FirstName = ""Michael"", LastName = ""Miller"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1495) },
        new DataItem { Id = 7, FirstName = ""Linda"", LastName = ""Davis"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(1372) },
        new DataItem { Id = 8, FirstName = ""William"", LastName = ""Rodriguez"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(150) },
        new DataItem { Id = 9, FirstName = ""Elizabeth"", LastName = ""Martinez"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(650) },
        new DataItem { Id = 10, FirstName = ""David"", LastName = ""Hernandez"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1000) },
        new DataItem { Id = 11, FirstName = ""Barbara"", LastName = ""Lopez"", IsExecutive = false, HireDate = DateTime.Now - TimeSpan.FromDays(1759) },
        new DataItem { Id = 12, FirstName = ""Richard"", LastName = ""Gonzales"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(2007) },
        new DataItem { Id = 13, FirstName = ""Susan"", LastName = ""Wilson"", IsExecutive = true, HireDate = DateTime.Now - TimeSpan.FromDays(1847) },
    };
}")
    </ChildContent>
</Collapse>

<p>
    The <code>RowClass</code> property can be assigned a function which retuns a CSS class for a
    given data item, in order to customize the style of specific rows based on the data they
    contain, and the <code>CellClass</code> property on <code>Column</code> can be assigned a
    function which retuns a CSS class for a given data item, in order to customize the style of
    individual cells, while the <code>ColumnClass</code> property on <code>Column</code> can be set
    to customize the CSS style for an entire column. The <code>ColumnClass</code> property can be
    set for auto-generated columns with the <code>DataGridColumnAttribute</code>.
</p>

<p>
    The <code>Breakpoint</code> property sets a breakpoint below which the grid will render in a
    vertical format, for ease of reading on smaller devices. By default this is set to the small
    breakpoint, but the behavior can be disabled entirely by setting it to <code>None</code>.
</p>
