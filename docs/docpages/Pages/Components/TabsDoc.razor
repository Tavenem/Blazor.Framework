@page "/components/tabs"

<PageTitle>Tabs - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Tabs</Heading>

<p>
    The tabs component provides a tab interface for switching between content panels.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    Use the <code>Tabs</code> component to create a tab collection. Nest <code>TabPanel</code>
    components inside for each available tab.
</p>

<Collapse IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center">
            <Tabs TTabItem="string">
                <TabPanel Title="Tab One">
                    <div class="p-4">
                        Content for Tab One
                    </div>
                </TabPanel>
                <TabPanel Title="Tab Two">
                    <div class="p-4">
                        Content for Tab Two
                    </div>
                </TabPanel>
                <TabPanel Title="Tab Three">
                    <div class="p-4">
                        Content for Tab Three
                    </div>
                </TabPanel>
                <TabPanel Title="Disabled Tab" Disabled="true">
                    <div class="p-4">
                        Content for Disabled Tab
                    </div>
                </TabPanel>
            </Tabs>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Tabs TTabItem=""string"">
    <TabPanel Title=""Tab One"">
        <div class=""p-4"">
            Content for Tab One
        </div>
    </TabPanel>
    <TabPanel Title=""Tab Two"">
        <div class=""p-4"">
            Content for Tab Two
        </div>
    </TabPanel>
    <TabPanel Title=""Tab Three"">
        <div class=""p-4"">
            Content for Tab Three
        </div>
    </TabPanel>
    <TabPanel Title=""Disabled Tab"" Disabled=""true"">
        <div class=""p-4"">
            Content for Disabled Tab
        </div>
    </TabPanel>
</Tabs>")
    </ChildContent>
</Collapse>

<p>
    Any tab can be disabled by setting its <code>Disabled</code> property to <code>true</code>. A
    disabled panel can't be activated. If the current tab is disabled, its panel will be hidden.
</p>

<p>
    If there are more tabs than will fit, scroll buttons will appear. Selecting any tab will also
    cause the list to scroll to its position, making it easier to switch to nearby tabs without
    scrolling.
</p>

<Collapse IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center">
            <Tabs TTabItem="string">
                @for (var i = 0; i < 15; i++)
                {
                    var index = i;
                    <TabPanel Title="@($"Tab {index + 1}")">
                        <div class="p-4">
                            Content for Tab @(index + 1)
                        </div>
                    </TabPanel>
                }
            </Tabs>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Tabs TTabItem=""string"">
    @for (var i = 0; i < 15; i++)
    {
        var index = i;
        <TabPanel Title=""@($""Tab {index + 1}"")"">
            <div class=""p-4"">
                Content for Tab @(index + 1)
            </div>
        </TabPanel>
    }
</Tabs>")
    </ChildContent>
</Collapse>

<p>
    The tabs can be positioned on any side of the panels using the <code>TabSide</code> property.
</p>

<Collapse IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center">
            <Select TValue="Side" @bind-Value="Side" Label="Side" Class="dense" Style="max-width:200px">
                <Option Value="Side.Top" Label="Top" />
                <Option Value="Side.Bottom" Label="Bottom" />
                <Option Value="Side.Left" Label="Left" />
                <Option Value="Side.Right" Label="Right" />
            </Select>
            <Tabs TTabItem="string" TabSide="Side" Class="flex-grow-1">
                <TabPanel Title="Tab One">
                    <div class="p-4">
                        Content for Tab One
                    </div>
                </TabPanel>
                <TabPanel Title="Tab Two">
                    <div class="p-4">
                        Content for Tab Two
                    </div>
                </TabPanel>
                <TabPanel Title="Tab Three">
                    <div class="p-4">
                        Content for Tab Three
                    </div>
                </TabPanel>
            </Tabs>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Select TValue=""Side"" @bind-Value=""Side"" Label=""Side"" Class=""dense"" Style=""max-width:200px"">
    <Option Value=""Side.Top"" Label=""Top"" />
    <Option Value=""Side.Bottom"" Label=""Bottom"" />
    <Option Value=""Side.Left"" Label=""Left"" />
    <Option Value=""Side.Right"" Label=""Right"" />
</Select>
<Tabs TTabItem=""string"" TabSide=""Side"" Class=""flex-grow-1"">
    <TabPanel Title=""Tab One"">
        <div class=""p-4"">
            Content for Tab One
        </div>
    </TabPanel>
    <TabPanel Title=""Tab Two"">
        <div class=""p-4"">
            Content for Tab Two
        </div>
    </TabPanel>
    <TabPanel Title=""Tab Three"">
        <div class=""p-4"">
            Content for Tab Three
        </div>
    </TabPanel>
</Tabs>

@code {
    private Side Side { get; set; } = Side.Left;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Binding</Heading>

<p>
    The <code>Tabs</code> component has an <code>ActivePanelIndex</code> property which reflects the
    currently-selected tab (zero if there are no tabs at all), and can be two-way bound to control
    the selection.
</p>

<p>
    The tabs and panels themselves can be data-bound via the <code>Items</code> property, along with
    the <code>PanelTemplate RenderFragment</code>, and either the <code>TabTitle</code> function
    (which returns a title for a given item), or the <code>TabTemplate RenderFragment</code> (which
    provides rich tab content).
</p>

<Collapse IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center">
            <Tabs Items="_items" TabTitle="@(i => (MarkupString)i)">
                <PanelTemplate>
                    <div class="p-4">
                        @context
                    </div>
                </PanelTemplate>
            </Tabs>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Tabs Items=""_items"" TabTitle=""@(i => (MarkupString)i)"">
    <PanelTemplate>
        <div class=""p-4"">
            @context
        </div>
    </PanelTemplate>
</Tabs>

@code {
    private string[] _items = new[] { ""Tab 1"", ""Tab 2"", ""Tab 3"" };
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Dynamic tabs</Heading>

<p>
    The <code>Tabs</code> component has an <code>OnAdd</code> callback. If this is configured, the
    tab list will contain a button which the user can activate to add a new item to the
    <code>Items</code> collection. The callback should return the item to be added (which may be a
    default value, such as <code>null</code>).
</p>

<p>
    The <code>Tabs</code> component also has an <code>OnClose</code> handler. If this is configured,
    each tab will have a close button. When activated by the user, the callback will be invoked, and
    the item will be removed from the <code>Items</code> collection. Note that the callback is not
    invoked when tabs are removed programmatically. You can also set the <code>CanCloseTabs</code>
    property to <code>true</code> to allow closing bound tabs when no <code>OnClose</code> handler
    has been provided.
</p>

<p>
    Each <code>TabPanel</code> also has its own <code>OnClose</code> callback. This can be used to
    give a specific tab a close button, rather than all at once. If a static tab has a close button,
    it is up to your <code>OnClose</code> handler to remove it from the <code>ChildContent</code>.
    Dynamic panels are automatically removed from the <code>Items</code> collection when closed.
</p>

<Collapse IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center">
            <Tabs Items="_items2"
                  TabTitle="@(i => (MarkupString)i)"
                  OnAdd="@(() => $"Tab {_items2.Count + 1}")"
                  CanCloseTabs="true"
                  Class="flex-grow-1">
                <PanelTemplate>
                    <div class="p-4">
                        @context
                    </div>
                </PanelTemplate>
            </Tabs>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Tabs Items=""_items2""
      TabTitle=""@(i => (MarkupString)i)""
      OnAdd=""@(_ => $""Tab {_items2.Count + 1}"")""
      CanCloseTabs=""true""
      Class=""flex-grow-1"">
    <PanelTemplate>
        <div class=""p-4"">
            @context
        </div>
    </PanelTemplate>
</Tabs>

@code {
    private string[] _items = new[] { ""Tab 1"", ""Tab 2"", ""Tab 3"" };
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    Instead of using the <code>Title</code> property to set simple <code>MarkupString</code>
    content, you can use the <code>TabContent</code> property to set the tab's content to whatever
    you wish.
</p>

<p>
    The <code>Tabs</code> component has <code>AddIcon</code>, <code>BackIcon</code> and
    <code>ForwardIcon</code> properties which can be used to override the icons used for the "new
    tab" button and the tab scrolling buttons.
</p>

<p>
    The <code>HeaderContent RenderFragment</code> will display its content above the panels (and
    below the tab list, if it is positioned on top). The <code>PreTabContent</code> and
    <code>PostTabContent RenderFragment</code>s will appear before and after the tabs in the tab
    list.
</p>

<Heading Level="HeadingLevel.H2">Events</Heading>

<p>
    The <code>Tabs</code> component has an <code>OnActivate</code> callback which is invoked prior
    to activating any panel. It receives the item bound to the panel as a parameter. The tab switch
    is not performed until the handler completes, providing the opportunity to perform any
    necessary async loading operations.
</p>

<p>
    Each <code>TabPanel</code> also has its own <code>OnActivate</code> property. This is invoked in
    addition to the one defined on the parent tab control, if both are configured.
</p>

<p>
    You can activate panels programmatically with the <code>ActivatePanelAsync</code> methods. One
    overload takes an index parameter. The other takes an item, and activates the first tab with a
    matching bound item.
</p>

@code {
    private List<string> _items = new() { "Tab 1", "Tab 2", "Tab 3" };
    private List<string> _items2 = new() { "Tab 1", "Tab 2", "Tab 3" };
    private Side Side { get; set; } = Side.Left;
}
