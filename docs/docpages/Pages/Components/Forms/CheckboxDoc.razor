@page "/components/checkbox"

<PageTitle>Checkbox - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Checkbox</Heading>

<p>
    The <code>Checkbox</code> component is a rich wrapper for an input element with the checkbox
    type.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    Checkboxes can be presented with or without a label.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox TValue="bool" />
                <Checkbox TValue="bool" Label="Label" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool"" />
    <Checkbox TValue=""bool"" Label=""Label"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can add the <code>dense</code> class to reduce the space around the icon.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox TValue="bool" Label="Normal" />
                <Checkbox TValue="bool" Label="Dense" Class="dense" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool"" Label=""Normal"" />
    <Checkbox TValue=""bool"" Label=""Dense"" Class=""dense"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    A checkbox's <code>Value</code> property can be bound to either a <code>bool</code> or nullable
    <code>bool?</code> expression.
</p>

<p>
    When bound to a nullable <code>bool?</code> a <code>null</code> value is represented by a third,
    indeterminate icon. Normally, interacting with the checkbox will cause it to toggle between
    <code>true</code> and <code>false</code>, but you can set the <code>AllowNull</code> property to
    <code>true</code> to enable user interactions to cycle through the indeterminate state as well.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox @bind-Value="_value1" Label="Bool" />
                <Checkbox @bind-Value="_value2" Label="Bool?" />
                <Checkbox @bind-Value="_value3" Label="Bool? + AllowNull" AllowNull="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool"" @bind-Value=""_value1"" Label=""Bool"" />
    <Checkbox TValue=""bool?"" @bind-Value=""_value2"" Label=""Bool?"" />
    <Checkbox TValue=""bool?"" @bind-Value=""_value3"" Label=""Bool? + AllowNull"" AllowNull=""true"" />
</div>

@code {
    private bool _value1 = true;
    private bool? _value2;
    private bool? _value3;
}")
    </ChildContent>
</Collapse>

<p>
    The <code>CheckedIcon</code>, <code>UncheckedIcon</code>, and <code>IndeterminateIcon</code>
    properties can be used to customize the icons used for each state.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox TValue="bool?" ThemeColor="ThemeColor.Danger" AllowNull="true" CheckedIcon="favorite" UncheckedIcon="favorite_border" IndeterminateIcon="heart_broken" />
                <Checkbox TValue="bool?" AllowNull="true" CheckedIcon="thumb_up" UncheckedIcon="thumb_down" IndeterminateIcon="thumbs_up_down" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool?"" ThemeColor=""ThemeColor.Danger"" AllowNull=""true"" CheckedIcon=""favorite"" UncheckedIcon=""favorite_border"" IndeterminateIcon=""heart_broken"" />
    <Checkbox TValue=""bool?"" AllowNull=""true"" CheckedIcon=""thumb_up"" UncheckedIcon=""thumb_down"" IndeterminateIcon=""thumbs_up_down"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Disabled & read-only</Heading>

<p>
    The input can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox @bind-Value="_value4" Label="Disabled" Disabled="true" />
                <Checkbox @bind-Value="_value4" Label="Read-only" ReadOnly="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool"" @bind-Value=""_value"" Label=""Disabled"" Disabled=""true"" />
    <Checkbox TValue=""bool"" @bind-Value=""_value"" Label=""Read-only"" ReadOnly=""true"" />
</div>

@code {
    private int _value = true;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Required</Heading>

<p>
    Set the <code>Required</code> property to specify whether the input is required. This adds an
    indicator to the label, and automatic verification rules which warn the user when the input is
    <code>null</code>. The warning will only appear after the user has interacted with the input for
    the first time.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox TValue="bool" Label="Required" Required="true" />
                <Checkbox TValue="bool?" Label="Required" Required="true" AllowNull="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool"" Label=""Required"" Required=""true"" />
    <Checkbox TValue=""bool?"" Label=""Required"" Required=""true"" AllowNull=""true"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can also set the <code>RequiresTrue</code> property to <code>true</code> to specify that a
    value of <code>true</code> is required to satisfy the <code>Required</code> condition, not just
    a non-<code>null</code> value. This can be useful for checkboxes which <em>must</em> be checked,
    such as indicating agreement to terms, etc.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox TValue="bool" Label="Requires true" Required="true" RequiresTrue="true" />
                <Checkbox TValue="bool?" Label="Requires true" Required="true" RequiresTrue="true" AllowNull="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool"" Label=""Requires true"" Required=""true"" RequiresTrue=""true"" />
    <Checkbox TValue=""bool?"" Label=""Requires true"" Required=""true"" RequiresTrue=""true"" AllowNull=""true"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that a checkbox bound to a non-nullable <code>bool</code> can never have a
    <code>null</code> value, and so will not trigger a validation warning unless
    <code>RequiresTrue</code> is <code>true</code>.
</p>

<Heading Level="HeadingLevel.H2">Tab index</Heading>

<p>
    Set the <code>TabIndex</code> property to specify the value of the input's <code>tabindex</code>
    attribute.
</p>

<Heading Level="HeadingLevel.H2">Name</Heading>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<Heading Level="HeadingLevel.H2">Auto-focus</Heading>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<Heading Level="HeadingLevel.H2">Methods</Heading>

<p>
    The <code>FocusAsync</code> method will give the input focus.
</p>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox TValue="bool?" Label="Primary" ThemeColor="ThemeColor.Primary" />
                <Checkbox TValue="bool?" Label="Secondary" ThemeColor="ThemeColor.Secondary" />
                <Checkbox TValue="bool?" Label="Tertiary" ThemeColor="ThemeColor.Tertiary" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool?"" Label=""Primary"" ThemeColor=""ThemeColor.Primary"" />
    <Checkbox TValue=""bool?"" Label=""Secondary"" ThemeColor=""ThemeColor.Secondary"" />
    <Checkbox TValue=""bool?"" Label=""Tertiary"" ThemeColor=""ThemeColor.Tertiary"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Use the <code>small</code> or <code>large</code> classes to change the size of the checkbox.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Checkbox TValue="bool" Label="Small" Class="small" />
                <Checkbox TValue="bool" Label="Normal" />
                <Checkbox TValue="bool" Label="Large" Class="large" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Checkbox TValue=""bool"" Label=""Small"" Class=""small"" />
    <Checkbox TValue=""bool"" Label=""Normal"" />
    <Checkbox TValue=""bool"" Label=""Large"" Class=""large"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the input itself, while the <code>InputAttributes</code> property can be used
    to assign arbitrary attributes to it.
</p>

<Heading Level="HeadingLevel.H3">Validation</Heading>

<p>
    See <a href="./components/validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private bool _value1 = true;
    private bool? _value2;
    private bool? _value3;
    private bool _value4 = true;
}
