@page "/components/slider"

<PageTitle>Slider - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Slider</Heading>

<p>
    The <code>Slider</code> component is a rich wrapper for a range input element.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    The slider input accepts a range of values, from a minimum to a maximum. They are intended for
    use when the relative value is more relevant to the user than the precise numeric value.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value1" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value"" />
</div>

@code {
    private int _value = 50;
}")
    </ChildContent>
</Collapse>

<p>
    Bind the input value to any numeric value with the <code>Value</code> property. All standard
    numeric types are valid, as well as their nullable counterparts.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value3" Label="Int" />
                <span>Bound value: @_value3</span>
                <Slider @bind-Value="_value4" Label="Double" Class="mt-3" />
                <span>Bound value: @_value4</span>
                <Slider @bind-Value="_value5" Label="Byte" Class="mt-3" />
                <span>Bound value: @_value5</span>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value1"" Label=""Int"" />
    <span>Bound value: @_value1</span>
    <Slider @bind-Value=""_value2"" Label=""Double"" Class=""mt-3"" />
    <span>Bound value: @_value2</span>
    <Slider @bind-Value=""_value3"" Label=""Byte"" Class=""mt-3"" />
    <span>Bound value: @_value3</span>
</div>

@code {
    private int _value1 = 33;
    private double _value2 = 50;
    private byte _value3 = 75;
}")
    </ChildContent>
</Collapse>

<p>
    Note that it is possible to bind to a nullable type, but the input will automatically convert a
    <code>null</code> value to the minimum value.
</p>

<p>
    Normally binding updates occur in response to the input element's <code>onchange</code> event,
    which fires when the input loses focus. If you set the <code>UpdateOnInput</code> property to
    <code>true</code>, updates will occur in response to the <code>oninput</code> event instead,
    which fires every time the input value changes.
</p>

<p>
    If you need to update as the user moves the thumb, but want to avoid excessive calls, you can
    set the <code>UpdateOnInputDebounce</code> property to a number of milliseconds that the
    component will wait before updating the bound value.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value6" Label="@($"On Change: {_value6}")" />
                <Slider @bind-Value="_value7" UpdateOnInput="true" Label="@($"On Input: {_value7}")" />
                <Slider @bind-Value="_value8" UpdateOnInput="true" UpdateOnInputDebounce="500" Label="@($"Debounced: {_value8}")" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value1"" Label=""@($""On Change: {_value1}"")"" />
    <Slider @bind-Value=""_value2"" UpdateOnInput=""true"" Label=""@($""On Input: {_value2}"")"" />
    <Slider @bind-Value=""_value3"" UpdateOnInput=""true"" UpdateOnInputDebounce=""500"" Label=""@($""Debounced: {_value3}"")"" />
</div>

@code {
    private int _value1;
    private int _value2;
    private int _value3;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Min & Max</Heading>

<p>
    The <code>Min</code> and <code>Max</code> properties specify the allowed limits for the value.
    When unset, zero and 100 are used.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value9" UpdateOnInput="true" Label="@($"Value: {_value9:F1}")" Min="5" Max="8" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value"" UpdateOnInput=""true"" Label=""@($""Value: {_value}"")"" Min=""5"" Max=""8"" />
</div>

@code {
    private double _value;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Step</Heading>

<p>
    The <code>Step</code> property specifies the amount by which the value increases or decreases as
    the thumb is moved along the track. By default, the step is 1 for integral types and "any" for
    floating point types (meaning it allows values of any precision). When set to any other value,
    the bound value will change by increments only of the given amount.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value10" Label="@($"Default double: {_value10}")" />
                <Slider @bind-Value="_value11" Label="@($"Step 0.1: {_value11}")" Step="0.1" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value1"" Label=""@($""Default double: {_value1}"")"" />
    <Slider @bind-Value=""_value2"" Label=""@($""Step 0.1: {_value2}"")"" Step=""0.1"" />
</div>

@code {
    private double _value1 = 71.628;
    private double _value2 = 22.3;
}")
    </ChildContent>
</Collapse>

<p>
    If your <code>Min</code> value is set to a non-integral number, it will be used as the basis to
    which <code>Step</code> is added to determine allowed values.
</p>

<Heading Level="HeadingLevel.H2">Hash marks</Heading>

<p>
    You can display hash marks at each step by adding the <code>hashmarks</code> class.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value12" Step="10" Class="hashmarks" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value"" Step=""10"" Class=""hashmarks"" />
</div>

@code {
    private int _value = 50;
}")
    </ChildContent>
</Collapse>

<p>
    You can assign labels to the hash marks by assigning a list of <code>string</code>s to the
    <code>HashLabels</code> property. The label at each index in the list will be assigned to the
    hash with the same index.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider TValue="int" Step="20" HashLabels="_labels" Class="hashmarks" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider TValue=""int"" Step=""20"" HashLabels=""_labels"" Class=""hashmarks"" />
</div>

@code {
    private List<string?> _labels = new() { ""Empty"", ""20%"", ""40%"", ""60%"", ""80%"", ""Full"" };
}")
    </ChildContent>
</Collapse>

<p>
    Note that the list does not need to have the same length as the number of hash marks. If it is
    shorter, the remaining hash marks will be unlabelled. If it is longer, the extra labels will be
    ignored. You can also leave entries in the list <code>null</code> to skip labels for the
    corresponding hash marks.
</p>

<Heading Level="HeadingLevel.H2">Value label</Heading>

<p>
    If you add the <code>show-value</code> class, the thumb will have a floating label which
    displays the value of its current position when it's active.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value13" Class="show-value" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value"" Class=""show-value"" />
</div>

@code {
    private int _value = 50;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Disabled & read-only</Heading>

<p>
    The input can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_disabled" Label="Disabled" Disabled="true" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <Slider @bind-Value="_disabled" Label="Read-only" ReadOnly="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <Slider @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" />
</div>

@code {
    private int _disabled = 50;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Label</Heading>

<p>
    The <code>Label</code> property assigns a label to the input.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider TValue="int" Label="Label" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider TValue=""int"" Label=""Label"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Required</Heading>

<p>
    Set the <code>Required</code> property to specify whether the input is required. This adds an
    indicator to the label, but since a slider cannot have an empty value (not even when bound to a
    nullable type), this property has no other real effects.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider TValue="int" Label="Required" Required="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider TValue=""int"" Label=""Required"" Required=""true"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Tab index</Heading>

<p>
    Set the <code>TabIndex</code> property to specify the value of the input's <code>tabindex</code>
    attribute.
</p>

<Heading Level="HeadingLevel.H2">Name</Heading>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<Heading Level="HeadingLevel.H2">Auto-focus</Heading>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<Heading Level="HeadingLevel.H2">Methods</Heading>

<p>
    The <code>FocusAsync</code> method will give the input focus.
</p>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value15" Label="Primary" ThemeColor="ThemeColor.Primary" />
                <Slider @bind-Value="_value16" Label="Secondary" ThemeColor="ThemeColor.Secondary" />
                <Slider @bind-Value="_value17" Label="Tertiary" ThemeColor="ThemeColor.Tertiary" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value1"" Label=""Primary"" ThemeColor=""ThemeColor.Primary"" />
    <Slider @bind-Value=""_value2"" Label=""Secondary"" ThemeColor=""ThemeColor.Secondary"" />
    <Slider @bind-Value=""_value3"" Label=""Tertiary"" ThemeColor=""ThemeColor.Tertiary"" />
</div>

@code {
    private int _value1 = 25;
    private int _value2 = 50;
    private int _value3 = 80;
}")
    </ChildContent>
</Collapse>

<p>
    Add the <code>filled</code> class to show a bar before the thumb.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Slider @bind-Value="_value18" Class="filled" />
                <Slider @bind-Value="_value19" Label="Primary" ThemeColor="ThemeColor.Primary" Class="filled" />
                <Slider @bind-Value="_value20" Label="Secondary" ThemeColor="ThemeColor.Secondary" Class="filled" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <Slider @bind-Value=""_value1"" Class=""filled"" />
    <Slider @bind-Value=""_value2"" Label=""Primary"" ThemeColor=""ThemeColor.Primary"" Class=""filled"" />
    <Slider @bind-Value=""_value3"" Label=""Secondary"" ThemeColor=""ThemeColor.Secondary"" Class=""filled"" />
</div>

@code {
    private int _value1 = 25;
    private int _value2 = 50;
    private int _value3 = 80;
}")
    </ChildContent>
</Collapse>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the input itself, while the <code>InputAttributes</code> property can be used
    to assign arbitrary attributes to it.
</p>

<Heading Level="HeadingLevel.H3">Validation</Heading>

<p>
    See <a href="./components/validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private int _disabled = 50;
    private List<string?> _labels = new() { "Empty", "20%", "40%", "60%", "80%", "Full" };
    private int _value1 = 50;
    private int _value3 = 33;
    private double _value4 = 50;
    private byte _value5 = 75;
    private int _value6;
    private int _value7;
    private int _value8;
    private double _value9 = 6;
    private double _value10 = 71.628;
    private double _value11 = 22.3;
    private int _value12 = 50;
    private int _value13 = 50;
    private int _value15 = 25;
    private int _value16 = 50;
    private int _value17 = 80;
    private int _value18 = 25;
    private int _value19 = 50;
    private int _value20 = 80;
}
