@page "/components/color-input"

<PageTitle>Color Input - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Color Input</Heading>

<p>
    The <code>ColorInput</code> component is a rich wrapper for an input element that binds to a
    color type.
</p>

<p>
    It provides a color spectrum, hue slider, optional alpha slider, and manual inputs which allows
    users to define a color in terms of named colors, hexadecimal strings, RGB values, or HSL
    values.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    Color inputs come in three styles. The default uses a simple underline. Add the
    <code>filled</code> class to give it a shaded background. Add the <code>outlined</code> class to
    use a full outline.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <ColorInput TValue="string" Label="Normal" />
                <ColorInput TValue="string" Label="Filled" Class="filled" />
                <ColorInput TValue="string" Label="Outlined" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" Label=""Normal"" />
    <ColorInput TValue=""string"" Label=""Filled"" Class=""filled"" />
    <ColorInput TValue=""string"" Label=""Outlined"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can also add the <code>dense</code> class to any variant to reduce the margins and padding.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <ColorInput TValue="string" Label="Normal" Class="dense" />
                <ColorInput TValue="string" Label="Filled" Class="filled dense" />
                <ColorInput TValue="string" Label="Outlined" Class="outlined dense" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" Label=""Normal"" Class=""dense"" />
    <ColorInput TValue=""string"" Label=""Filled"" Class=""filled dense"" />
    <ColorInput TValue=""string"" Label=""Outlined"" Class=""outlined dense"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    A <code>ColorInput</code>'s <code>Value</code> property can be bound to either a string or a
    <code>System.Drawing.Color</code> structure (including a nullable version).
</p>

<p>
    When binding to a string, any of the following notations are accepted as input:
</p>

<dl>
    <dt>Keyword</dt>
    <dd>A CSS color keyword.</dd>
       
    <dt>Hexadecimal</dt>
    <dd>A 3-, 6-, or 8-character CSS-style hexadecimal string (with or without leading '#').</dd>
       
    <dt>RGB(A)</dt>
    <dd>
        An <code>rgb</code> or <code>rgba</code> function with comma- or space-separated values
        enclosed in parentheses (the alpha component is separated by a forward slash ('/') in
        space-separated notation.
    </dd>
       
    <dt>HSL(A)</dt>
    <dd>
        An <code>hsl</code> or <code>hsla</code> function with comma- or space-separated values
        enclosed in parentheses (the alpha component is separated by a forward slash ('/') in
        space-separated notation.
    </dd>
       
    <dt>Hexadecimal</dt>
    <dd>A 3-, 6-, or 8-character CSS-style hexadecimal string (with or without leading '#').</dd>
</dl>

<p>
    The string returned will be a hexadecimal string for colors with no alpha component, or an
    <code>rgba</code> function for colors with an alpha component, for maximum CSS compatibility. If
    you set the <code>OutputHexStrings</code> property to <code>true</code>, the output will always
    be a hexadecimal string (either 6- or 8-digit).
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <ColorInput @bind-Value="_value1" Label="String" Class="w-100" />
                <span>Bound value: @_value1</span>
                <ColorInput @bind-Value="_value2" Label="Color" Class="w-100" />
                <span>Bound value: @_value2</span>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput @bind-Value=""_value1"" Label=""String"" Class=""w-100"" />
    <span>Bound value: @_value1</span>
    <ColorInput @bind-Value=""_value2"" Label=""Color"" Class=""w-100"" />
    <span>Bound value: @_value2</span>
</div>

@code {
    private string _value1 = ""#f00"";
    private System.Drawing.Color _value2 = System.Drawing.Color.RebeccaPurple;
}")
    </ChildContent>
</Collapse>

<p>
    Note that when bound to a nullable type, clearing the input results in a <code>null</code>
    value. Clearing the input when bound to a non-nullable type results in a default value
    (transparent when alpha is allowed, and black when it isn't).
</p>

<p>
    Note that the underlying <code>input</code> element always receives a <code>string</code> value
    for use with standard HTML form submission operations. This string is normally a CSS-style color
    string when the control is bound to a <code>string</code>. When bound to a
    <code>System.Drawing.Color</code> it is the result of <code>ToArgb</code> (an integer), as this
    value is a more compact representation than a JSON serialization of the entire color structure.
</p>

<p>
    You can override the default behavior by assigning a special converter class to the
    <code>Converter</code> property which can perform bespoke conversions. Only the
    <code>setter</code> parameter of the converter requires implementation, as the
    <code>getter</code> is not used for color pickers.
</p>

<Heading Level="HeadingLevel.H2">Button</Heading>

<p>
    If you set the <code>DisplayType</code> property to <code>PickerDisplayType.Button</code> a
    simple button is displayed instead of a full field. The button's content is the current color,
    unless you set the <code>IconButton</code> property to <code>true</code> (which causes the
    button to show a simple icon).
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ColorInput @bind-Value="_value3" DisplayType="PickerDisplayType.Button" />
            <ColorInput TValue="string" DisplayType="PickerDisplayType.Button" IconButton="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ColorInput @bind-Value=""_value"" DisplayType=""PickerDisplayType.Button"" />
<ColorInput TValue=""string"" DisplayType=""PickerDisplayType.Button"" IconButton=""true"" />

@code {
    private string _value = ""#08f"";
}")
    </ChildContent>
</Collapse>

<p>
    The label and any help text or validation messages are not displayed in this style, but the
    button does get a special border color when the input is invalid.
</p>

<p>
    This display style is intended for integration within a toolbar, or a similar compact layout,
    where a full field would not be appropriate. It will usually be good practice to label the
    button in some manner (e.g. with a <a href="./components/tooltip">tooltip</a>), and display any
    help text or validation messages manually in an appropriate place. Otherwise the purpose of the
    button may not be clear to a user, particularly when the selected color is transparent.
</p>

<Heading Level="HeadingLevel.H2">Inline</Heading>

<p>
    If you set the <code>DisplayType</code> property to <code>PickerDisplayType.Inline</code> the
    full color picker is displayed in the document flow.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ColorInput TValue="string" Label="Inline" DisplayType="PickerDisplayType.Inline" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ColorInput TValue=""string"" Label=""Inline"" DisplayType=""PickerDisplayType.Inline"" />")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Alpha</Heading>

<p>
    Set the <code>ShowAlpha</code> property to <code>false</code> to hide the controls for alpha
    values, and to make black the default color when clearing the value (rather than transparent).
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
            <ColorInput TValue="string" ShowAlpha="false" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" ShowAlpha=""false"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Disabled & read-only</Heading>

<p>
    The input can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <ColorInput @bind-Value="_disabled" Label="Disabled" Disabled="true" />
                <ColorInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="filled" />
                <ColorInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="outlined" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <ColorInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" />
                <ColorInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="filled" />
                <ColorInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="outlined" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <ColorInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Inline="true" />
                <ColorInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Inline="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" />
    <ColorInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""filled"" />
    <ColorInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""outlined"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <ColorInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" />
    <ColorInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""filled"" />
    <ColorInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""outlined"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <ColorInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Inline=""true"" />
    <ColorInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Inline=""true"" />
</div>

@code {
    private string _disabled = ""#0f0"";
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Label</Heading>

<p>
    The <code>Label</code> property assigns a label to the input. The label will appear within the
    input like a placeholder when it is empty and does not have focus.
</p>

<p>
    Note that while a <code>ColorInput</code> bound to a <code>string</code> or a nullable
    <code>System.Drawing.Color</code> will allow an empty value, one bound to a non-nullable
    <code>System.Drawing.Color</code> will never be empty, since the bound <code>struct</code> will
    always have a value.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <ColorInput TValue="string" Label="Label" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" Label=""Label"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Help text</Heading>

<p>
    You can supply help text for the field with the <code>HelpText</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <ColorInput TValue="string" Label="Normal" HelpText="Some help text" />
                <ColorInput TValue="string" Label="Filled" HelpText="Some help text" Class="filled" />
                <ColorInput TValue="string" Label="Outlined" HelpText="Some help text" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" Label=""Normal"" HelpText=""Some help text"" />
    <ColorInput TValue=""string"" Label=""Filled"" HelpText=""Some help text"" Class=""filled"" />
    <ColorInput TValue=""string"" Label=""Outlined"" HelpText=""Some help text"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that help text is replaced by any field validation errors.
</p>

<Heading Level="HeadingLevel.H2">Required</Heading>

<p>
    Set the <code>Required</code> property to specify whether the input is required. This adds an
    indicator to the label, and automatic verification rules which warn the user when the input is
    empty. The warning will only appear after the user has interacted with the input for the first
    time.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <ColorInput TValue="string" Label="Required" Required="true" />
                <ColorInput TValue="string" Label="Required" Required="true" Class="filled" />
                <ColorInput TValue="string" Label="Required" Required="true" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" Label=""Required"" Required=""true"" />
    <ColorInput TValue=""string"" Label=""Required"" Required=""true"" Class=""filled"" />
    <ColorInput TValue=""string"" Label=""Required"" Required=""true"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that a non-nullable type will always have a value.
</p>

<Heading Level="HeadingLevel.H2">Tab index</Heading>

<p>
    Set the <code>TabIndex</code> property to specify the value of the input's <code>tabindex</code>
    attribute.
</p>

<p>
    When <code>Inline</code> is <code>true</code>, this sets the <code>tabindex</code> of the hue
    slider.
</p>

<Heading Level="HeadingLevel.H2">Name</Heading>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<p>
    Note: even when <code>Inline</code> is <code>true</code>, a hidden <code>input</code> element
    still exists which receives this name, enabling native form submission.
</p>

<Heading Level="HeadingLevel.H2">Auto-focus</Heading>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<p>
    When <code>Inline</code> is <code>true</code>, this sets the <code>AutoFocus</code> of the hue
    slider.
</p>

<Heading Level="HeadingLevel.H2">Methods</Heading>

<p>
    The <code>Clear</code> method will clear the current value. For non-nullable types, this will
    result in the default value (transparent when alpha is allowed, and black when it isn't).
</p>

<p>
    The <code>FocusAsync</code> method will give the input focus. When <code>Inline</code> is
    <code>true</code>, this sets the focus on the hue slider.
</p>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <ColorInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" />
                <ColorInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="filled" />
                <ColorInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <ColorInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" />
                <ColorInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="filled" />
                <ColorInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <ColorInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" />
                <ColorInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="filled" />
                <ColorInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" />
    <ColorInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""filled"" />
    <ColorInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" />
    <ColorInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""filled"" />
    <ColorInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <ColorInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" />
    <ColorInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""filled"" />
    <ColorInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the input itself, while the <code>InputAttributes</code> property can be used
    to assign arbitrary attributes to it.
</p>

<Heading Level="HeadingLevel.H3">Validation</Heading>

<p>
    See <a href="./components/validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private string _disabled = "#0f0";
    private string _value1 = "#f00";
    private System.Drawing.Color _value2 = System.Drawing.Color.RebeccaPurple;
    private string _value3 = "#08f";
}
