@page "/components/editor"

<PageTitle>Editor - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Editor</Heading>

<p>
    The <code>Editor</code> component is a rich text editor capable of editing various forms of text
    content.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    The edited text can be bound to a <code>string</code> with the <code>Value</code> property. You
    should bind to a nullable <code>string?</code> if your project supports nullable reference
    types, as an empty input may be represented either by a <code>null</code> value or the empty
    string, depending on the situation.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="w-100">
                <Editor @bind-Value="_value" Label="Bound" />
                <div>Bound value:</div>
                <div>@_value</div>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""w-100"">
    <Editor @bind-Value=""_value"" Label=""Bound"" />
    <div>Bound value:</div>
    <div>@_value</div>
</div>

@code {
    private string? _value = ""Example"";
}")
    </ChildContent>
</Collapse>

<p>
    Normally binding updates occur in response to a <code>blur</code> event, which happens when the
    editor loses focus. If you set the <code>UpdateOnInput</code> property to <code>true</code>,
    updates will occur whenever the input text changes instead. A short debounce interval will be
    applied in this case, to prevent excessive updates.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="w-100">
                <Editor Syntax="EditorSyntax.HTML" @bind-Value="_value2" UpdateOnInput="true" Label="On Input" />
                <div>Bound value:</div>
                <div>@_value2</div>
                <button @onclick="@(_ => _value2 = "updated")">Update</button>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""w-100"">
    <Editor @bind-Value=""_value"" UpdateOnInput=""true"" Label=""On Input"" />
    <div>Bound value:</div>
    <div>@_value</div>
</div>

@code {
    private string? _value = ""Start typing..."";
}")
    </ChildContent>
</Collapse>

<p>
    Note that the <kbd>Tab</kbd> key (and <kbd>Shift</kbd>+<kbd>Tab</kbd>) performs indent
    operations when the editor is focused. To continue tabbing to other elements on the page, first
    press <kbd>Esc</kbd>, then <kbd>Tab</kbd> (or <kbd>Shift</kbd>+<kbd>Tab</kbd>). It is strongly
    recommended that you repeat these instructions on a suitable help page or sidebar, in order to
    assist users who rely on keyboard navigation who may otherwise become "trapped" in the editor.
</p>

<Heading Level="HeadingLevel.H2">Syntax</Heading>

<p>
    To enable syntax highlighting, and advanced features such as code completion and block folding,
    set the <code>Syntax</code> property to one of the available languages:
</p>

<ul class="d-flex flex-wrap gap-3">
    <li>C++</li>
    <li>C#</li>
    <li>CSS</li>
    <li>HTML</li>
    <li>Java</li>
    <li>JavaScript</li>
    <li>JSON</li>
    <li><span style="font-family:'CMU Serif',cmr10,LMRoman10-Regular,'Latin Modern Math','Nimbus Roman No9 L','Times New Roman',Times,serif;">L<span style="text-transform:uppercase;font-size:.75em;vertical-align:.25em;margin-left:-.36em;margin-right:-.15em;line-height:1ex;">a</span>T<span style="text-transform:uppercase;vertical-align:-.25em;margin-left:-.1667em;margin-right:-.125em;line-height:1ex;">e</span>X</span></li>
    <li>Less</li>
    <li>Markdown</li>
    <li>Objective-C</li>
    <li>PHP</li>
    <li>Python</li>
    <li>Sass</li>
    <li>SQL</li>
    <li>TypeScript</li>
</ul>

<p>
    Note that advanced features are not available for all syntaxes.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Editor Label="JavaScript" Syntax="EditorSyntax.JavaScript" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Editor Label=""JavaScript"" Syntax=""EditorSyntax.JavaScript"" />")
    </ChildContent>
</Collapse>

<p>
    The HTML and Markdown syntaxes both offer a toolbar with a variety of common formatting options.
    Controls which do not fit on a single line are hidden by default. The last button on the first
    line of the toolbar toggles an expanded state that shows all available options.
</p>

<p>
    The <code>LockSyntax</code> property defaults to <code>true</code>. If set to
    <code>false</code>, the user will be able to switch the syntax using UI built into the editor.
    It can also be changed programmatically at any time.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Editor LockSyntax="false" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Editor Label=""JavaScript"" LockSyntax=""false"" />")
    </ChildContent>
</Collapse>

<p>
    Note that when switching between most syntaxes, the source text remains unchanged. When
    switching between HTML and Markdown, however, the editor will attempt to automatically convert
    between the two formats.
</p>

<p>
    Switching between HTML and Markdown is not usually a reversible round-trip operation, even if
    the content isn't edited in between. Rendering markdown to HTML, then parsing HTML as markdown
    (or vice versa), does not always result in the original text. This is especially true if the
    content contains any markup which can't be represented in basic markdown syntax.
</p>

<Heading Level="HeadingLevel.H2">WYSIWYG</Heading>

<p>
    Both HTML and Markdown syntax offer a <abbr title="what you see is what you get">WYSIWYG</abbr>
    mode (enabled by default). You can set the initial mode with the <code>EditorMode</code>
    property, and change it programmatically with the <code>SetModeAync</code> method.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="w-100">
                <Editor Label="HTML" Syntax="EditorSyntax.HTML" />
                <Editor Label="Markdown" Syntax="EditorSyntax.Markdown" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""w-100"">
    <Editor Label=""HTML"" Syntax=""EditorSyntax.HTML"" />
    <Editor Label=""Markdown"" Syntax=""EditorSyntax.Markdown"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that switching modes clears the undo/redo history.
</p>

<p>
    If you set the <code>LockEditMode</code> property to <code>true</code>, the UI for switching
    between WYSIWYG and source editing modes is hidden, and the mode can only be changed
    programmatically.
</p>

<p>
    Toggling between WYSIWYG and source modes is a not always a reversible round-trip operation,
    even if the content isn't edited in between. The renderer and parser can sometimes introduce
    slight differences when run consecutively on the same content.
</p>

<p>
    Note that the WYSIWYG editor disallows the <code>iframe</code>, <code>noscript</code>,
    <code>object</code>, and <code>script</code> elements. If they are included in source edit mode,
    switching to WYSIWYG mode will render these tags as simple <code>div</code> elements, with the
    original source as a comment inside that <code>div</code> (this will be invisible in the WYSIWYG
    editor, but you can see this content in the browser's developer tools). The original content
    will be restored when switching back to source edit mode. If a complete HTML document is written
    in the source editor (i.e. an <code>html</code> tag with a <code>head</code> and
    <code>body</code>), the <code>head</code> element's content will also be replaced by a comment
    in the WYSIWYG editor, in order to avoid interfering with the page's own styles and properties.
</p>

<p>
    Note also that interactive and input-related elements are only partially supported in WYSIWYG
    mode. Such elements may display properly in WYSIWYG mode, and it may be possible to drag them to
    different locations within the document, but using them in WYSIWYG mode should be considered an
    unsupported use case. If your use case calls for editing HTML with interactive or form elements,
    it may be best to set <code>EditorMode</code> to <code>Text</code>, and
    <code>LockEditMode</code> to <code>true</code>.
</p>

<Heading Level="HeadingLevel.H2">Read-only</Heading>

<p>
    The editor can be set as read-only by setting the <code>ReadOnly</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Editor @bind-Value="_readOnly" Label="Read only" ReadOnly="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Editor @bind-Value=""_readOnly"" Label=""Read only"" ReadOnly=""true"" />

@code {
    private string? _readOnly = ""Can select but not edit"";
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Label</Heading>

<p>
    The <code>Label</code> property assigns a label to the editor.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Editor Label="Label" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Editor Label=""Label"" />")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Placeholder</Heading>

<p>
    The <code>Placeholder</code> property assigns a placeholder to the editor.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Editor Placeholder="Placeholder" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Editor Placeholder=""Placeholder"" />")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Required</Heading>

<p>
    Set the <code>Required</code> property to specify whether the input is required. This adds an
    indicator to the label, and automatic verification rules which warn the user when the input is
    empty. The warning will only appear after the user has interacted with the input for the first
    time.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Editor Label="Required" Required="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Editor Label=""Required"" Required=""true"" />")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Tab index</Heading>

<p>
    Set the <code>TabIndex</code> property to specify the value of the editor's <code>tabindex</code>
    attribute.
</p>

<Heading Level="HeadingLevel.H2">Name</Heading>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<Heading Level="HeadingLevel.H2">Auto-focus</Heading>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the editor
    on page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<Heading Level="HeadingLevel.H2">Typing assistance</Heading>

<p>
    You can set the <code>Spellcheck</code> property to a boolean value to turn native browser
    spell-checking on or off. This only applies in WYSIWYG mode. It is enabled by default.
</p>

<Heading Level="HeadingLevel.H2">Methods</Heading>

<p>
    The <code>ClearAsync</code> method will clear the current input text.
</p>

<p>
    The <code>FocusAsync</code> method will give the editor focus.
</p>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    The <code>Height</code> property can be used to set the height of the editor. It accepts any
    valid CSS size string, such as "200px" or "10rem." By default the editor will grow to fit its
    content.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Editor Height="20rem" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Editor Height=""20rem"" />")
    </ChildContent>
</Collapse>

<p>
    The <code>MaxHeight</code> property can similarly be used to set the maximum height of the
    editor.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <Editor MaxHeight="5rem" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Editor MaxHeight=""5rem"" />")
    </ChildContent>
</Collapse>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="w-100">
                <Editor Label="Primary" Syntax="EditorSyntax.HTML" ThemeColor="ThemeColor.Primary" />
                <Editor Label="Secondary" Syntax="EditorSyntax.HTML" ThemeColor="ThemeColor.Secondary" />
                <Editor Label="Tertiary" Syntax="EditorSyntax.HTML" ThemeColor="ThemeColor.Tertiary" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""w-100"">
    <Editor Label=""Primary"" Syntax=""EditorSyntax.HTML"" ThemeColor=""ThemeColor.Primary"" />
    <Editor Label=""Secondary"" Syntax=""EditorSyntax.HTML"" ThemeColor=""ThemeColor.Secondary"" />
    <Editor Label=""Tertiary"" Syntax=""EditorSyntax.HTML"" ThemeColor=""ThemeColor.Tertiary"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Validation</Heading>

<p>
    See <a href="./components/validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private string? _readOnly = "Can select but not edit";
    private string? _value = "Example";
    private string? _value2 = "Start typing...";
}
