@page "/components/switch"

<PageTitle>Switch - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Switch</Heading>

<p>
    The <code>Switch</code> component is a rich wrapper for an input element with the checkbox
    type, and uses a toggle-switch appearance instead of a standard checkbox.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    Switches can be presented with or without a label.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Switch />
                <Switch Label="Label" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Switch />
    <Switch Label=""Label"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    A switch's <code>Value</code> property can be bound to any <code>bool</code> expression.
    Nullable <code>bool?</code> values are not permitted, since a toggle switch cannot represent a
    <code>null</code> state.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Switch @bind-Value="_value1" Label="Bool" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Switch @bind-Value=""_value1"" Label=""Bool"" />
</div>

@code {
    private bool _value1 = true;
}")
    </ChildContent>
</Collapse>

<p>
    You can assign an additional <code>UncheckedLabel</code>, which will appear to the left side of
    the switch, for switches whose two states require individual labels.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Switch Label="Hot" UncheckedLabel="Cold" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Switch Label=""Hot"" UncheckedLabel=""Cold"" />")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Disabled & read-only</Heading>

<p>
    The input can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Switch @bind-Value="_value2" Label="Disabled" Disabled="true" />
                <Switch @bind-Value="_value2" Label="Read-only" ReadOnly="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Switch @bind-Value=""_value"" Label=""Disabled"" Disabled=""true"" />
    <Switch @bind-Value=""_value"" Label=""Read-only"" ReadOnly=""true"" />
</div>

@code {
    private int _value = true;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Required</Heading>

<p>
    Set the <code>Required</code> property to specify whether a <copde>true</copde> value is
    required. This adds an indicator to the label, and automatic verification rules which warn the
    user when the input is <code>null</code>. The warning will only appear after the user has
    interacted with the input for the first time.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Switch Label="Required" Required="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Switch Label=""Required"" Required=""true"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Tab index</Heading>

<p>
    Set the <code>TabIndex</code> property to specify the value of the input's <code>tabindex</code>
    attribute.
</p>

<Heading Level="HeadingLevel.H2">Name</Heading>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<Heading Level="HeadingLevel.H2">Auto-focus</Heading>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<Heading Level="HeadingLevel.H2">Methods</Heading>

<p>
    The <code>FocusAsync</code> method will give the input focus.
</p>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Switch @bind-Value="_value3" Label="Primary" ThemeColor="ThemeColor.Primary" />
                <Switch @bind-Value="_value4" Label="Secondary" ThemeColor="ThemeColor.Secondary" />
                <Switch @bind-Value="_value5" Label="Tertiary" ThemeColor="ThemeColor.Tertiary" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Switch @bind-Value=""_value1"" Label=""Primary"" ThemeColor=""ThemeColor.Primary"" />
    <Switch @bind-Value=""_value2"" Label=""Secondary"" ThemeColor=""ThemeColor.Secondary"" />
    <Switch @bind-Value=""_value3"" Label=""Tertiary"" ThemeColor=""ThemeColor.Tertiary"" />
</div>

@code {
    private bool _value1 = true;
    private bool _value2 = true;
    private bool _value3 = true;
}")
    </ChildContent>
</Collapse>

<p>
    You can add the <code>dense</code> class to reduce vertical padding.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <Switch Class="dense" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<Switch Class=""dense"" />")
    </ChildContent>
</Collapse>

<p>
    The <code>CheckedIcon</code> and <code>UncheckedIcon</code> properties can be used to place an
    icon in the toggle thumb when it has a certain state.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row center-items gap-2">
                <Switch CheckedIcon="done" UncheckedIcon="not_interested" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row center-items gap-2"">
    <Switch CheckedIcon=""done"" UncheckedIcon=""not_interested"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the input itself, while the <code>InputAttributes</code> property can be used
    to assign arbitrary attributes to it.
</p>

<Heading Level="HeadingLevel.H3">Validation</Heading>

<p>
    See <a href="./components/validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private bool _value1 = true;
    private bool _value2 = true;
    private bool _value3 = true;
    private bool _value4 = true;
    private bool _value5 = true;
}
