@page "/components/numeric-input"

<PageTitle>Numeric Input - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Numeric Input</Heading>

<p>
    The <code>NumericInput</code> component is a rich wrapper for an input element that binds to a
    numeric type.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    Numeric inputs come in three styles. The default uses a simple underline. Add the
    <code>filled</code> class to give it a shaded background. Add the <code>outlined</code> class to
    use a full outline.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Normal" />
                <NumericInput TValue="int" Label="Filled" Class="filled" />
                <NumericInput TValue="int" Label="Outlined" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Normal"" />
    <NumericInput TValue=""int"" Label=""Filled"" Class=""filled"" />
    <NumericInput TValue=""int"" Label=""Outlined"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can also add the <code>dense</code> class to any variant to reduce the margins and padding.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Normal" Class="dense" />
                <NumericInput TValue="int" Label="Filled" Class="filled dense" />
                <NumericInput TValue="int" Label="Outlined" Class="outlined dense" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Normal"" Class=""dense"" />
    <NumericInput TValue=""int"" Label=""Filled"" Class=""filled dense"" />
    <NumericInput TValue=""int"" Label=""Outlined"" Class=""outlined dense"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Bind the input value to any numeric value with the <code>Value</code> property. All standard
    numeric types are valid, as well as their nullable counterparts.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput @bind-Value="_value1" Label="Int" Class="w-100" />
                <span>Bound value: @_value1</span>
                <NumericInput @bind-Value="_value2" Label="Double" Class="w-100" />
                <span>Bound value: @_value2</span>
                <NumericInput @bind-Value="_value3" Label="Byte" Class="w-100" />
                <span>Bound value: @_value3</span>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput @bind-Value=""_value1"" Label=""Int"" Class=""w-100"" />
    <span>Bound value: @_value1</span>
    <NumericInput @bind-Value=""_value2"" Label=""Double"" Class=""w-100"" />
    <span>Bound value: @_value2</span>
    <NumericInput @bind-Value=""_value3"" Label=""Byte"" Class=""w-100"" />
    <span>Bound value: @_value3</span>
</div>

@code {
    private int _value1 = -2;
    private double _value2 = 4.5;
    private byte _value3;
}")
    </ChildContent>
</Collapse>

<p>
    The input understands most number formatting, including group separators, positive signs,
    negative signs and parenthesis for signed types, and decimal separators and exponential notation
    for floating-point types. It even accepts (and ignores) currency symbols, although in most cases
    you will need to specify a culture with the <code>FormatProvider</code> property, since the
    invariant culture uses the international currency symbol: ¤.
</p>

<p>
    When bound to a floating-point type, it will even recognize the terms "Infinity" and "-Infinity"
    for infinite values, and "NaN" for not-a-number values (none of these terms are case-sensitive).
    Entering input which does not evaluate to a valid number results in the input being reset to the
    last valid value, ensuring that the user can never mistakenly attempt to submit completely
    invalid input.
</p>

<p>
    Note that when bound to a nullable type, clearing the input results in a <code>null</code>
    value. Clearing the input when bound to a non-nullable type results in the default value (zero).
</p>

<p>
    Normally binding updates occur in response to the input element's <code>onchange</code> event,
    which fires when the input loses focus, and when the enter key is pressed. If you set the
    <code>UpdateOnInput</code> property to <code>true</code>, updates will occur in response to the
    <code>oninput</code> event instead, which fires every time the input value changes.
</p>

<p>
    If you need to update as the user types, but want to avoid excessive calls, you can set the
    <code>UpdateOnInputDebounce</code> property to a number of milliseconds that the component will
    wait before updating the bound value.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput @bind-Value="_value4" Label="On Change" HelpText="@_value4.ToString()" />
                <NumericInput @bind-Value="_value5" UpdateOnInput="true" Label="On Input" HelpText="@_value5.ToString()" />
                <NumericInput @bind-Value="_value6" UpdateOnInput="true" UpdateOnInputDebounce="500" Label="Debounced" HelpText="@_value6.ToString()" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput @bind-Value=""_value1"" Label=""On Change"" HelpText=""@_value1.ToString()"" />
    <NumericInput @bind-Value=""_value2"" UpdateOnInput=""true"" Label=""On Input"" HelpText=""@_value2.ToString()"" />
    <NumericInput @bind-Value=""_value3"" UpdateOnInput=""true"" UpdateOnInputDebounce=""500"" Label=""Debounced"" HelpText=""@_value3.ToString()"" />
</div>

@code {
    private int _value1;
    private int _value2;
    private int _value3;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Min & Max</Heading>

<p>
    The <code>Min</code> and <code>Max</code> properties specify the allowed limits for the value.
    When unset, the type's own <code>MinValue</code> and <code>MaxValue</code> are used.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="double" Label="5-8" Min="5" Max="8" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""double"" Label=""5-8"" Min=""5"" Max=""8"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Step</Heading>

<p>
    The <code>Step</code> property specifies the amount by which the value increases or decreases
    when the stepper buttons are used, and also the precision allowed. By default, the steppers
    always change the value by 1, but floating-point types allow any degree of precision.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="double" Label="Default double" HelpText="Try typing a fractional value" />
                <NumericInput TValue="double" Label="Step 0.1" Step="0.1" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""double"" Label=""Default double"" HelpText=""Try typing a fractional value"" />
    <NumericInput TValue=""double"" Label=""Step 0.1"" Step=""0.1"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    If your <code>Min</code> value is set to a non-integral number, it will be used as the basis to
    which <code>Step</code> is added to determine allowed values.
</p>

<Heading Level="HeadingLevel.H3">Floating point errors</Heading>

<p>
    Floating point numbers like <code>decimal</code>, <code>double</code>, and <code>float</code>
    can produce precision errors during math operations, including the addition and subtraction
    performed by the steppers.
</p>

<p>
    When <code>Step</code> is a specific value, the display formats the underlying value with the
    specified number of decimal places (unless you explicitly override the <code>Format</code>
    property). However, when <code>Step</code> defaults to "any" you may see surprising, long tails
    of decimal places after incrementing or decrementing the value.
</p>

<Heading Level="HeadingLevel.H2">Disabled & read-only</Heading>

<p>
    The input can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput @bind-Value="_disabled" Label="Disabled" Disabled="true" />
                <NumericInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="filled" />
                <NumericInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="outlined" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <NumericInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" />
                <NumericInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="filled" />
                <NumericInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" />
    <NumericInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""filled"" />
    <NumericInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""outlined"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <NumericInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" />
    <NumericInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""filled"" />
    <NumericInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""outlined"" />
</div>

@code {
    private int _disabled = 3;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Label</Heading>

<p>
    The <code>Label</code> property assigns a label to the input. The label will appear within the
    input like a placeholder when it is empty and does not have focus.
</p>

<p>
    Note that only nullable types allow an empty value.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int?" Label="Label" />
                <NumericInput TValue="int" Label="Label" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int?"" Label=""Label"" />
    <NumericInput TValue=""int"" Label=""Label"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Help text</Heading>

<p>
    You can supply help text for the field with the <code>HelpText</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Normal" HelpText="Some help text" />
                <NumericInput TValue="int" Label="Filled" HelpText="Some help text" Class="filled" />
                <NumericInput TValue="int" Label="Outlined" HelpText="Some help text" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Normal"" HelpText=""Some help text"" />
    <NumericInput TValue=""int"" Label=""Filled"" HelpText=""Some help text"" Class=""filled"" />
    <NumericInput TValue=""int"" Label=""Outlined"" HelpText=""Some help text"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can provide markup content for the help text by using the <code>HelpTextContent</code>
    property instead (which overrides <code>HelpText</code>).
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Normal" HelpTextContent="@(new MarkupString("See the <a href=\"./\">doc page</a>"))" />
                <NumericInput TValue="int" Label="Filled" HelpTextContent="@(new MarkupString("See the <a href=\"./\">doc page</a>"))" Class="filled" />
                <NumericInput TValue="int" Label="Outlined" HelpTextContent="@(new MarkupString("See the <a href=\"./\">doc page</a>"))" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Normal"" HelpTextContent=""@(new MarkupString(""See the <a href=\""./\"">doc page</a>""))"" />
    <NumericInput TValue=""int"" Label=""Filled"" HelpTextContent=""@(new MarkupString(""See the <a href=\""./\"">doc page</a>""))"" Class=""filled"" />
    <NumericInput TValue=""int"" Label=""Outlined"" HelpTextContent=""@(new MarkupString(""See the <a href=\""./\"">doc page</a>""))"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can hide the help text until the input has focus by setting the
    <code>DisplayHelpTextOnFocus</code> property to <code>true</code>.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Normal" HelpText="Some help text" DisplayHelpTextOnFocus="true" />
                <NumericInput TValue="int" Label="Filled" HelpText="Some help text" DisplayHelpTextOnFocus="true" Class="filled" />
                <NumericInput TValue="int" Label="Outlined" HelpText="Some help text" DisplayHelpTextOnFocus="true" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Normal"" HelpText=""Some help text"" DisplayHelpTextOnFocus=""true"" />
    <NumericInput TValue=""int"" Label=""Filled"" HelpText=""Some help text"" DisplayHelpTextOnFocus=""true"" Class=""filled"" />
    <NumericInput TValue=""int"" Label=""Outlined"" HelpText=""Some help text"" DisplayHelpTextOnFocus=""true"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that help text is replaced by any field validation errors.
</p>

<Heading Level="HeadingLevel.H2">Required</Heading>

<p>
    Set the <code>Required</code> property to specify whether the input is required. This adds an
    indicator to the label, and automatic verification rules which warn the user when the input is
    empty. The warning will only appear after the user has interacted with the input for the first
    time.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int?" Label="Required" Required="true" />
                <NumericInput TValue="int?" Label="Required" Required="true" Class="filled" />
                <NumericInput TValue="int?" Label="Required" Required="true" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int?"" Label=""Required"" Required=""true"" />
    <NumericInput TValue=""int?"" Label=""Required"" Required=""true"" Class=""filled"" />
    <NumericInput TValue=""int?"" Label=""Required"" Required=""true"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that value types will always have a value. A nullable type permits the input to be cleared,
    however (which sets a <code>null</code> value).
</p>

<Heading Level="HeadingLevel.H2">Tab index</Heading>

<p>
    Set the <code>TabIndex</code> property to specify the value of the input's <code>tabindex</code>
    attribute.
</p>

<Heading Level="HeadingLevel.H2">Name</Heading>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<Heading Level="HeadingLevel.H2">Auto-focus</Heading>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<Heading Level="HeadingLevel.H2">Typing assistance</Heading>

<p>
    You can set the <code>Autocomplete</code> property to a boolean value to set the attribute of
    the same name on the input. You can also assign <code>null</code> (the default value), which
    uses the browser's default behavior.
</p>

<Heading Level="HeadingLevel.H2">Methods</Heading>

<p>
    The <code>Clear</code> method will clear the current input text. For non-nullable types, this
    will result in the default value (zero).
</p>

<p>
    The <code>FocusAsync</code> method will give the input focus.
</p>

<p>
    The <code>SelectAsync</code> method will select all the current input text.
</p>

<p>
    The <code>SelectRangeAsync</code> method accepts a start and optional end index, and will select
    the input text in that range. If the <code>end</code> parameter is omitted, everything from the
    start index to the end of the input is selected.
</p>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" />
                <NumericInput TValue="int" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="filled" />
                <NumericInput TValue="int" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" />
                <NumericInput TValue="int" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="filled" />
                <NumericInput TValue="int" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" />
                <NumericInput TValue="int" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="filled" />
                <NumericInput TValue="int" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" />
    <NumericInput TValue=""int"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""filled"" />
    <NumericInput TValue=""int"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" />
    <NumericInput TValue=""int"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""filled"" />
    <NumericInput TValue=""int"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" />
    <NumericInput TValue=""int"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""filled"" />
    <NumericInput TValue=""int"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the input itself, while the <code>InputAttributes</code> property can be used
    to assign arbitrary attributes to it.
</p>

<p>
    The <code>ShowStepButtons</code> property can be set to <code>false</code> to remove the up/down
    stepper buttons. You can also set the <code>StepDownIcon</code> and <code>StepUpIcon</code>
    properties to configure the icons used for the buttons.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="No Steppers" ShowStepButtons="false" />
                <NumericInput TValue="int" Label="Custom Steppers" StepDownIcon="arrow_drop_down" StepUpIcon="arrow_drop_up" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""No Steppers"" ShowStepButtons=""false"" />
    <NumericInput TValue=""int"" Label=""Custom Steppers"" StepDownIcon=""arrow_drop_down"" StepUpIcon=""arrow_drop_up"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    The <code>FormatProvider</code> property can be set to any <code>IFormatProvider</code> (such as
    a <code>CultureInfo</code> instance). This format provider will be used both to format the
    displayed value, and to parse user input.
</p>

<p>
    The <code>Format</code> property can be set to any <a
    href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/standard-numeric-format-strings">standard</a>
    or <a
    href="https://docs.microsoft.com/en-us/dotnet/standard/base-types/custom-numeric-format-strings">custom
    numeric format string</a> supported for the bound numeric type. This format will be used to
    format the displayed value.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput @bind-Value="_value7" Label="en-US" Format="F2" FormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("en-US")" Class="w-100" />
                <span>Bound value: @_value7</span>
                <NumericInput @bind-Value="_value8" Label="de-DE" Format="F2" FormatProvider="@System.Globalization.CultureInfo.GetCultureInfo("de-DE")" Class="w-100" />
                <span>Bound value: @_value8</span>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput @bind-Value=""_value1"" Label=""en-US"" Format=""F2"" FormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""en-US"")"" Class=""w-100"" />
    <span>Bound value: @_value1</span>
    <NumericInput @bind-Value=""_value2"" Label=""de-DE"" Format=""F2"" FormatProvider=""@System.Globalization.CultureInfo.GetCultureInfo(""de-DE"")"" Class=""w-100"" />
    <span>Bound value: @_value2</span>
</div>

@code {
    private double _value1 = 1234.56789;
    private double _value2 = 1234.56789;
}")
    </ChildContent>
</Collapse>

<p>
    Note that the value set to a <code>form</code> element on submission will use the standard
    number format for HTML input elements, regardless of the input or display format chosen. This
    can help with binding and serialization when using standard form submission mechanisms.
</p>

<Heading Level="HeadingLevel.H3">Prefix</Heading>

<p>
    You can add custom content before the input.
</p>

<p>
    To add an icon before the input text, set the <code>PrefixIcon</code> property to the name of
    the icon.
</p>

<p>
    To add text before the input text, set the <code>PrefixText</code> property. If both
    <code>PrefixText</code> and <code>PrefixIcon</code> have been set, the icon will appear first.
</p>

<p>
    You can take complete control of the content before the input with the <code>PrefixContent
    RenderFragment</code>, which receives the current value as a context parameter. If you supply
    <code>PrefixContent</code>, <code>PrefixText</code> and <code>PrefixIcon</code> are ignored.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Idea" PrefixIcon="lightbulb" />
                <NumericInput TValue="int" Label="Amount" PrefixText="$" />
                <NumericInput TValue="int" Label="Click">
                    <PrefixContent>
                        <button class="@_class" @onclick="@(_ => _class = "btn btn-icon success")">
                            <tf-icon>verified</tf-icon>
                        </button>
                    </PrefixContent>
                </NumericInput>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Idea"" PrefixIcon=""lightbulb"" />
    <NumericInput TValue=""int"" Label=""Amount"" PrefixText=""$"" />
    <NumericInput TValue=""int"" Label=""Click"">
        <PrefixContent>
            <button class=""@_class"" @onclick=""@(_ => _class = ""btn btn-icon success"")"">
                <tf-icon>verified</tf-icon>
            </button>
        </PrefixContent>
    </NumericInput>
</div>

@code {
    private string _class = ""btn btn-icon"";
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Postfix</Heading>

<p>
    You can also add custom content after the input.
</p>

<p>
    To add an icon after the input text, set the <code>PostfixIcon</code> property to the name of
    the icon.
</p>

<p>
    To add text after the input text, set the <code>PostfixText</code> property. If both
    <code>PostfixText</code> and <code>PostfixIcon</code> have been set, the icon will appear first.
</p>

<p>
    You can take complete control of the content after the input with the <code>PostfixContent
    RenderFragment</code>, which receives the current value as a context parameter. If you supply
    <code>PostfixContent</code>, <code>PostfixText</code> and <code>PostfixIcon</code> are ignored.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <NumericInput TValue="int" Label="Idea" PostfixIcon="lightbulb" />
                <NumericInput TValue="int" Label="Program" PostfixText=".exe" />
                <NumericInput TValue="int" Label="Click">
                    <PostfixContent>
                        <button class="@_class2" @onclick="@(_ => _class2 = "btn btn-icon success")">
                            <tf-icon>verified</tf-icon>
                        </button>
                    </PostfixContent>
                </NumericInput>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <NumericInput TValue=""int"" Label=""Idea"" PostfixIcon=""lightbulb"" />
    <NumericInput TValue=""int"" Label=""Program"" PostfixText="".exe"" />
    <NumericInput TValue=""int"" Label=""Click"">
        <PostfixContent>
            <button class=""@_class"" @onclick=""@(_ => _class = ""btn btn-icon success"")"">
                <tf-icon>verified</tf-icon>
            </button>
        </PostfixContent>
    </NumericInput>
</div>

@code {
    private string _class = ""btn btn-icon"";
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H3">Validation</Heading>

<p>
    See <a href="./components/validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private string _class = "btn btn-icon";
    private string _class2 = "btn btn-icon";
    private int _disabled = 3;
    private int _value1 = -2;
    private double _value2 = 4.5;
    private byte _value3;
    private int _value4;
    private int _value5;
    private int _value6;
    private double _value7 = 1234.56789;
    private double _value8 = 1234.56789;
}
