@page "/components/validation"

<PageTitle>Validation - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Validation</Heading>

<p>
    Tavenem Blazor Framework form components support three methods of form validation.
</p>

<Heading Level="HeadingLevel.H2">The Form component</Heading>

<p>
    The <code>Form</code> component inherits from the built-in Blazor <code>EditForm</code>
    component, and supports all the <a
    href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation">validation
    capabilities</a> that component provides, including <a
    href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation">data annotations</a>
    and <a
    href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation#validator-components">validator
    components</a>. It also supports the built-in <code>ValidationSummary</code> and
    <code>ValidationMessage</code> components.
</p>

<p>
    In addition, the Tavenem Blazor Framework <code>Form</code> component provides a
    <code>Validation</code> property. This function receives the bound model (if there is one,
    including the model assigned to an explicit <code>EditContext</code>) and should return an
    enumeration of validation messages. The <code>AutoValidate</code> property controls
    whether this function is invoked each time a contained field changes (it is <code>true</code> by
    default).
</p>

<p>
    The <code>Form</code> component also provides a <code>ValidateAsync</code> method which
    initiates validation on all fields, and invokes the <code>Validation</code> function. It returns
    <code>true</code> if no validation messages are present for the form or any field, and
    <code>false</code> if any messages are found. If <code>AutoValidate</code> is set to
    <code>false</code>, the <code>Validate</code> function will only be invoked when this method is
    called.
</p>

<p>
    The <code>GetValidationMessages</code> method can be used to enumerate all the current
    validation messages for a <code>Form</code>, both those generated by the <code>Validation</code>
    function, and those generated by individual input components.
</p>

<Heading Level="HeadingLevel.H2">Blazor EditForm support</Heading>

<p>
    Tavenem Blazor Framework form components are designed to integrate fully with Blazor's built-in
    <a
    href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation"><code>EditForm</code>
    component</a>. If you are already using <code>EditForm</code>s for validation, you can start
    using Tavenem Blazor Framework form components alongside the built-in Blazor form components, or
    as replacements for the built-in components.
</p>

<Heading Level="HeadingLevel.H2">Individual validation</Heading>

<p>
    Tavenem Blazor Framework form components can also be validated individually. This can be useful
    when you wish to use a form component on its own, with no containing form element at all.
</p>

<p>
    Each Tavenem Blazor Framework form component has a <code>Validation</code> property, similar to
    the <code>Validation</code> property on <code>Form</code> itself. It receives the input's
    current bound value, the parent <code>EditContext</code> (if any), and should return an
    enumeration of validation messages. This function works in addition to any validation associated
    with a parent <code>Form</code> or <code>EditForm</code>. It is automatically invoked whenever
    the input's value changes, and whenever a parent <code>EditContext</code> requests validation.
</p>

<p>
    Tavenem Blazor Framework form components also have a <code>ValidateAsync</code> method, which
    can be used to perform manual validation of that component. This allows the component to be
    validated outside the context of a parent <code>Form</code> or <code>EditForm</code>.
</p>

<p>
    Tavenem Blazor Framework form components all have an <code>IsValid</code> property as well,
    which reflects the most recent result of any validation operation. This property is bindable,
    although bear in mind that if you set its value programmatically, it will be overwritten
    whenever the field's value changes to reflect its actual validity.
</p>
