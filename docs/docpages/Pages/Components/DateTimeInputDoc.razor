@page "/components/datetime-input"

<PageTitle>DateTime Input - Tavenem Blazor Framework</PageTitle>

<h1>DateTime Input</h1>

<p>
    The <code>DateTimeInput</code> component is a rich wrapper for an input element that binds to a
    date or time.
</p>

<p>
    It provides a calendar with multiple views, a clock, and can be configured to allow the
    selection of a time zone.
</p>

<p>
    Note: like all Tavenem Framework picker components, this control cannot be used on static
    server-side rendered pages. It will always be disabled when rendered statically. This is because
    it relies on interactivity to operate. When <em>pre</em>rendered server-side, it will be
    disabled during the prerender pass, then become enabled when interactivity becomes available.
</p>

<h2>Basics</h2>

<p>
    Date-time inputs come in three styles. The default uses a simple underline. Add the
    <code>filled</code> class to give it a shaded background. Add the <code>outlined</code> class to
    use a full outline.
</p>

<Collapse Id="ce-1" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <DateTimeInput TValue="string" Label="Normal" />
            <DateTimeInput TValue="string" Label="Filled" Class="filled" />
            <DateTimeInput TValue="string" Label="Outlined" Class="outlined" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Normal"" />
    <DateTimeInput TValue=""string"" Label=""Filled"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Outlined"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can also add the <code>dense</code> class to any variant to reduce the margins and padding.
</p>

<Collapse Id="ce-2" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <DateTimeInput TValue="string" Label="Normal" Class="dense" />
            <DateTimeInput TValue="string" Label="Filled" Class="filled dense" />
            <DateTimeInput TValue="string" Label="Outlined" Class="outlined dense" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Normal"" Class=""dense"" />
    <DateTimeInput TValue=""string"" Label=""Filled"" Class=""filled dense"" />
    <DateTimeInput TValue=""string"" Label=""Outlined"" Class=""outlined dense"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    A <code>DateTimeInput</code>'s <code>Value</code> property can be bound to a string, a
    <code>DateTime</code>, a <code>DateTimeOffset</code>, a <code>DateOnly</code>, or a
    <code>TimeOnly</code> (including nullable versions).
</p>

<p>
    The underlying <code>input</code> element will always use an <a
    href="https://en.wikipedia.org/wiki/ISO_8601">ISO 8601</a> string as its value. The specific
    format of the string depends on whether the value includes date, time, or both kinds of
    information, and the <code>DateType</code> parameter:
</p>

<dl>
    <dt><code>DateType.Year</code></dt>
    <dd><code>yyyy</code></dd>
       
    <dt><code>DateType.Month</code></dt>
    <dd><code>yyyy-MM</code></dd>
       
    <dt><code>DateType.Week</code></dt>
    <dd>
        <code>yyyy-Www-D</code>
    </dd>
       
    <dt><code>DateType.Date</code></dt>
    <dd>
        <ul>
            <li>When <code>ShowTime</code> is <code>true</code>: <code>yyyy-MM-ddTHH:mm:ss.fffffff</code></li>
            <li>When it is <code>false</code>: <code>yyyy-MM-dd</code></li>
        </ul>
    </dd>
       
    <dt><code>DateType.None</code></dt>
    <dd>
        <ul>
            <li>When <code>ShowTime</code> is <code>true</code>:
                <ul>
                    <li>When <code>ShowSeconds</code> is <code>true</code>: <code>HH:mm:ss</code></li>
                    <li>When it is <code>false</code>: <code>HH:mm</code></li>
                </ul>
            </li>
            <li>When it is <code>false</code>: <code>yyyy-MM-ddTHH:mm:ss.fffffff</code></li>
        </ul>
    </dd>
</dl>

<p>
    Additionally, time zone information is indicated in the ISO string if any of the
    <code>TimeZone</code>, <code>TimeZoneInfo</code>, or <code>ShowTimeZone</code> properties are
    set.
</p>

<p>
    When binding to a string, any value which can be parsed as a <code>DateTimeOffset</code> is
    accepted as input. Normally the output will be the same as the ISO 8601 string used for the
    underlying <code>input</code> element. However, you can override the default behavior by
    assigning a special converter class to the <code>Converter</code> property which can perform
    bespoke conversions. Only the <code>setter</code> parameter of the converter requires
    implementation, as the <code>getter</code> is not used for date-time pickers.
</p>

<p>
    Note that when bound to a nullable type, clearing the input results in a <code>null</code>
    value. Clearing the input when bound to a non-nullable type results in a default value
    (the current date/time).
</p>

<Collapse Id="ce-3" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <DateTimeInput @bind-Value="_value1" Label="String" HelpText="@($"Bound value: {_value1}")" />
            <DateTimeInput @bind-Value="_value2" Label="DateTime" HelpText="@($"Bound value: {_value2}")" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput @bind-Value=""_value1"" Label=""String"" HelpText=""@($""Bound value: {_value1}"")"" />
    <DateTimeInput @bind-Value=""_value2"" Label=""DateTime"" HelpText=""@($""Bound value: {_value2}"")"" />
</div>

@code {
    private string _value1 = DateTime.Now.ToString();
    private DateTime _value2 = DateTime.Now;
}")
    </ChildContent>
</Collapse>

<h2>Button</h2>

<p>
    If you set the <code>DisplayType</code> property to <code>PickerDisplayType.Button</code> a
    simple button is displayed instead of a full field.
</p>

<Collapse Id="ce-4" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" DisplayType="PickerDisplayType.Button" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" DisplayType=""PickerDisplayType.Button"" />")
    </ChildContent>
</Collapse>

<p>
    The label and any help text or validation messages are not displayed in this style, but the
    button does get a special border color when the input is invalid.
</p>

<p>
    This display style is intended for integration within a toolbar, or a similar compact layout,
    where a full field would not be appropriate. It will usually be good practice to label the
    button in some manner (e.g. with a <a href="./components/tooltip">tooltip</a>), and display any
    help text or validation messages manually in an appropriate place. Otherwise the purpose of the
    button may not be clear to a user, particularly when the selected color is transparent.
</p>

<h2>Inline</h2>

<p>
    If you set the <code>DisplayType</code> property to <code>PickerDisplayType.Inline</code> the
    full picker is displayed in the document flow.
</p>

<Collapse Id="ce-5" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" Label="Inline" DisplayType="PickerDisplayType.Inline" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" Label=""Inline"" DisplayType=""PickerDisplayType.Inline"" />")
    </ChildContent>
</Collapse>

<h2>DateType</h2>

<p>
    The <code>DateType</code> property controls what views are available in the calendar picker, and
    the precision of the data returned.
</p>

<dl>
    <dt><code>DateType.None</code></dt>
    <dd>
        If <code>ShowTime</code> is <code>true</code>, the calendar picker is not shown at all (only
        the time picker).<br />
        If <code>ShowTime</code> is <code>false</code>, or if the bound data type is
        <code>DateOnly</code>, this value is treated as <code>DateType.Date</code>.
    </dd>

    <dt><code>DateType.Year</code></dt>
    <dd>
        The month and date views are disabled. The user is guided to select a year. The ISO 8601
        string value will be that year, and the bound value for a <code>DateTime</code>,
        <code>DateTimeOffset</code>, or <code>DateOnly</code> will be set to the first date in that
        year.
    </dd>
       
    <dt><code>DateType.Month</code></dt>
    <dd>
        The date view is disabled. The user is guided to select a month. The ISO 8601 string value
        will be that year and month, and the bound value for a <code>DateTime</code>,
        <code>DateTimeOffset</code>, or <code>DateOnly</code> will be set to the first date in that
        month.
    </dd>
       
    <dt><code>DateType.Week</code></dt>
    <dd>
        This mode behaves very similarly to <code>DateType.Date</code>, except that week numbers are
        displayed on the calendar. The ISO 8601 string value will be the <a
        href="https://en.wikipedia.org/wiki/ISO_week_date">ISO week year, week number, and weekday
        number</a>. The bound value for a <code>DateTime</code>, <code>DateTimeOffset</code>, or
        <code>DateOnly</code> will be the actual date selected.
    </dd>
       
    <dt><code>DateType.Date</code></dt>
    <dd>
        All views of the calendar are supported, and the user is guided to select a specific date.<br />
        If <code>ShowTime</code> is <code>true</code>, the time picker is also shown.
    </dd>
</dl>

<Collapse Id="ce-6" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-baseline justify-content-center">
            <DateTimeInput TValue="string" DateType="_dateType" />
            <Select Label="Date Type" @bind-Value="_dateType" Options="Enum.GetValues<DateType>()" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" ShowTime=""true"" />
<Select Label=""Date Type"" @bind-Value=""_dateType"" Options=""Enum.GetValues<DateType>()"" />

@code {
    private DateType _dateType = DateType.Date;
}")
    </ChildContent>
</Collapse>

<p>
    Setting <code>ShowTime</code> is unnecessary when the bound data type is <code>TimeOnly</code>,
    and is ignored if the bound data type is <code>DateOnly</code>.
</p>

<h2>Min & Max</h2>

<p>
    Set the <code>Min</code> and <code>Max</code> properties to control the range of dates allowed.
</p>

<p>
    When the bound data type is <code>TimeOnly</code>, only the <code>TimeOfDay</code> portion of
    these properties is observed to determine a range of allowed times.
</p>

<Collapse Id="ce-7" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" Min="DateTime.Today.AddDays(-7)" Max="DateTime.Today" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" Min=""DateTime.Today.AddDays(-7)"" Max=""DateTime.Today"" />")
    </ChildContent>
</Collapse>

<h2>Time</h2>

<p>
    Set the <code>ShowTime</code> property to <code>true</code> to display the time picker controls
    and allow both a date and time to be selected. When <code>DateType</code> has been set to
    <code>None</code>, <em>only</em> the time controls are displayed.
</p>

<p>
    Setting <code>ShowTime</code> is unnecessary when the bound data type is <code>TimeOnly</code>,
    and is ignored if the bound data type is <code>DateOnly</code>.
</p>

<Collapse Id="ce-8" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" ShowTime="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" ShowTime=""true"" />")
    </ChildContent>
</Collapse>

<h2>Time zones</h2>

<p>
    Set the <code>ShowTimeZone</code> property to <code>true</code> to display a time zone select
    control. This is ignored if the bound data type is anything except <code>string</code> or
    <code>DateTimeOffset</code>, or if <code>ShowTime</code> is <code>false</code>.
</p>

<p>
    The <code>TimeZone</code> property can be set to an IANA time zone identifier. This is used even
    when <code>ShowTimeZone</code> is <code>false</code> to control the offset of the underlying
    value when binding to a <code>DateTimeOffset</code>.
</p>

<p>
    The <code>TimeZoneInfo</code> property can be set to a <code>TimeZoneInfo</code> object, which
    automatically sets the <code>TimeZone</code> property to the corresponding identifier, if it can
    be determined. It uses the system's current time zone by default when binding to a
    <code>DateTimeOffset</code>. Note that it is usually preferable to set <code>TimeZone</code>
    directly when possible, since the IANA identifier selected for a given <code>TimeZoneInfo</code>
    object may not always be correct for the user's location.
</p>

<Collapse Id="ce-9" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" ShowTime="true" ShowTimeZone="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" ShowTime=""true"" ShowTimeZone=""true"" />")
    </ChildContent>
</Collapse>

<h2>Calendar</h2>

<p>
    Set the <code>Calendar</code> property to any supported calendar name to control the appearance
    of the picker (but not bound values, which use ISO 8601 formats for maximum
    interoperability). The available calendars depend on the user's browser. See <a
    href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/supportedValuesOf">the
    Intl documentation</a> for more information. Note that even when a user's browser provides a
    calendar, the <code>DateTimeInput</code> component may not provide support for that calendar.
</p>

<p>
    The <code>ShowCalendar</code> property allows the user to select their preferred calendar from
    among the full list of those supported in their own environment.
</p>

<Collapse Id="ce-9" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" ShowCalendar="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" ShowCalendar=""true"" />")
    </ChildContent>
</Collapse>

<h2>Culture</h2>

<p>
    Set the <code>Culture</code> property to a <code>CultureInfo</code> object to control the
    appearance of the picker and the format of display strings (but not bound values, which use ISO
    8601 formats for maximum interoperability).
</p>

<p>
    The <code>Culture</code> property also sets the <code>Calendar</code> property, if it was not
    specified explicitly. It may, however, be helpful to set the <code>ShowCalendar</code> property
    to <code>true</code> when assigning a specific culture, so the user may opt to use a different
    calendar than the one .NET or their browser selects.
</p>

<Collapse Id="ce-10" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <DateTimeInput TValue="string" ShowTime="true" Culture="@(System.Globalization.CultureInfo.GetCultureInfo("zh-Hans"))" />
            <DateTimeInput TValue="string" ShowTime="true" Culture="@(System.Globalization.CultureInfo.GetCultureInfo("ja-JP"))" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" ShowTime=""true"" Culture=""@(System.Globalization.CultureInfo.GetCultureInfo(""zh-Hans""))"" />
    <DateTimeInput TValue=""string"" ShowTime=""true"" Culture=""@(System.Globalization.CultureInfo.GetCultureInfo(""ja-JP""))"" />
</div>")
    </ChildContent>
</Collapse>

<h2>Disabled & read-only</h2>

<p>
    The input can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Id="ce-11" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput @bind-Value="_disabled" Label="Disabled" Disabled="true" />
                <DateTimeInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="filled" />
                <DateTimeInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="outlined" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <DateTimeInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" />
                <DateTimeInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="filled" />
                <DateTimeInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="outlined" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <DateTimeInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Inline="true" />
                <DateTimeInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Inline="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""filled"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""outlined"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <DateTimeInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""filled"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""outlined"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <DateTimeInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Inline=""true"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Inline=""true"" />
</div>

@code {
    private string _disabled = ""#0f0"";
}")
    </ChildContent>
</Collapse>

<h2>Label</h2>

<p>
    The <code>Label</code> property assigns a label to the input. The label will appear within the
    input like a placeholder when it is empty and does not have focus.
</p>

<p>
    Note that while a <code>DateTimeInput</code> bound to a <code>string</code> or a nullable type
    will allow an empty value, one bound to a non-nullable type will never be empty, since the bound
    <code>struct</code> will always have a value.
</p>

<Collapse Id="ce-12" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" Label="Label" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" Label=""Label"" />")
    </ChildContent>
</Collapse>

<h2>Help text</h2>

<p>
    You can supply help text for the field with the <code>HelpText</code> property.
</p>

<Collapse Id="ce-13" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <DateTimeInput TValue="string" Label="Normal" HelpText="Some help text" />
            <DateTimeInput TValue="string" Label="Filled" HelpText="Some help text" Class="filled" />
            <DateTimeInput TValue="string" Label="Outlined" HelpText="Some help text" Class="outlined" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Normal"" HelpText=""Some help text"" />
    <DateTimeInput TValue=""string"" Label=""Filled"" HelpText=""Some help text"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Outlined"" HelpText=""Some help text"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that help text is replaced by any field validation errors.
</p>

<h2>Required</h2>

<p>
    Set the <code>Required</code> property to specify whether the input is required. This adds an
    indicator to the label, and automatic verification rules which warn the user when the input is
    empty. The warning will only appear after the user has interacted with the input for the first
    time.
</p>

<Collapse Id="ce-14" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row fill align-items-center gap-2">
            <DateTimeInput TValue="string" Label="Required" Required="true" />
            <DateTimeInput TValue="string" Label="Required" Required="true" Class="filled" />
            <DateTimeInput TValue="string" Label="Required" Required="true" Class="outlined" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Required"" Required=""true"" />
    <DateTimeInput TValue=""string"" Label=""Required"" Required=""true"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Required"" Required=""true"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that a non-nullable type will always have a value.
</p>

<h2>Tab index</h2>

<p>
    Set the <code>TabIndex</code> property to specify the value of the input's <code>tabindex</code>
    attribute.
</p>

<h2>Name</h2>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<h2>Auto-focus</h2>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<h2>Methods</h2>

<p>
    The <code>Clear</code> method will clear the current value. For non-nullable types, this will
    result in the default value (<code>DateTimeOffset.Now</code>).
</p>

<p>
    The <code>FocusAsync</code> method will give the input focus.
</p>

<h2>Customization</h2>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Id="ce-15" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" />
                <DateTimeInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="filled" />
                <DateTimeInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" />
                <DateTimeInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="filled" />
                <DateTimeInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" />
                <DateTimeInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="filled" />
                <DateTimeInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" />
    <DateTimeInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" />
    <DateTimeInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" />
    <DateTimeInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the input itself, while the <code>InputAttributes</code> property can be used
    to assign arbitrary attributes to it.
</p>

<h2>Validation</h2>

<p>
    See <a href="./components/form#validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private DateType _dateType = DateType.Date;
    private DateTime _disabled = DateTime.Now;
    private string _value1 = DateTime.Now.ToString();
    private DateTime _value2 = DateTime.Now;
}
