@page "/components/syntax-highlighter"

<PageTitle>Highlighter - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Highlighter</Heading>

<p>
    The syntax highlighter component can be used to apply syntax highlighting to preformatted code.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    The <code>SyntaxHighlighter</code> component is a simple <code>div</code> element, and may
    contain any <code>ChildContent</code>. You can configure its behavior with the
    <code>Class</code> and <code>Style</code> properties, as well as attribute splatting. Its real
    function lies in the automatic syntax highlighting it performs on any nested
    <code>&lt;pre&gt;&lt;code&gt;</code> blocks.
</p>

<p>
    Syntax is autodetected when possible, but you can apply a <code>language-&lt;value&gt;</code>
    CSS class on the <code>code</code> element to specify the language of a particular block of
    code. The supported languages are:
</p>
<ul>
    <li>C++ <span class="text-muted">language-cpp</span></li>
    <li>C# <span class="text-muted">language-csharp</span></li>
    <li>CSS</li>
    <li>HTML <span class="text-muted">language-xml</span></li>
    <li>Java</li>
    <li>JavaScript</li>
    <li>JSON</li>
    <li><span style="font-family:'CMU Serif',cmr10,LMRoman10-Regular,'Latin Modern Math','Nimbus Roman No9 L','Times New Roman',Times,serif;">L<span style="text-transform:uppercase;font-size:.75em;vertical-align:.25em;margin-left:-.36em;margin-right:-.15em;line-height:1ex;">a</span>T<span style="text-transform:uppercase;vertical-align:-.25em;margin-left:-.1667em;margin-right:-.125em;line-height:1ex;">e</span>X</span></li>
    <li>Less</li>
    <li>Markdown</li>
    <li>Objective-C <span class="text-muted">language-objectivec</span></li>
    <li>PHP</li>
    <li>Python</li>
    <li>Sass</li>
    <li>SQL</li>
    <li>TypeScript</li>
</ul>

<Collapse IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <SyntaxHighlighter>
                <pre class="codeblock">
                    <code class="language-csharp">
using System.IO.Compression;

#pragma warning disable 414, 3021

namespace MyApplication
{
    [Obsolete("...")]
    class Program : IInterface
    {
        public static List&lt;int&gt; JustDoIt(int count)
        {
            Span&lt;int> numbers = stackalloc int[length];
            Console.WriteLine($"Hello {Name}!");
            return new List&lt;int&gt;(new int[] { 1, 2, 3 })
        }
    }
}
                    </code>
                </pre>
            </SyntaxHighlighter>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<SyntaxHighlighter>
    <pre class=""codeblock"">
        <code class=""language-csharp"">
using System.IO.Compression;

#pragma warning disable 414, 3021

namespace MyApplication
{
    [Obsolete(""..."")]
    class Program : IInterface
    {
        public static List&lt;int&gt; JustDoIt(int count)
        {
            Span&lt;int> numbers = stackalloc int[length];
            Console.WriteLine($""Hello {Name}!"");
            return new List&lt;int&gt;(new int[] { 1, 2, 3 })
        }
    }
}
        </code>
    </pre>
</SyntaxHighlighter>")
    </ChildContent>
</Collapse>

<p>
    You may include multiple <code>&lt;pre&gt;&lt;code&gt;</code> blocks, with varying syntaxes, in
    the same <code>SyntaxHighlighter</code> component, as well as any other content you wish.
</p>
