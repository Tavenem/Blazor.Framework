@page "/components/swipe-target"

<PageTitle>Touch Target - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Touch Target</Heading>

<p>
    The touch target component provides a touch-enabled element which reports touch interactions.
</p>

<Heading Level="HeadingLevel.H2">Swipe</Heading>

<p>
    At the end of a touch interaction which begins and ends a significant distance apart, the
    <code>OnSwipe</code> callback is invoked. It has a <code>SwipeEventArgs</code> parameter which
    includes <code>Direction</code> and <code>Touches</code> parameters.
</p>

<p>
    The <code>Direction</code> parameter is a <code>Flags enum</code> which may indicate any of
    <code>Down</code>, <code>Left</code>, <code>Right</code>, or <code>Up</code>, or a combination
    of directions. It will never indicate two opposite directions at the same time, but may include
    both a horizontal and vertical direction, to indicate diagonal movement.
</p>

<p>
    The <code>Touches</code> parameter indicates the number of touches involved in the interaction
    (i.e. how many fingertips were touching the interactive surface). If the interaction involved a
    different number of touches at different times, this is the maximum number of touches used
    during the interaction.
</p>

<p>
    A swipe which includes significant movement in both horizontal directions will not report either
    left or right, interpreting this as an uncertain movement in that direction, or as a deliberate
    attempt to cancel a motion by reversing course. The same is true for significant movement in
    both vertical directions. If a swipe involves motion in all directions, no swipe event is
    reported at all, interpreting this as either an uncertain interaction, or a deliberate attempt
    to cancel the interaction by reversing course.
</p>

<Heading Level="HeadingLevel.H2">Pinch</Heading>

<p>
    During a touch interaction which involves at least two touch points, the <code>OnPinch</code>
    callback is invoked repeatedly as the touch points move. A small delta is used to throttle
    invocations, but there will still be many invocations to enable smooth zoom effects. It is
    advised that you either ensure that your callback is very fast, or implement your own throttling
    mechanism. The callback has a <code>PinchEventArgs</code> parameter which includes a boolean
    <code>Inward</code> parameter, and a <code>Touches</code> parameter.
</p>

<p>
    The <code>Inward</code> parameter is <code>true</code> when the pinch is from points that were
    father apart to points that are closer to each other, and <code>false</code> when it is from
    points that were closer together to points that are farther from one another.
</p>

<p>
    The <code>Touches</code> parameter indicates the number of touches currenty involved in the
    interaction (i.e. how many fingertips are touching the interactive surface). Note that this may
    change during a pinch interaction, but if it drops below 2 the <code>OnPinch</code> callback
    will not be invoked (since a single point of movement is not a pinch).
</p>

<Heading Level="HeadingLevel.H2">Example</Heading>

<p>
    Pinch and swipe in the exmaple area below on a touch-enabled device to see the events that are
    raised.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="primary filled" style="height:15rem;width:20rem">
                <TouchTarget OnPinch="@OnPinch" OnSwipe="OnSwipe" Style="height:100%;width:100%">
                    @foreach (var msg in _messages)
                    {
                        <span>@msg</span><br>
                    }
                </TouchTarget>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""primary filled"" style=""height:15rem;width:20rem"">
    <TouchTarget OnPinch=""@OnPinch"" OnSwipe=""OnSwipe"" Style=""height:100%;width:100%"">
        @foreach (var msg in _messages)
        {
            <span>@msg</span><br>
        }
    </TouchTarget>
</div>

@code {
    private Queue<string> _messages = new();

    private void OnPinch(PinchEventArgs e)
    {
        if (_messages.Count > 2)
        {
            _messages.Dequeue();
        }
        _messages.Enqueue($""Pinch {(e.Inward ? ""in"" : ""out"")} with {e.Touches} fingers"");
    }

    private void OnSwipe(SwipeEventArgs e)
    {
        if (_messages.Count > 2)
        {
            _messages.Dequeue();
        }
        _messages.Enqueue($""Swipe {(Enum.IsDefined(e.Direction) ? e.Direction.ToString() : ""multiple directions"")} with {e.Touches} fingers"");
    }
}")
    </ChildContent>
</Collapse>

@code {
    private Queue<string> _messages = new();

    private void OnPinch(PinchEventArgs e)
    {
        if (_messages.Count > 2)
        {
            _messages.Dequeue();
        }
        _messages.Enqueue($"Pinch {(e.Inward ? "in" : "out")} with {e.Touches} fingers");
    }

    private void OnSwipe(SwipeEventArgs e)
    {
        if (_messages.Count > 2)
        {
            _messages.Dequeue();
        }
        _messages.Enqueue($"Swipe {(Enum.IsDefined(e.Direction) ? e.Direction.ToString() : "multiple directions")} with {e.Touches} fingers");
    }
}
