@page "/components/pagination"

<PageTitle>Pagination - Tavenem Blazor Framework</PageTitle>

<h1>Pagination</h1>

<p>
    The pagination component provides links to pages from a range.
</p>

<p>
    The <code>CurrentPage</code> property indicates the current page by its 1-based index.
    <code>CurrentPage</code> is a bindable property, and will update when the user changes pages by
    activating any of the page controls.
</p>

<p>
    The <code>PageCount</code> property indicates the total number of pages, and is optional (nullable).
</p>

<CodeExample IsOpen="true" Code="@(@"<Pagination CurrentPage=""3"" PageCount=""5"" />")">
    <Pagination CurrentPage="3" PageCount="5" />
</CodeExample>

<p>
    You can set the <code>Disabled</code> property to <code>true</code> to indicate that the
    pagination is inactive, and doing so will automatically disable the page controls.
</p>

<CodeExample IsOpen="true" Code="@(@"<Pagination CurrentPage=""3"" PageCount=""5"" />")">
    <Pagination CurrentPage="3" PageCount="5" Disabled="true" />
</CodeExample>

<h3>Collapsing excess pages</h3>

<p>
    You can set the <code>MaxPagesDisplayed</code> property to the maximum number of pages you want
    shown. It is set to 5 by default. The component will automatically balance the number of pages
    before and after the current page, so that the total number does not exceed the maximum. Any
    hidden pages will be replaced by an ellipsis.
</p>

<CodeExample IsOpen="true" RowClass="flex-column align-items-center" Code="@(@"<div class=""justify-content-center"">
    <Pagination CurrentPage=""2"" PageCount=""13"" />
</div>
<div class=""justify-content-center"">
    <Pagination CurrentPage=""7"" PageCount=""13"" />
</div>
<div class=""justify-content-center"">
    <Pagination CurrentPage=""11"" PageCount=""13"" />
</div>")">
    <div class="justify-content-center">
        <Pagination CurrentPage="2" PageCount="13" />
    </div>
    <div class="justify-content-center">
        <Pagination CurrentPage="7" PageCount="13" />
    </div>
    <div class="justify-content-center">
        <Pagination CurrentPage="11" PageCount="13" />
    </div>
</CodeExample>

<h3>Indeterminate page count</h3>

<p>
    The <code>PageCount</code> property can be set to <code>null</code> (this is the default). When
    it is <code>null</code>, the pagination component will show all pages before the current page
    normally (since it can assume that those all exist). It will not show any pages <em>after</em>
    the current page, however, since it can't know for certain whether there are any. However, the
    next page and last page buttons will always remain active.
</p>

<p>
    You must assign a callback to the <code>NextRequested</code> and <code>LastRequested</code>
    parameters, which are invoked when those controls are activated for a pagination component with
    a <code>null PageCount</code>. Your paging logic should determine whether there are additional
    pages to load, and if so, update <code>CurrentPage</code> accordingly.
</p>

<p>
    If no additional pages are available, it is recommended that you also set <code>PageCount</code>
    to the value of <code>CurrentPage</code>, so that the "next page" and "last page" control will
    be disabled, indicating to the user that they are already on the last page, and so that further
    navigation will reflect the now-known number of total pages.
</p>

<h3>Persistent State</h3>

<p>
    If the <code>PersistState</code> property is set to <code>true</code>, the component will
    automatically keep track of the current page (and total page count, if that number varies) in
    the URL's query string. This allows the pagination component to preserve its state through page
    refreshes, and also to include the selected page in a bookmark or shared URL.
</p>

<p>
    To see this at work, navigate the following pagination to a page other than 1, then refresh the
    page. Note that any other pagination controls you may have used on this page will revert to
    their default state, but this one will retain its state.
</p>

<CodeExample IsOpen="true" Code="@(@"<Pagination Id=""pd1"" CurrentPage=""3"" PageCount=""5"" PersistState=""true"" />")">
    <Pagination Id="pd1" CurrentPage="3" PageCount="5" PersistState="true" />
</CodeExample>

<p>
    When turning on this feature, it is strongly recommended that the component be assigned a unique,
    stable value in its <code>Id</code> parameter (or via a splatted <code>id</code> attribute).
    This <code>Id</code> will be used in the generated query string to identify the component.
    Although an <code>Id</code> is generated automatically when one is not provided, the automatic
    value cannot be guaranteed to remain the same.
</p>

<p>
    Note that even when a component has <code>PersistState</code> set to <code>false</code>, its
    initial state can still be controlled via query string. The property only controls whether the
    query string is dynamically updated to reflect changing states.
</p>

<h3>Customization</h3>

<p>
    You can set the <code>ThemeColor</code> property to specify a color theme for the component.
</p>

<p>
    You can use the <code>small</code> or <code>large</code> classes to change the size of the
    controls:
</p>

<CodeExample IsOpen="true" RowClass="flex-column align-items-center" Code="@(@"<div class=""justify-content-center"">
    <Pagination Class=""small"" CurrentPage=""3"" PageCount=""5"" />
</div>
<div class=""justify-content-center"">
    <Pagination CurrentPage=""3"" PageCount=""5"" ThemeColor=""ThemeColor.Secondary"" />
</div>
<div class=""justify-content-center"">
    <Pagination Class=""large"" CurrentPage=""3"" PageCount=""5"" ThemeColor=""ThemeColor.Tertiary"" />
</div>")">
    <div class="justify-content-center">
        <Pagination Class="small" CurrentPage="3" PageCount="5" />
    </div>
    <div class="justify-content-center">
        <Pagination CurrentPage="3" PageCount="5" ThemeColor="ThemeColor.Secondary" />
    </div>
    <div class="justify-content-center">
        <Pagination Class="large" CurrentPage="3" PageCount="5" ThemeColor="ThemeColor.Tertiary" />
    </div>
</CodeExample>

<p>
    Use the <code>FirstPageIcon</code>, <code>LastPageIcon</code>, <code>NextPageIcon</code>, and
    <code>PreviousPageIcon</code> properties to customize the controls on either side of the
    pagination component. This is necessary if you replace the default font icon (see <a
    href="./getting-started/installation">Installation</a> for details).
</p>

<p>
    You can use the <code>PageClass</code> and <code>PageStyle</code> properties to customize the
    CSS style of the page controls, including the first, previous, next, and last controls.
</p>
