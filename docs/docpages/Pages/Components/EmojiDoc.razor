@page "/components/emoji"

<PageTitle>Emoji - Tavenem Blazor Framework</PageTitle>

<h1>Emoji</h1>

<p>
    The Tavenem Blazor Framework includes a <a
    href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">web component</a> to easily
    display emoji using a short code.
</p>

<p>
    It also provides an emoji picker component which allows the user to select any single emoji, and
    binds the result to a text input. Also see the <a href="/components/text-input">Text Input</a>,
    <a href="/components/text-area">Text Area</a>, and <a href="/components/editor">Editor</a>
    components, which have optional built-in emoji pickers to easily insert emoji into the text.
</p>

<h2>Basics</h2>

<p>
    To place a single emoji into page content, simply use the <code>tf-emoji</code> custom element,
    with the short code of the emoji as the content. Some emoji have multiple accepted short codes.
    Surrounding colons are optional (e.g. :relaxed: vs. relaxed). Note that short codes for custom
    icons, such as those used on a particular website or in a specific app, are not supported; only
    standard Unicode emoji characters are available. If a short code is unsupported, the text
    renders as-is.
</p>

<p>
    Emoji are rendered with a standardized font stack, to avoid issues with certain systems lacking
    support for all emoji.
</p>

<CodeExample Id="ce-1" Code="@(@"<tf-emoji>relaxed</tf-emoji>
<tf-emoji>alien</tf-emoji>
<tf-emoji>purple_heart</tf-emoji>
<tf-emoji>sloth</tf-emoji>
<tf-emoji>vulcan_salute</tf-emoji>
<tf-emoji>dragon</tf-emoji>
<tf-emoji>brain</tf-emoji>
<tf-emoji>bear</tf-emoji>")" />

<h2>Picker</h2>

<p>The <code>EmojiInput</code> component is a rich wrapper for an input element.</p>

<h3>Basics</h3>

<p>
    The emoji input displays as a button. The button text is the currently-selected emoji (or a
    default if one has not yet been picked), unless set the <code>IconButton</code> property to
    <code>true</code> (which causes the button to show a simple icon).
</p>

<Collapse Id="ce-4" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <EmojiInput />
            <EmojiInput IconButton="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<EmojiInput />
    <EmojiInput IconButton=""true"" />")
    </ChildContent>
</Collapse>

<p>
    The label and any help text or validation messages are not displayed, but the button does get a
    special border color when the input is invalid.
</p>

<p>
    This display style is intended for integration within a toolbar, or a similar compact layout. It
    will usually be good practice to label the button in some manner (e.g. with a <a
    href="./components/tooltip">tooltip</a>), and display any help text or validation messages
    manually in an appropriate place. Otherwise the purpose of the button may not be clear to a
    user.
</p>

<h3>Disabled & read-only</h3>

<p>
    The input can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Id="ce-7" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <EmojiInput Disabled="true" />
            <EmojiInput ReadOnly="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"
<div class=""row mt-3 fill align-items-center gap-2"">
    <EmojiInput Disabled=""true"" />
    <EmojiInput ReadOnly=""true"" />
</div>")
    </ChildContent>
</Collapse>

<h3>Required</h3>

<p>
    Set the <code>Required</code> property to specify whether the input is required. This adds
    automatic verification rules which warn the user when the input is empty. The warning will
    only appear after the user has interacted with the input for the first time.
</p>

<Collapse Id="ce-10" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <EmojiInput Required="true" />
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<EmojiInput Required=""true"" />")
    </ChildContent>
</Collapse>

<h2>Tab index</h2>

<p>
    Set the <code>TabIndex</code> property to specify the value of the input's <code>tabindex</code>
    attribute.
</p>

<h2>Name</h2>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<h2>Auto-focus</h2>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<h3>Methods</h3>

<p>The <code>Clear</code> method will clear the current value.</p>

<p>The <code>FocusAsync</code> method will give the input focus.</p>

<h3>Customization</h3>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the input itself.
</p>

<h2>Validation</h2>

<p>
    See <a href="./components/form#validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>
