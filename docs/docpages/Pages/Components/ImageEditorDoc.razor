@page "/components/image-editor"

<PageTitle>Image Editor - Tavenem Blazor Framework</PageTitle>

<h1>Image Editor</h1>

<p>
    The <code>ImageEditor</code> component is a simple online image editor capable of making
    adjustments to images. The adjusted image can be downloaded, persisted directly to the live
    page, and/or saved to the back-end using custom logic.
</p>

<h2>Basics</h2>

<p>
    The <code>Src</code> property can be set to any image URL to create a basic <code>img</code>
    element, with a special addition: an edit icon which transforms the static image into a live
    editor.
</p>

<Collapse Id="ce-1" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ImageEditor Src="@UrlObj.Url" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ImageEditor Src=""./images/rover.webp"" />")
    </ChildContent>
</Collapse>

<p>
    In addition to setting the <code>Src</code> property, you can also dynamically call the
    <code>LoadImageAsync</code> method with either a URL to an image, or a <code>Stream</code>
    containing an image file. All image file types which are supported by the HTML <code>img</code>
    element should be supported.
</p>

<Collapse Id="ce-2" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ImageEditor @ref="_editor" />
            <div class="row justify-content-center">
                <InputFile @key="@_key" OnChange="OnFileChange" />
                <button class="btn primary" @onclick="OnUploadAsync" disabled="@(_file is null)">Upload</button>
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ImageEditor @ref=""_editor"" />
<div class=""row justify-content-center"">
    <InputFile @key=""@_key"" OnChange=""OnFileChange"" />
    <button class=""btn primary"" @onclick=""OnUploadAsync"" disabled=""@(_file is null)"">Upload</button>
</div>

@code {
    private ImageEditor? _editor;
    private IBrowserFile? _file;
    private string _key = Guid.NewGuid().ToString();

    private void OnFileChange(InputFileChangeEventArgs e) => _file = e.File;

    private async Task OnUploadAsync()
    {
        if (_editor is null
            || _file is null)
        {
            return;
        }
        using var stream = _file.OpenReadStream(1000000000);
        await _editor.LoadImageAsync(stream);
        _file = null;
        _key = Guid.NewGuid().ToString();
    }
}")
    </ChildContent>
</Collapse>

<p>
    Editing can be initiated programmatically with the <code>BeginEditAsync</code> method, and
    terminated with the <code>CancelEditAsync</code> method. The <code>Editing</code> property
    indicates whether the control is currently in edit mode. This property is two-way bindable, and
    provides another method of causing the control to enter or exit edit mode. Note that exiting
    edit mode programmatically is the same as pressing the "cancel" button in the UI: it abandons
    any current changes and restores the original image.
</p>

<p>
    Normally the control will be empty if no image has been set. However, if the
    <code>AllowEditNoImage</code> property is set to <code>true</code>, the edit toggle will be
    shown even when no image has been loaded. This will allow the user to draw upon a blank canvas.
    In this case, the height and width of the editor will be determined by the height and width of
    the control. If you do not set this manually with CSS, a minimum size will be used to prevent an
    editing surface with zero dimensions.
</p>

<h2>Edit Controls</h2>

<p>
    The image editor has a variety of controls
</p>

<dl>
    <dt>Crop</dt>
    <dd>
        <p>
            Cropping can be initiated programmatically with the <code>StartCropAsync</code> method.
            The editor can be made to leave cropping mode with the <code>CancelAsync</code> method.
        </p>
        <p>
            The aspect ratio to use when cropping can be bound with the <code>CropAspectRatio</code>
            property. It can also be set programmatically with the
            <code>SetCropAspectRatioAsync</code> method. It accepts a <code>double</code> value to
            use as the ratio. A negative value indicates that the image's own aspect ratio should be
            preserved, while zero or <code>null</code> permits cropping freely. The value you
            specify is not limited to the default ratios available in the UI.
        </p>
        <p>
            To disable image cropping by the user, set the <code>ShowCropControls</code> property to
            <code>false</code>. You can disable the aspect ratio selection specifically by setting
            the <code>ShowCropAspectRatioControls</code> property to <code>false</code>.
        </p>
        <p>
            If necessary you can provide a function for the <code>VerifyCrop</code> property, which
            receives a reference to the control, the proposed bounds of a crop operation
            (<code>x</code>, <code>y</code>, <code>width</code> and <code>height</code>), and should
            return a <code>Task&lt;bool></code>. If the result of your function is <code>true</code>
            the crop operation will be permitted to proceed. Otherwise it will be canceled. The
            bounds are guaranteed to have a non-zero width and height. Attempted crop operations
            with zero dimensions will fail automatically, without invoking your verification
            function unnecessarily.
        </p>
    </dd>
    <dt>Draw</dt>
    <dd>
        <p>
            Text can be added to the image programmatically with the <code>AddTextAsync</code>
            method.
        </p>
        <p>
            To disable freehand drawing on the image and adding text to the image, set the
            <code>ShowDrawingControls</code> property to <code>false</code>.
        </p>
    </dd>
    <dt>Flip</dt>
    <dd>
        <p>
            Flipping can be initiated programmatically with the <code>FlipHorizontalAsync</code> and
            <code>FlipVerticalAsync</code> methods.
        </p>
        <p>
            To disable flipping the image by the user (horizontally or vertically), set the
            <code>ShowFlipControls</code> property to <code>false</code>.
        </p>
    </dd>
    <dt>Rotate</dt>
    <dd>
        <p>
            Rotating can be initiated programmatically with the <code>RotateClockwiseAsync</code>
            and <code>RotateCounterClockwiseAsync</code> methods.
        </p>
        <p>
            To disable rotating the image by the user, set the <code>ShowRotateControls</code>
            property to <code>false</code>.
        </p>
    </dd>
    <dt>Clear</dt>
    <dd>
        <p>
            The entire canvas can be cleared programmatically with the <code>ClearAsync</code>
            method. Note that this also removes the background (the original image). There is no
            equivalent user-facing UI for this method.
        </p>
    </dd>
</dl>

<h2>Saving</h2>

<p>
    There are two ways to save an edited image.
</p>

<p>
    While editing the user can use the "download" button to download a copy of the image in its
    current state. You can initiate this action programmatically with the
    <code>ExportImageAsync</code> method, which takes <code>format</code> and <code>quality</code>
    parameters.
</p>

<p>
    The saved image file type will not necessarily match the original type of the image. Instead, it
    can be selected by the user with a dropdown: PNG, JPEG, and WebP are available. The initial
    default output format is PNG, but you can overeride this with the <code>Format</code> property,
    which accepts a MIME type (e.g. "image/png"). Formats other than PNG, JPEG, and WebP may not
    work. See <a
    href="https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toBlob">https://developer.mozilla.org/docs/Web/API/HTMLCanvasElement/toBlob</a>
    for more information. The format dropdown can be hidden by setting the <code>ShowFormats</code>
    property to <code>false</code>, which prevents the user from changing the format you specify.
</p>

<p>
    There is also a "save" button which ends editing mode and replaces the original <code>img</code>
    element with a new one, whose <code>src</code> is set to a data URL containing the edited image.
    This updates the image on the currently displayed page, but does not update the original source.
    This can also do this programmatically with the <code>SaveAsync</code> method.
</p>

<p>
    The save button can be hidden by setting the <code>AllowSaving</code> property to
    <code>false</code>. This prevents users from overwriting images on the page, but still permits
    them to download a copy of their changes.
</p>

<p>
    In order to update the original image file (or to save a new copy), you should provide a
    function for the <code>SaveCallback</code> property. This receives a <code>Stream</code>
    containing the updated image in the selected format, and should return a <code>Task</code>. Your
    save function will be invoked when the user presses the save button or when you use the
    <code>SaveAsync</code> method, and can be used to perform any back-end update logic required.
    You can set the <code>MaxAllowedStreamSize</code> property to restrict the maximum number of
    bytes which may be sent. If not overridden (or if a value &lt;= 0 is set), the maximum defaults
    to 512000 (512KB).
</p>

<h2>Additional properties</h2>

<p>
    The <code>BrushColor</code> property indicates the currently selected drawing color, as a hex
    string. This color applies to both freehand drawing and text. The property is not bindable (it
    is read-only), but it can be set programmatically with the <code>SetBrushColorAsync</code>
    method.
</p>

<p>
    The <code>BrushSize</code> property indicates the thickness of freehand drawing, as a number of
    pixels. It starts at 12 by default. The property is not bindable (it is read-only), but it can
    be set programmatically with the <code>SetBrushSizeAsync</code> method.
</p>

<p>
    The <code>DrawingMode</code> property indicates whether the editor is currently set to freehand
    drawing or not. The property is not bindable (it is read-only), but it can be set
    programmatically with the <code>SetDrawingModeAsync</code> method. This has no effect if the
    control is not currently in edit mode.
</p>

<h2>Methods</h2>

<p>
    The <code>ClearAsync</code> method will clear the current input text.
</p>

<p>
    The <code>FocusAsync</code> method will give the editor focus.
</p>

<h2>Customization</h2>

<p>
    The <code>EditIcon</code> property can be used to change the icon used to toggle edit mode.
</p>

<p>
    You can disable the edit button by setting the <code>ShowEditButton</code> property to
    <code>false</code>.
</p>

<p>
    The <code>ImageClass</code> and <code>ImageStyle</code> properties can be used to customize the
    appearance of the image container. The standard <code>Class</code> and <code>Style</code>
    properties will apply to the entire control, including the edit controls. The
    <code>ImageClass</code> and <code>ImageStyle</code> properties, however, will apply more
    specifically to the <code>img</code> or <code>canvas</code> element.
</p>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Id="ce-3" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <ImageEditor Src="./images/rover.webp" ThemeColor="ThemeColor.Primary" />
            <ImageEditor Src="./images/rover.webp" ThemeColor="ThemeColor.Secondary" />
            <ImageEditor Src="./images/rover.webp" ThemeColor="ThemeColor.Tertiary" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<ImageEditor Src=""./images/rover.webp"" ThemeColor=""ThemeColor.Primary"" />
<ImageEditor Src=""./images/rover.webp"" ThemeColor=""ThemeColor.Secondary"" />
<ImageEditor Src=""./images/rover.webp"" ThemeColor=""ThemeColor.Tertiary"" />")
    </ChildContent>
</Collapse>

@code {
    private ImageEditor? _editor;
    private IBrowserFile? _file;
    private string _key = Guid.NewGuid().ToString();

    private void OnFileChange(InputFileChangeEventArgs e) => _file = e.File;

    private async Task OnUploadAsync()
    {
        if (_editor is null
            || _file is null)
        {
            return;
        }
        using var stream = _file.OpenReadStream(1000000000);
        await _editor.LoadImageAsync(stream);
        _file = null;
        _key = Guid.NewGuid().ToString();
    }

    private StrObj UrlObj { get; set; } = new();
    protected async Task LoadAsync()
    {
        await Task.Delay(100);
        UrlObj.Url = "./images/rover.webp";
    }
    protected override async Task OnInitializedAsync() => await LoadAsync();

    private class StrObj { public string? Url { get; set; } }
}