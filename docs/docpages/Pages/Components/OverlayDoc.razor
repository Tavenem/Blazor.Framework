@page "/components/overlay"

<PageTitle>Overlay - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Overlay</Heading>

<p>
    The overlay component is used to dim and blur the background of an area, while preventing user
    interaction with the elements behind.
</p>

<p>
    Overlays are built into the operatison of multiple components, such as <a
    href="./components/dialog">dialogs</a> and <a href="./components/drawer">drawers</a>. They are
    also available for your own use.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    To create an overlay, add the <code>overlay</code> class to an element (usually a
    <code>div</code>). It will fill its container, and has a high <code>z-index</code> which will
    prevent interaction with most other elements.
</p>

<Collapse IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center py-5">
            <button @onclick="@(_ => _showOverlay = true)" class="btn primary">Show overlay</button>

            @if (_showOverlay)
            {
                <div @onclick="@(_ => _showOverlay = false)" class="overlay" />
            }
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button @onclick=""@(_ => _showOverlay = true)"" class=""btn primary"">Show overlay</button>

@if (_showOverlay)
{
    <div @onclick=""@(_ => _showOverlay = false)"" class=""overlay"" />
}

@code {
    private bool _showOverlay;
}")
    </ChildContent>
</Collapse>

<p>
    Drawers, <a href="./components/appbar">AppBars</a>, dialogs, <a
    href="./components/snackbar">snackbars</a>, and <a href="./components/popover">popovers</a>
    appear above overlays. To hide these components you should override the <code>z-index</code> of
    your overlay with a custom value. See <a href="./getting-started/themes">Themes</a> for the
    specific <code>z-index</code> values used by the various components.
</p>

<Heading Level="HeadingLevel.H2">Local</Heading>

<p>
    You can add the <code>local</code> class to an overlay to make its position
    <code>absolute</code> rather than <code>fixed</code>, which will restrict the coverage to the
    nearest positioned ancestor element. This can be useful to screen sections while leaving the
    rest of a page clear.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center py-5">
            <button @onclick="@(_ => _showOverlay2 = true)" class="btn primary">Show overlay</button>

            @if (_showOverlay2)
            {
                <div @onclick="@(_ => _showOverlay2 = false)" class="overlay local" />
            }
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button @onclick=""@(_ => _showOverlay = true)"" class=""btn primary"">Show overlay</button>

@if (_showOverlay)
{
    <div @onclick=""@(_ => _showOverlay = false)"" class=""overlay local"" />
}

@code {
    private bool _showOverlay;
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    You can use the <code>light</code> class to create an overlay that lightens the background,
    rather than dimming it.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center py-5">
            <button @onclick="@(_ => _showOverlay3 = true)" class="btn primary">Show overlay</button>

            @if (_showOverlay3)
            {
                <div @onclick="@(_ => _showOverlay3 = false)" class="overlay light" />
            }
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button @onclick=""@(_ => _showOverlay = true)"" class=""btn primary"">Show overlay</button>

@if (_showOverlay)
{
    <div @onclick=""@(_ => _showOverlay = false)"" class=""overlay light"" />
}

@code {
    private bool _showOverlay;
}", true)
    </ChildContent>
</Collapse>

<p>
    You can use the <code>transparent</code> class to create an overlay that does not alter the
    background at all, but still prevents interacting with anything beneath it.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center py-5">
            <button @onclick="@(_ => _showOverlay4 = true)" class="btn primary">Show overlay</button>

            @if (_showOverlay4)
            {
                <div @onclick="@(_ => _showOverlay4 = false)" class="overlay transparent" />
            }
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button @onclick=""@(_ => _showOverlay = true)"" class=""btn primary"">Show overlay</button>

@if (_showOverlay)
{
    <div @onclick=""@(_ => _showOverlay = false)"" class=""overlay light"" />
}

@code {
    private bool _showOverlay;
}", true)
    </ChildContent>
</Collapse>

<p>
    An overlay can contain any content you wish.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-center justify-content-center py-5">
            <button @onclick="@(_ => _showOverlay5 = true)" class="btn primary">Show overlay</button>

            @if (_showOverlay5)
            {
                <div @onclick="@(_ => _showOverlay5 = false)" class="overlay">
                    Click here to dismiss this overlay
                </div>
            }
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button @onclick=""@(_ => _showOverlay = true)"" class=""btn primary"">Show overlay</button>

@if (_showOverlay)
{
    <div @onclick=""@(_ => _showOverlay = false)"" class=""overlay"">
        Click here to dismiss this overlay
    </div>
}

@code {
    private bool _showOverlay;
}")
    </ChildContent>
</Collapse>

@code {
    private bool _showOverlay,  _showOverlay2,  _showOverlay3,  _showOverlay4, _showOverlay5;
}