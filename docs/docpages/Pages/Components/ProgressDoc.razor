@page "/components/progress"

<PageTitle>Progress - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">Progress</Heading>

<p>
    The Tavenem Blazor Framework includes various progress components to provide an indication that
    an ongoing process is taking place.
</p>

<Heading Level="HeadingLevel.H2">Circular</Heading>

<p>
    The circular progress component is created with a <a
    href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">web component</a>. To place
    one, use the <code>tf-progress-circle</code> custom element.
</p>

<p>
    You can color the circle with any of the theme classes, and use the <code>small</code> or
    <code>large</code> classes to control its size. You can also set the <code>height</code> and
    <code>width</code> properties directly with CSS, but be sure to make them equal, as the spinner
    will size itself to fill the smallest dimension.
</p>

<CodeExample RowClass="align-items-center" Code="@(@"<tf-progress-circle></tf-progress-circle>
<tf-progress-circle class=""primary""></tf-progress-circle>
<tf-progress-circle class=""secondary small""></tf-progress-circle>
<tf-progress-circle class=""tertiary large""></tf-progress-circle>
<tf-progress-circle class=""info"" style=""height:5rem;width:5rem""></tf-progress-circle>")" />

<p>
    The thickness of the circle can be controlled with the <code>stroke</code> attribute, which can
    be set to any number from 1 to 30. Values outside this range are clamped, and values that aren't
    numbers result in the default value of 5. Values above 20 create a double-circle effect, seen in
    the final example below.
</p>

<CodeExample Code="@(@"<tf-progress-circle class=""dark""></tf-progress-circle>
<tf-progress-circle class=""success"" stroke=""1""></tf-progress-circle>
<tf-progress-circle class=""default"" stroke=""10""></tf-progress-circle>
<tf-progress-circle class=""warning"" stroke=""20""></tf-progress-circle>
<tf-progress-circle class=""danger"" stroke=""30""></tf-progress-circle>")" />

<Heading Level="HeadingLevel.H2">Linear</Heading>

<p>
    The linear progress component is created with a <a
    href="https://developer.mozilla.org/en-US/docs/Web/Web_Components">web component</a>. To place
    one, use the <code>tf-progress-linear</code> custom element.
</p>

<p>
    You can color the bar with any of the theme classes, and use the <code>small</code> or
    <code>large</code> classes to control its thickness.
</p>

<CodeExample RowClass="flex-column align-items-center" Code="@(@"<tf-progress-linear class=""primary""></tf-progress-linear>
<tf-progress-linear class=""secondary""></tf-progress-linear>
<tf-progress-linear class=""tertiary small""></tf-progress-linear>
<tf-progress-linear class=""info large""></tf-progress-linear>")" />

<p>
    You can also create vertical linear progress bars by adding the <code>vertical</code> attribute.
</p>

<CodeExample Code="@(@"<div class=""d-flex w-100 justify-content-space-around"" style=""height:10rem"">
    <tf-progress-linear class=""primary"" vertical></tf-progress-linear>
    <tf-progress-linear class=""secondary"" vertical></tf-progress-linear>
    <tf-progress-linear class=""tertiary small"" vertical></tf-progress-linear>
    <tf-progress-linear class=""info large"" vertical></tf-progress-linear>
</div>")" />

<Heading Level="HeadingLevel.H2">Determinate</Heading>

<p>
    To set a specific progress value, assign a number to the <code>progress</code> attribute of
    either type of progress component. This value should be a percentage of completion, as a value
    between 0 and 100.
</p>

<CodeExample RowClass="flex-column align-items-center" Code="@(@"<tf-progress-circle class=""warning"" progress=""25""></tf-progress-circle>
<tf-progress-linear class=""danger"" progress=""75""></tf-progress-linear>")" />

<p>
    Values for <code>progress</code> below zero will be treated as zero, and values above 100 will
    be treated as 100. If you set <code>progress</code> to a value which is infinite, or not a
    number, the progress indicator will become indeterminate.
</p>

<p>
    The <code>tf-progress-circle</code> and <code>tf-progress-linear</code> elements will respond
    dynamically to changes to the <code>progress</code> attribute.
</p>

<p>
    You can also add text or other elements above the progress indicator, by adding them to the named
    slot <code>label</code>:
</p>

<CodeExample RowClass="align-items-center" Code="@(@"<div class=""d-flex w-100 align-items-center justify-content-space-around"" style=""height:10rem"">
    <tf-progress-circle class=""info"">
        <span slot=""label"" class=""text-color-reset""><strong>Loading&hellip;</strong></span>
    </tf-progress-circle>
    <tf-progress-linear class=""danger"" progress=""75"" vertical>
        <span slot=""label"" class=""warning text-center""><strong>Danger level</strong></span>
    </tf-progress-linear>
</div>
<tf-progress-linear class=""warning"" progress=""25"">
    <span slot=""label"" class=""text-color-reset"">25%</span>
</tf-progress-linear>")" />
