@page "/components/form"
@page "/components/validation"

<PageTitle>Form - Tavenem Blazor Framework</PageTitle>

<h1>Form</h1>

<p>
    Tavenem Blazor Framework form components support three methods of form validation and submission.
</p>

<p>
    They can also be used without any containing form element at all. Even <a
    href="./components/form#validation">validation</a> can be used on a Tavenem Blazor Framework form
    component without a containing form.
</p>

<h2>The Form component</h2>

<p>
    The Tavenem Blazor Framework includes a <code>Form</code> component which wraps a native
    <code>form</code> element, and also inherits from the built-in Blazor <code>EditForm</code>
    component, in addition to powerful validation and data handling features of its own.
</p>

<p>
    Unlike the built-in <code>EditForm</code> component, the Tavenem Blazor Framework
    <code>Form</code> component does not require a <code>Model</code> or an
    <code>EditContext</code>. Although it supports either, they are optional. When neither is
    provided, a default <code>EditContext</code> is supplied to descendant form components.
</p>

<p>
    For details on the validation capabilities of a <code>Form</code> component, see <a
    href="./components/form#validation">validation</a>.
</p>

<p>
    Forms provide a <code>FieldChanged</code> event callback which is raised whenever a contained
    form component is modified. This works for both Tavenem Blazor Framework form components,
    and also built-in Blazor form components.
</p>

<h3>Methods</h3>

<p>
    The <code>IsModified</code> method determines whether any fields within the form have been
    modified from their initial state. This works for both Tavenem Blazor Framework form components,
    and also built-in Blazor form components. Modification of third-party input components
    <em>may</em> be detected, if those components are designed to interact as expected with a
    containing <code>EditContext</code>.
</p>

<p>
    The <code>MarkAsUnmodified</code> method will reset the <code>IsTouched</code> property of all
    Tavenem Blazor Framework form components within the form to <code>false</code>, which affects
    how the <code>Required</code> property is treated during validation.
</p>

<p>
    The <code>ResetAsync</code> method will reset all Tavenem Blazor Framework form components
    within the form to their initial states. This also resets the fields' <code>IsTouched</code>
    value to <code>false</code>.
</p>

<p>
    Note that the <code>MarkAsUnmodified</code> and <code>ResetAsync</code> methods have no effect
    on controls which do not implemnent the Tavenem Blazor Framework <code>IFormComponent</code>
    interface, such as the native Blazor input components, or components from other libraries.
</p>

<h2>Blazor EditForm support</h2>

<p>
    Tavenem Blazor Framework form components are designed to integrate fully with Blazor's built-in
    <a
    href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation"><code>EditForm</code>
    component</a>. If you are already using <code>EditForm</code>s for validation and form
    submission, you can start using Tavenem Blazor Framework form components alongside the built-in
    Blazor form components, or as replacements for the built-in components.
</p>

<h2>Native HTML forms</h2>

<p>
    The simplest way to use Tavenem Blazor Framework form components is to include them in a native
    HTML <code>form</code> element, with a <code>button</code> that has its <code>type</code>
    attribute set to <code>submit</code>. All Tavenem Blazor Framework form components contain
    native <code>input</code> elements at their core, with appropriate input types, and values in
    the format expected for the input type, to facilitate basic data parsing and binding.
</p>

<p>
    Set the <code>Name</code> property on your input components to ensure that their values
    will be included in form submission events.
</p>

<p>
    Note that submitting a native form usually causes a page redirect or refresh, which is not
    usually desirable for single page applications such as Blazor.
</p>

<h2 id="validation">Validation</h2>

<p>
    Tavenem Blazor Framework form components support three methods of form validation.
</p>

<h3>The Form component</h3>

<p>
    The <code>Form</code> component inherits from the built-in Blazor <code>EditForm</code>
    component, and supports all the <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation">
        validation
        capabilities
    </a> that component provides, including <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/models/validation">data annotations</a>
    and <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation#validator-components">
        validator
        components
    </a>. It also supports the built-in <code>ValidationSummary</code> and
    <code>ValidationMessage</code> components.
</p>

<p>
    In addition, the Tavenem Blazor Framework <code>Form</code> component provides a
    <code>Validation</code> property. This function receives the bound model (if there is one,
    including the model assigned to an explicit <code>EditContext</code>) and should return an
    enumeration of validation messages. The <code>AutoValidate</code> property controls
    whether this function is invoked each time a contained field changes (it is <code>true</code> by
    default).
</p>

<p>
    The <code>Form</code> component also provides a <code>ValidateAsync</code> method which
    initiates validation on all fields, and invokes the <code>Validation</code> function. It returns
    <code>true</code> if no validation messages are present for the form or any field, and
    <code>false</code> if any messages are found. If <code>AutoValidate</code> is set to
    <code>false</code>, the <code>Validate</code> function will only be invoked when this method is
    called.
</p>

<p>
    The <code>GetValidationMessages</code> method can be used to enumerate all the current
    validation messages for a <code>Form</code>, both those generated by the <code>Validation</code>
    function, and those generated by individual input components.
</p>

<h3>Blazor EditForm support</h3>

<p>
    Tavenem Blazor Framework form components are designed to integrate fully with Blazor's built-in
    <a href="https://docs.microsoft.com/en-us/aspnet/core/blazor/forms-validation">
        <code>EditForm</code>
        component
    </a>. If you are already using <code>EditForm</code>s for validation, you can start
    using Tavenem Blazor Framework form components alongside the built-in Blazor form components, or
    as replacements for the built-in components.
</p>

<h3>Individual validation</h3>

<p>
    Tavenem Blazor Framework form components can also be validated individually. This can be useful
    when you wish to use a form component on its own, with no containing form element at all.
</p>

<p>
    Each Tavenem Blazor Framework form component has a <code>Validation</code> property, similar to
    the <code>Validation</code> property on <code>Form</code> itself. It receives the input's
    current bound value, the parent <code>EditContext</code> (if any), and should return an
    enumeration of validation messages. This function works in addition to any validation associated
    with a parent <code>Form</code> or <code>EditForm</code>. It is automatically invoked whenever
    the input's value changes, and whenever a parent <code>EditContext</code> requests validation.
</p>

<p>
    Tavenem Blazor Framework form components also have a <code>ValidateAsync</code> method, which
    can be used to perform manual validation of that component. This allows the component to be
    validated outside the context of a parent <code>Form</code> or <code>EditForm</code>.
</p>

<p>
    Tavenem Blazor Framework form components all have an <code>IsValid</code> property as well,
    which reflects the most recent result of any validation operation. This property is bindable,
    although bear in mind that if you set its value programmatically, it will be overwritten
    whenever the field's value changes to reflect its actual validity.
</p>
