@page "/components/tooltip"

<PageTitle>Tooltip - Tavenem Blazor Framework</PageTitle>

<h1>Tooltip</h1>

<p>
    The Tavenem Blazor Framework includes an easy to use Tooltip component.
</p>

<h2>Basics</h2>

<p>
    The <code>Tooltip</code> component can be used to display a popover in response to a hover or
    tap on any element.
</p>

<p>
    The placement and association between a <code>Tooltip</code> and its triggering element(s) is
    flexible. The simplest way to give an element a tooltip is to nest the <code>Tooltip</code>
    component inside the element which is expected to trigger it.
</p>

<CodeExample IsOpen="true" Code="@(@"<button class=""btn btn-icon"">
    <tf-icon>delete</tf-icon>
    <Tooltip>Delete</Tooltip>
</button>")">
    <button class="btn btn-icon">
        <tf-icon>delete</tf-icon>
        <Tooltip>Delete</Tooltip>
    </button>
</CodeExample>

<p>
    You can also specify a <code>Tooltip</code> by its <code>Id</code> using the
    <code>data-tooltip-id</code> HTML attribute on any element. This method is preferred when
    multiple elements will share the same tooltip, since it avoids duplicating the
    <code>Tooltip</code> component unnecessarily.
</p>

<p>
    Usually this should also be combined with setting the <code>IsContainerTrigger</code> property
    to <code>false</code> (it defaults to <code>true</code>), which prevents the
    <code>Tooltip</code> component's container from also acting as a trigger.
</p>

<CodeExample IsOpen="true" Code="@(@"<button data-tooltip-id=""tooltip-1"" class=""btn btn-icon""><tf-icon>add</tf-icon></button>
<Tooltip Id=""tooltip-1"" IsContainerTrigger=""false"">Add</Tooltip>")">
    <button data-tooltip-id="tooltip-1" class="btn btn-icon"><tf-icon>add</tf-icon></button>
    <Tooltip Id="tooltip-1" IsContainerTrigger="false">Add</Tooltip>
</CodeExample>

<p>
    You can also set the <code>IsButton</code> property to <code>true</code> to render the
    <code>Tooltip</code> component itself as a "help" icon. The help icon acts as a trigger for the
    tooltip. Tooltips rendered as buttons can still be associated with other elements by
    <code>Id</code>, but they will not respond to interactions with their containing element.
</p>

<CodeExample IsOpen="true" Code="@(@"<Tooltip IsButton=""true"">This is a tooltip for a help icon</Tooltip>")">
    <Tooltip IsButton="true">This is a tooltip for a help icon</Tooltip>
</CodeExample>

<h2>Content</h2>

<p>
    You can provide any content in a tooltip.
</p>

<CodeExample IsOpen="true" Code="@(@"<button class=""btn btn-icon"">
    <tf-icon>help</tf-icon>
    <Tooltip>
        <h6>Tooltip title</h6>
        <p>Tooltip content</p>
        <p><tf-icon class=""success"">thumb_up</tf-icon></p>
    </Tooltip>
</button>")">
    <button class="btn btn-icon">
        <tf-icon>help</tf-icon>
        <Tooltip>
            <h6>Tooltip title</h6>
            <p>Tooltip content</p>
            <p><tf-icon class="success">thumb_up</tf-icon></p>
        </Tooltip>
    </button>
</CodeExample>

<h2>Triggering</h2>

<p>
    Tooltips normally appear when an associated element either receives focus, or when the mouse
    pointer enters the element, and disappear when the element loses focus, or the trigger tapped with the
    pointer.
</p>
<p>
    The tooltip can also be dismissed when it is tapped with the pointer by setting the
    <code>DismissOnTap</code> property to <code>true</code>.
</p>
<p>
    Tooltips normally appear immediately, but you can specify a delay before the tooltip appears
    with the <code>Delay</code> property, which takes a value in milliseconds.
</p>
<p>
    Tooltips' visibility can also be toggled programmatically with the <code>Toggle</code> method.
    The tooltip will appear in its last opened position. If it was never activated by interacting
    with a triggering element, it will appear at the top-left corner of its nearest
    relatively-positioned parent element.
</p>

<h2>Placement</h2>

<p>
    In some situations the positioning of the tooltip might not work as expected when the
    <code>Tooltip</code> and the trigger are in containers with different <a
    href="https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning#positioning_contexts">positioning
    contexts</a>. In most cases this type of issue can be resolved by placing the
    <code>Tooltip</code> component closer to the trigger in the element hierarchy.
</p>

<h2>Customization</h2>

<p>Set the color to any theme color with the <code>ThemeColor</code> property.</p>

<p>Remove the arrow by setting the <code>Arrow</code> property to <code>false</code>.</p>

<p>
    Change the side of the anchor element where the tooltip appears by setting the <code>Side</code>
    property.
</p>

<CodeExample IsOpen="true" Code="@(@"<button class=""btn btn-icon success"">
    <tf-icon>add</tf-icon>
    <Tooltip Arrow=""false""
             Delay=""0""
             DismissOnTap=""true""
             Side=""Side.Right""
             ThemeColor=""ThemeColor.Secondary"">
        Add
    </Tooltip>
</button>")">
    <button class="btn btn-icon success">
        <tf-icon>add</tf-icon>
        <Tooltip Arrow="false"
                 Delay="0"
                 DismissOnTap="true"
                 Side="Side.Right"
                 ThemeColor="ThemeColor.Secondary">
            Add
        </Tooltip>
    </button>
</CodeExample>