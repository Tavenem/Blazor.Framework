@page "/components/snackbar"

<PageTitle>Snackbar - Tavenem Blazor Framework</PageTitle>

<h1>Snackbar</h1>

<p>
    Use the snackbar service to display messages in a stack above the main view.
</p>

<h2>Basics</h2>

<p>
    To display a snackbar message, inject the <code>SnackbarService</code> into a component, then
    call one of the <code>Add</code> method overloads:
</p>

<Collapse Id="ce-1" IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <button class="btn primary" @onclick="@(_ => SnackbarService.Add("This is a snackbar"))">Show snackbar</button>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button class=""btn primary"" @onclick=""@(_ => SnackbarService.Add(""This is a snackbar""))"">Show snackbar</button>

@code {
    [Inject] private SnackbarService SnackbarService { get; set; } = default!;
}")
    </ChildContent>
</Collapse>

<p>
    The message can contain HTML as a <code>MarkupString</code>:
</p>

<Collapse Id="ce-2" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <button class="btn primary" @onclick="@(_ => SnackbarService.Add(_message))">Show snackbar</button>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button class=""btn primary"" @onclick=""@(_ => SnackbarService.Add(_message))"">Show snackbar</button>

@code {
    private MarkupString _message = (MarkupString)""This is a <strong class=\""info\"">snackbar</strong>"";
    [Inject] private SnackbarService SnackbarService { get; set; } = default!;
}")
    </ChildContent>
</Collapse>

<h2>Options</h2>

<p>
    The <code>SnackbarService</code> has a number of properties which control the behavior of all snackbars:
</p>

<dl>
    <dt><code>MaxSnackbars</code></dt>
    <dd>
        Sets the maximum number of snackbars which will be displayed in a stack at a time. One
        additional snackbar will also be displayed with reduced opacity, to provide a visual cue to
        the user that additional messages are available, but hidden until the visible ones have been
        dismissed to create more room.
    </dd>

    <dt><code>PreventDuplicates</code></dt>
    <dd>
        When set to <code>true</code> (the default), adding a new snackbar with the exact same
        options (including message) will cause the original message to have its display timer reset,
        instead of adding a duplicate. This can be especially useful if you use snackbars to report
        events that may occur frequently, to avoid spamming the user or accidentally hiding unique
        messages in a flood of duplicates.
    </dd>

    <dt><code>ShowDuplicateCounter</code></dt>
    <dd>
        When set to <code>true</code> (the default), snacksbars which have duplicates suppressed
        will show a counter indicating the total number of messages received. This can inform users
        of the volume and/or frequency of a repeated message, when it might otherwise simply appear
        to be long-lived. It has no effect if <code>PreventDuplicates</code> is <code>false</code>.
        If this number exceeds 999, the value "999+" will be displayed instead of the actual count,
        to prevent excessive overflow of the message text.
    </dd>
</dl>

<p>
    The <code>SnackbarService</code>'s <code>Add</code> method can also take a
    <code>SnackbarOptions</code> parameter to control each message's individual apearance and
    behavior.
</p>

<dl>
    <dt><code>Message</code></dt>
    <dd>
        A <code>MarkupString</code> containing the message to display.
    </dd>

    <dt><code>Position</code></dt>
    <dd>
        The corner of the view where the snackbar will appear. Defaults to the bottom-right corner.
        Each corner has its own queue of snackbar messages. The <code>MaxSnackbars</code> property
        of the service applies to each stack separately, not to the total number of snackbars
        anywhere on screen.
    </dd>

    <dt><code>ThemeColor</code></dt>
    <dd>
        Sets the color theme of the snackbar.
    </dd>

    <dt><code>AutoIcon</code></dt>
    <dd>
        When <code>true</code> (the default), a default icon (in some cases, theme-specific) will be
        displayed before the message.
    </dd>

    <dt><code>CloseAfterNavigation</code></dt>
    <dd>
        Can be set to <code>true</code> to cause the message to be automatically dismissed when the
        user navigates to a new page.
    </dd>

    <dt><code>RequireInteraction</code></dt>
    <dd>
        Can be set to <code>true</code> to prevent the message from being automatically dismissed
        after the usual delay. They will only be dismissed after a user interaction (either a click,
        if a handler is attached, or by closing), or programmatically.
    </dd>

    <dt><code>OnClick</code></dt>
    <dd>
        Can be set to an action which will occur when the snackbar is clicked by the user. It
        receives the clicked snackbar object as a parameter, which includes the original options
        (including the message) in its <code>Properties</code> property.
    </dd>

    <dt><code>ShowCloseButton</code></dt>
    <dd>
        Can be set to <code>true</code> to display a close button on the snackbar. Note that when
        <code>OnClick</code> has not been set, any click on a snackbar will dismiss it.
    </dd>

    <dt><code>VisibleStateDuration</code></dt>
    <dd>
        Sets the amount of time the snackbar will remain visible (not counting fade-in and fade-out
        transitions). It is set to 5 seconds by default. Note that this value is ignored if
        <code>RequireInteraction</code> is <code>true</code>.
    </dd>
</dl>

<h3>Icons</h3>

<p>
    The icon of a snackbar is set automatically based on the theme.
</p>

<Collapse Id="ce-3" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <button class="btn primary" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Primary", ThemeColor = ThemeColor.Primary }))">Primary</button>
            <button class="btn secondary" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Secondary", ThemeColor = ThemeColor.Secondary }))">Secondary</button>
            <button class="btn tertiary" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Tertiary", ThemeColor = ThemeColor.Tertiary }))">Tertiary</button>
            <button class="btn danger" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Danger", ThemeColor = ThemeColor.Danger }))">Danger</button>
            <button class="btn dark" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Dark", ThemeColor = ThemeColor.Dark }))">Dark</button>
            <button class="btn default" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Default", ThemeColor = ThemeColor.Default }))">Default</button>
            <button class="btn info" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Info", ThemeColor = ThemeColor.Info }))">Info</button>
            <button class="btn success" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Success", ThemeColor = ThemeColor.Success }))">Success</button>
            <button class="btn warning" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Warning", ThemeColor = ThemeColor.Warning }))">Warning</button>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button class=""btn primary"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Primary"", ThemeColor = ThemeColor.Primary }))"">Primary</button>
<button class=""btn secondary"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Secondary"", ThemeColor = ThemeColor.Secondary }))"">Secondary</button>
<button class=""btn tertiary"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Tertiary"", ThemeColor = ThemeColor.Tertiary }))"">Tertiary</button>
<button class=""btn danger"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Danger"", ThemeColor = ThemeColor.Danger }))"">Danger</button>
<button class=""btn dark"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Dark"", ThemeColor = ThemeColor.Dark }))"">Dark</button>
<button class=""btn default"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Default"", ThemeColor = ThemeColor.Default }))"">Default</button>
<button class=""btn info"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Info"", ThemeColor = ThemeColor.Info }))"">Info</button>
<button class=""btn success"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Success"", ThemeColor = ThemeColor.Success }))"">Success</button>
<button class=""btn warning"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Warning"", ThemeColor = ThemeColor.Warning }))"">Warning</button>

@code {
    [Inject] private SnackbarService SnackbarService { get; set; } = default!;
}")
    </ChildContent>
</Collapse>

<p>
    You can suppress the icon by setting the <code>AutoIcon</code> property to <code>false</code>.
    You may include your own custom icon, in any position you wish:
</p>

<Collapse Id="ce-4" IsOpen="true" Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <button class="btn primary" @onclick="@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)"Icon after the text <tf-icon>lightbulb</tf-icon>", AutoIcon = false }))">Show snackbar</button>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<button class=""btn primary"" @onclick=""@(_ => SnackbarService.Add(new SnackbarOptions { Message = (MarkupString)""Icon after the text <tf-icon>lightbulb</tf-icon>"", AutoIcon = false }))"">Show snackbar</button>

@code {
    [Inject] private SnackbarService SnackbarService { get; set; } = default!;
}")
    </ChildContent>
</Collapse>

<h3>Standalone</h3>

<p>
    The <a href="/layout/layout">FrameworkLayout</a> component has built-in support for snackbars.
    However, if you wish to use snackbars without a <code>FrameworkLayout</code>,
    you must place a <code>SnackbarContainer</code> component somewhere on the page.
    This component contains all the presentation logic required to place snackbars.
</p>

<p>
    It is usually convenient to place the <code>SnackbarContainer</code> component
    in your layout, but if snackbars will only be displayed on a certain page, you can place the
    container only on that page.
</p>

<p>
    The <code>SnackbarContainer</code> can be placed anywhere in your page. The
    snackbars use fixed positioning, and should display in the correct position on the page
    regardless of the container's position within the document flow.
</p>

@code {
    private MarkupString _message = (MarkupString)"This is a <strong class=\"info\">snackbar</strong>";
    [Inject] private SnackbarService SnackbarService { get; set; } = default!;
}
