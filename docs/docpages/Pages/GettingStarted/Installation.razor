@page "/getting-started/installation"

<PageTitle>Installation - Tavenem Blazor Framework</PageTitle>

<h1>Installation</h1>

<p>This page will show you how to install and get started using the Tavenem Blazor Framework.</p>

<h2 data-heading-title="Install">1. Install</h2>
<p>The <code>Tavenem.Blazor.Framework</code> NuGet package is available through the package manager, or the CLI:</p>
<pre class="codeblock pre-razor-code">
    <pre class="user-select-all">dotnet add package Tavenem.Blazor.Framework</pre>
</pre>

<h2 data-heading-title="Import namespace">2. Import namespace</h2>
<p>Add the package namespace to your <code>_Imports.razor</code> file.</p>
<pre class="codeblock pre-razor-code">
    <pre class="user-select-all">
        <span class="pre-directive">&#64;using</span><span> Tavenem</span><span class="pre-operator">.</span><span>Blazor</span><span class="pre-operator">.</span><span>Framework</span>
    </pre>
</pre>

<h2 data-heading-title="Add CSS Link">3. Remove template boilerplate</h2>
<p>
    If you started your project with the default Blazor template, delete the references to
    Bootstrap, and all the pregenerated content in the <code>app.css</code> file (you can delete
    this file completely if you don't plan to put your own content there).
</p>
<p>
    Don't worry about the built-in Blazor styles in the template stylesheet. The Tavenem Blazor
    Framework reproduces and modifies them.
</p>
<p>
    If you ordinarily use <a href="https://getbootstrap.com/">Bootstrap</a>, be aware that the
    Tavenem Blazor Framework includes most of the same (or similar) utility classes, and most of the
    same (or similar) components. Consider carefully before keeping references to Bootstrap's CSS in
    your project, as there are likely to be conflicts leading to difficult styling issues.
</p>

<h2 data-heading-title="Register services with dependency injection">4. Register services with dependency injection</h2>
<p>Add the following to your <code>Program.cs</code>:</p>
<pre class="codeblock pre-razor-code">
    <pre class="user-select-all">
        <span class="pre-attribute">builder</span><span class="pre-operator">.</span><span>Services</span><span class="pre-operator">.</span><span class="pre-method">AddTavenemFramework</span><span>();</span>
    </pre>
</pre>

<p>
    This should be done in the <code>Program.cs</code> of both the client project and the server
    project (for prerendering support) in Web Apps.
</p>

<p>
    Additionally, add the following to the server project's <code>Program.cs</code> to ensure that
    utility classes used by the Framework get (de)serialized properly when using AOT compilation,
    and as efficiently as possible in all scenarios:
</p>
<pre class="codeblock pre-razor-code">
    <pre class="user-select-all">
        <span class="pre-attribute">builder</span><span class="pre-operator">.</span><span>Services</span><span class="pre-operator">.</span><span class="pre-method">ConfigureHttpJsonOptions</span>(<span class="pre-attribute">options</span>
    <span class="pre-operator">=></span> <span class="pre-attribute">options</span><span class="pre-operator">.</span>SerializerOptions<span class="pre-operator">.</span>TypeInfoResolverChain<span class="pre-operator">.</span><span class="pre-method">Insert</span>(
        <span class="pre-value">0</span><span class="pre-operator">,</span>
        <span class="pre-class">TavenemFrameworkJsonSerializerContext</span><span class="pre-operator">.</span>Default));
    </pre>
</pre>

<h2 data-heading-title="Set up the Framework">5. Set up the Framework (optional, but strongly recommended)</h2>
<p>Add a <code>FrameworkLayout</code> component to your <code>MainLayout.razor</code> file.</p>
<p>See <a href="./layout/layout">Layout</a> for details.</p>
