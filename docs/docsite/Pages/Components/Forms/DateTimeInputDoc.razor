@page "/components/datetime-input"

<PageTitle>DateTime Input - Tavenem Blazor Framework</PageTitle>

<Heading Level="HeadingLevel.H1">DateTime Input</Heading>

<p>
    The <code>DateTimeInput</code> component is a rich wrapper for an input element that binds to a
    date or time.
</p>

<p>
    It provides a calendar with multiple views, a clock, and can be configured to allow the
    selection of a time zone.
</p>

<Heading Level="HeadingLevel.H2">Basics</Heading>

<p>
    Date-time inputs come in three styles. The default uses a simple underline. Add the
    <code>filled</code> class to give it a shaded background. Add the <code>outlined</code> class to
    use a full outline.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Normal" />
                <DateTimeInput TValue="string" Label="Filled" Class="filled" />
                <DateTimeInput TValue="string" Label="Outlined" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Normal"" />
    <DateTimeInput TValue=""string"" Label=""Filled"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Outlined"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    You can also add the <code>dense</code> class to any variant to reduce the margins and padding.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Normal" Class="dense" />
                <DateTimeInput TValue="string" Label="Filled" Class="filled dense" />
                <DateTimeInput TValue="string" Label="Outlined" Class="outlined dense" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Normal"" Class=""dense"" />
    <DateTimeInput TValue=""string"" Label=""Filled"" Class=""filled dense"" />
    <DateTimeInput TValue=""string"" Label=""Outlined"" Class=""outlined dense"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    A <code>DateTimeInput</code>'s <code>Value</code> property can be bound to a string, a
    <code>DateTime</code>, a <code>DateTimeOffset</code>, a <code>DateOnly</code>, or a
    <code>TimeOnly</code> (including nullable versions).
</p>

<p>
    When binding to a string, any value which can be parsed as a <code>DateTimeOffset</code> is
    accepted as input.
</p>

<p>
    The string returned depends on the <code>DateType</code> parameter:
</p>

<dl>
    <dt><code>DateType.Year</code></dt>
    <dd><code>yyyy</code></dd>
       
    <dt><code>DateType.Month</code></dt>
    <dd><code>yyyy-MM</code></dd>
       
    <dt><code>DateType.Week</code></dt>
    <dd>
        <code>yyyy-W{Calendar.GetWeekOfYear()}</code>
    </dd>
       
    <dt><code>DateType.Date</code></dt>
    <dd>
        <ul>
            <li>When <code>ShowTime</code> is <code>true</code>: <code>s</code></li>
            <li>When it is <code>false</code>: <code>yyyy-MM-dd</code></li>
        </ul>
    </dd>
       
    <dt><code>DateType.None</code></dt>
    <dd>
        <ul>
            <li>When <code>ShowTime</code> is <code>true</code>:
                <ul>
                    <li>When <code>ShowSeconds</code> is <code>true</code>: <code>HH:mm:ss</code></li>
                    <li>When it is <code>false</code>: <code>HH:mm</code></li>
                </ul>
            </li>
            <li>When it is <code>false</code>: <code>s</code></li>
        </ul>
    </dd>
</dl>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput @bind-Value="_value1" Label="String" HelpText="@($"Bound value: {_value1}")" />
                <DateTimeInput @bind-Value="_value2" Label="DateTime" HelpText="@($"Bound value: {_value2}")" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput @bind-Value=""_value1"" Label=""String"" HelpText=""@($""Bound value: {_value1}"")"" />
    <DateTimeInput @bind-Value=""_value2"" Label=""DateTime"" HelpText=""@($""Bound value: {_value2}"")"" />
</div>

@code {
    private string _value1 = DateTime.Now.ToString();
    private DateTime _value2 = DateTime.Now;
}")
    </ChildContent>
</Collapse>

<p>
    Note that when bound to a nullable type, clearing the input results in a <code>null</code>
    value. Clearing the input when bound to a non-nullable type results in a default value
    (<code>DateTimeOffset.Now</code>).
</p>

<p>
    Note that the underlying <code>input</code> element always receives a <code>string</code> value
    for use with standard HTML form submission operations. This is the same string as returned when
    binding to a string, and conforms to the expected format for an input of type <code>date</code>,
    <code>datetime-local</code>, <code>month</code>, <code>time</code>, or <code>week</code>. The
    component automatically decides the most appropriate input type based on the bound data type and
    the component's parameter values.
</p>

<p>
    You can override the default behavior by assigning a special converter class to the
    <code>Converter</code> property which can perform bespoke conversions. Only the
    <code>setter</code> parameter of the converter requires implementation, as the
    <code>getter</code> is not used for date-time pickers.
</p>

<Heading Level="HeadingLevel.H2">Button</Heading>

<p>
    If you set the <code>DisplayType</code> property to <code>PickerDisplayType.Button</code> a
    simple button is displayed instead of a full field.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" DisplayType="PickerDisplayType.Button" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" DisplayType=""PickerDisplayType.Button"" />")
    </ChildContent>
</Collapse>

<p>
    The label and any help text or validation messages are not displayed in this style, but the
    button does get a special border color when the input is invalid.
</p>

<p>
    This display style is intended for integration within a toolbar, or a similar compact layout,
    where a full field would not be appropriate. It will usually be good practice to label the
    button in some manner (e.g. with a <a href="./components/tooltip">tooltip</a>), and display any
    help text or validation messages manually in an appropriate place. Otherwise the purpose of the
    button may not be clear to a user, particularly when the selected color is transparent.
</p>

<Heading Level="HeadingLevel.H2">Inline</Heading>

<p>
    If you set the <code>DisplayType</code> property to <code>PickerDisplayType.Inline</code> the
    full picker is displayed in the document flow.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" Label="Inline" DisplayType="PickerDisplayType.Inline" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" Label=""Inline"" DisplayType=""PickerDisplayType.Inline"" />")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">DateType</Heading>

<p>
    The <code>DateType</code> property controls what views are available in the calendar picker, and
    the precision of the data returned.
</p>

<dl>
    <dt><code>DateType.None</code></dt>
    <dd>
        If <code>ShowTime</code> is <code>true</code>, the calendar picker is not shown at all (only
        the time picker).<br />
        If <code>ShowTime</code> is <code>false</code>, or if the bound data type is
        <code>DateOnly</code>, this value is treated as <code>DateType.Date</code>.
    </dd>

    <dt><code>DateType.Year</code></dt>
    <dd>
        The month and date views are disabled. The user is guided to select a year, and the returned
        date will be set to the first date in that year.
    </dd>
       
    <dt><code>DateType.Month</code></dt>
    <dd>
        The date view is disabled. The user is guided to select a month, and the returned date will
        be set to the first date in that month.
    </dd>
       
    <dt><code>DateType.Week</code></dt>
    <dd>
        This mode behaves very similarly to <code>DateType.Date</code>, except that week numbers are
        displayed on the calendar. When the bound data type is string, the value will include only
        the year and week number. When bound to a <code>DateTime</code>,
        <code>DateTimeOffset</code>, or <code>DateOnly</code>, however, the full selected date is
        returned.
    </dd>
       
    <dt><code>DateType.Date</code></dt>
    <dd>
        All views of the calendar are supported, and the user is guided to select a specific date.
    </dd>
</dl>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row align-items-baseline justify-content-center">
            <DateTimeInput TValue="string" DateType="_dateType" />
            <Select Label="Date Type" @bind-Value="_dateType" Options="Enum.GetValues<DateType>()" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" ShowTime=""true"" />
<Select Label=""Date Type"" @bind-Value=""_dateType"" Options=""Enum.GetValues<DateType>()"" />

@code {
    private DateType _dateType = DateType.Date;
}")
    </ChildContent>
</Collapse>

<p>
    Setting <code>ShowTime</code> is unnecessary when the bound data type is <code>TimeOnly</code>,
    and is ignored if the bound data type is <code>DateOnly</code>.
</p>

<Heading Level="HeadingLevel.H2">Min & Max</Heading>

<p>
    Set the <code>Min</code> and <code>Max</code> properties to control the range of dates allowed.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" Min="DateTime.Today.AddDays(-7)" Max="DateTime.Today" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" Min=""DateTime.Today.AddDays(-7)"" Max=""DateTime.Today"" />")
    </ChildContent>
</Collapse>

<p>
    When the bound data type is <code>TimeOnly</code>, only the <code>TimeOfDay</code> portion of
    these properties is observed to determine a range of allowed times.
</p>

<Heading Level="HeadingLevel.H2">Time</Heading>

<p>
    Set the <code>ShowTime</code> property to <code>true</code> to display the time picker controls
    and allow both a date and time to be selected. When <code>DateType</code> has been set to
    <code>None</code>, <em>only</em> the time controls are displayed.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" ShowTime="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" ShowTime=""true"" />")
    </ChildContent>
</Collapse>

<p>
    Setting <code>ShowTime</code> is unnecessary when the bound data type is <code>TimeOnly</code>,
    and is ignored if the bound data type is <code>DateOnly</code>.
</p>

<Heading Level="HeadingLevel.H2">Time zones</Heading>

<p>
    Set the <code>ShowTimeZone</code> property to <code>true</code> to display a time zone select
    control. This is ignored if the bound data type is <code>DateOnly</code> or if
    <code>ShowTime</code> is <code>false</code>.
</p>

<p>
    The <code>TimeZone</code> property can be set to a starting <code>TimeZoneInfo</code> object. It
    uses the system's current time zone by default. This is used even when <code>ShowTimeZone</code>
    is <code>false</code>, to control the offset of the underlying <code>DateTimeOffset</code>
    value.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" ShowTime="true" ShowTimeZone="true" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" ShowTime=""true"" ShowTimeZone=""true"" />")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Culture</Heading>

<p>
    Set the <code>Culture</code> property to a <code>CultureInfo</code> object to control the
    appearance of the picker, and the format of display strings (but not bound strings, which use
    the <code>InvariantCulture</code> for maximum interoperability).
</p>

<p>
    The <code>Culture</code> property also controls which calendars are available. Bound data uses
    invariant data structures which aren't tied to any specific calendar, but the picker can display
    dates according to the conventions of any <code>Calendar</code> defined for the selected
    culture. When more than one calendar exists, a select control is automatically displayed which
    allows the user to choose their preferred calendar.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" ShowTime="true" Culture="@(System.Globalization.CultureInfo.GetCultureInfo("zh-Hans"))" />
                <DateTimeInput TValue="string" ShowTime="true" Culture="@(System.Globalization.CultureInfo.GetCultureInfo("ja-JP"))" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" ShowTime=""true"" Culture=""@(System.Globalization.CultureInfo.GetCultureInfo(""zh-Hans""))"" />
    <DateTimeInput TValue=""string"" ShowTime=""true"" Culture=""@(System.Globalization.CultureInfo.GetCultureInfo(""ja-JP""))"" />
</div>")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Disabled & read-only</Heading>

<p>
    The input can be set as disabled or read-only by setting the properties of the same names.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput @bind-Value="_disabled" Label="Disabled" Disabled="true" />
                <DateTimeInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="filled" />
                <DateTimeInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Class="outlined" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <DateTimeInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" />
                <DateTimeInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="filled" />
                <DateTimeInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Class="outlined" />
            </div>
            <div class="row mt-3 fill align-items-center gap-2">
                <DateTimeInput @bind-Value="_disabled" Label="Disabled" Disabled="true" Inline="true" />
                <DateTimeInput @bind-Value="_disabled" Label="Read-only" ReadOnly="true" Inline="true" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""filled"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Class=""outlined"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <DateTimeInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""filled"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Class=""outlined"" />
</div>
<div class=""row mt-3 fill align-items-center gap-2"">
    <DateTimeInput @bind-Value=""_disabled"" Label=""Disabled"" Disabled=""true"" Inline=""true"" />
    <DateTimeInput @bind-Value=""_disabled"" Label=""Read-only"" ReadOnly=""true"" Inline=""true"" />
</div>

@code {
    private string _disabled = ""#0f0"";
}")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Label</Heading>

<p>
    The <code>Label</code> property assigns a label to the input. The label will appear within the
    input like a placeholder when it is empty and does not have focus.
</p>

<p>
    Note that while a <code>DateTimeInput</code> bound to a <code>string</code> or a nullable
    <code>System.Drawing.Color</code> will allow an empty value, one bound to a non-nullable
    <code>System.Drawing.Color</code> will never be empty, since the bound <code>struct</code> will
    always have a value.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <DateTimeInput TValue="string" Label="Label" />
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<DateTimeInput TValue=""string"" Label=""Label"" />")
    </ChildContent>
</Collapse>

<Heading Level="HeadingLevel.H2">Help text</Heading>

<p>
    You can supply help text for the field with the <code>HelpText</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Normal" HelpText="Some help text" />
                <DateTimeInput TValue="string" Label="Filled" HelpText="Some help text" Class="filled" />
                <DateTimeInput TValue="string" Label="Outlined" HelpText="Some help text" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Normal"" HelpText=""Some help text"" />
    <DateTimeInput TValue=""string"" Label=""Filled"" HelpText=""Some help text"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Outlined"" HelpText=""Some help text"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that help text is replaced by any field validation errors.
</p>

<Heading Level="HeadingLevel.H2">Required</Heading>

<p>
    Set the <code>Required</code> property to specify whether the input is required. This adds an
    indicator to the label, and automatic verification rules which warn the user when the input is
    empty. The warning will only appear after the user has interacted with the input for the first
    time.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Required" Required="true" />
                <DateTimeInput TValue="string" Label="Required" Required="true" Class="filled" />
                <DateTimeInput TValue="string" Label="Required" Required="true" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Required"" Required=""true"" />
    <DateTimeInput TValue=""string"" Label=""Required"" Required=""true"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Required"" Required=""true"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    Note that a non-nullable type will always have a value.
</p>

<Heading Level="HeadingLevel.H2">Tab index</Heading>

<p>
    Set the <code>TabIndex</code> property to specify the value of the input's <code>tabindex</code>
    attribute.
</p>

<p>
    When <code>Inline</code> is <code>true</code>, this sets the <code>tabindex</code> of the first
    focusable control.
</p>

<Heading Level="HeadingLevel.H2">Name</Heading>

<p>
    The <code>name</code> attribute of the input can be set with the property of the same name.
</p>

<p>
    Note: even when <code>Inline</code> is <code>true</code>, a hidden <code>input</code> element
    still exists which receives this name, enabling native form submission.
</p>

<Heading Level="HeadingLevel.H2">Auto-focus</Heading>

<p>
    Set the <code>AutoFocus</code> property to <code>true</code> to automatically focus the input on
    page load. Setting this on more than one component will cause the first one in the DOM layout
    order to receive focus.
</p>

<p>
    Be cautious when using this property. It can be unfriendly to users who use screen-reading
    technology.
</p>

<p>
    When <code>Inline</code> is <code>true</code>, this sets the <code>AutoFocus</code> of the first
    focusable control.
</p>

<Heading Level="HeadingLevel.H2">Methods</Heading>

<p>
    The <code>Clear</code> method will clear the current value. For non-nullable types, this will
    result in the default value (<code>DateTimeOffset.Now</code>).
</p>

<p>
    The <code>FocusAsync</code> method will give the input focus. When <code>Inline</code> is
    <code>true</code>, this sets the focus on the first focusable control.
</p>

<Heading Level="HeadingLevel.H2">Customization</Heading>

<p>
    You can set the color scheme to any theme color with the <code>ThemeColor</code> property.
</p>

<Collapse Class="align-self-stretch outlined mb-3" BodyClass="codeblock pre-razor-code">
    <TitleContent>
        <div class="row justify-content-center">
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" />
                <DateTimeInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="filled" />
                <DateTimeInput TValue="string" Label="Primary" HelpText="Some help text" ThemeColor="ThemeColor.Primary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" />
                <DateTimeInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="filled" />
                <DateTimeInput TValue="string" Label="Secondary" HelpText="Some help text" ThemeColor="ThemeColor.Secondary" Class="outlined" />
            </div>
            <div class="row fill align-items-center gap-2">
                <DateTimeInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" />
                <DateTimeInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="filled" />
                <DateTimeInput TValue="string" Label="Tertiary" HelpText="Some help text" ThemeColor="ThemeColor.Tertiary" Class="outlined" />
            </div>
        </div>
    </TitleContent>
    <ChildContent>
        @CodeFormatter.CodeToMarkup(@"<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" />
    <DateTimeInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Primary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Primary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" />
    <DateTimeInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Secondary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Secondary"" Class=""outlined"" />
</div>
<div class=""row fill align-items-center gap-2"">
    <DateTimeInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" />
    <DateTimeInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""filled"" />
    <DateTimeInput TValue=""string"" Label=""Tertiary"" HelpText=""Some help text"" ThemeColor=""ThemeColor.Tertiary"" Class=""outlined"" />
</div>")
    </ChildContent>
</Collapse>

<p>
    The <code>InputClass</code> and <code>InputStyle</code> properties can be used to control the
    CSS attributes of the input itself, while the <code>InputAttributes</code> property can be used
    to assign arbitrary attributes to it.
</p>

<Heading Level="HeadingLevel.H3">Validation</Heading>

<p>
    See <a href="./components/validation">Validation</a> for information about validating Tavenem
    Blazor Framework form components.
</p>

@code {
    private DateType _dateType = DateType.Date;
    private DateTime _disabled = DateTime.Now;
    private string _value1 = DateTime.Now.ToString();
    private DateTime _value2 = DateTime.Now;
}
