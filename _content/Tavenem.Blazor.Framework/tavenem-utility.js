const e={},n=["Arial","Arial Black","Comic Sans MS","Courier New","Georgia","Impact","Microsoft Sans Serif","Tahoma","Times New Roman","Trebuchet MS","Verdana"];let t=0;function r(n,r,i,o,s,a){const c=function(e){const n=Array.from(s,(n=>F(e,n)));r.invokeMethodAsync(o,...n),a&&e.stopPropagation()};return n.addEventListener(i,c),e[++t]=c,t}function i(e,n){e&&(e.className=n)}function o(e,n,t){e&&e.style.setProperty(n,t)}async function s(e,n,t){const r=await t.arrayBuffer(),i=new File([r],e,{type:n}),o=URL.createObjectURL(i);a(e,o),URL.revokeObjectURL(o)}function a(e,n,t){const r=document.createElement("a");r.href=n,r.target="_blank",t||(r.download=e??""),r.click(),r.remove()}function c(e){for(;e&&e instanceof Element;e=e.parentNode)if("fixed"===window.getComputedStyle(e).getPropertyValue("position"))return!0;return!1}function l(e,n=0,t=0){if(e){const r=A(e);if(r.length<=t)e.focus();else if(r.length<=n){const e=r[r.length-1];e instanceof HTMLElement&&e.focus()}else{const e=r[n];e instanceof HTMLElement&&e.focus()}}}function f(e,n=0,t=0){if(e){const r=A(e);if(r.length<=t)e.focus();else if(r.length-n-1<0){const e=r[0];e instanceof HTMLElement&&e.focus()}else{const e=r[r.length-n-1];e instanceof HTMLElement&&e.focus()}}}function d(e){if(!e)return;const n=JSON.parse(JSON.stringify(e.getBoundingClientRect()));return n.scrollY=window.scrollY||document.documentElement.scrollTop,n.scrollX=window.scrollX||document.documentElement.scrollLeft,n.windowHeight=window.innerHeight,n.windowWidth=window.innerWidth,n}function u(e){if(!e)return;const n=e.children&&e.children[0];return n&&n instanceof HTMLElement?d(n):void 0}function m(e){if(!e)return;const n=e.parentElement;return n?d(n):void 0}function g(){const e=[];for(const t of n)document.fonts.check("1em "+t)&&e.push(t);return e}function p(e){return e?e.textContent:""}function b(e,n,t){window.open(e,n,t)}async function h(e,n,t,r){const i=await t.arrayBuffer(),o=new File([i],e,{type:n}),s=URL.createObjectURL(o);return a(e,s,!0),r?(URL.revokeObjectURL(s),""):s}function v(){customElements.get("tf-icon")||(customElements.define("tf-icon",class extends HTMLElement{}),customElements.define("tf-close",class extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}).textContent="close"}}),customElements.define("tf-progress-circle",class extends HTMLElement{constructor(){super();const e=this.getAttribute("stroke")||"5";let n=e?Number.parseFloat(e):Number.NaN;Number.isFinite(n)||(n=3),n=Math.max(1,Math.min(30,n));const t=this.getAttribute("progress");let r=t?Number.parseFloat(t):Number.NaN;Number.isFinite(r)||(r=Number.NaN);const i=!Number.isFinite(r);r=Math.max(0,Math.min(100,r));const o=+(20-n/2).toFixed(2);this._circumference=+(2*o*Math.PI).toFixed(2);const s=1.4*Math.random();this._root=this.attachShadow({mode:"open"}),this._root.innerHTML=`<div class="progress-container"${i?" indeterminate":""}\n     role="progressbar"\n     aria-valuemin="0"\n     aria-valuemax="100"\n     ${i?"":'aria-valuenow="'+r+'"'}>\n    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 40 40">\n        <circle cx="20"\n                cy="20"\n                r="${o}"\n                fill="none"\n                stroke="var(--progress-color)"\n                stroke-width="${e}"\n                style="stroke-dasharray:${this._circumference} ${this._circumference};stroke-dashoffset:${this._circumference}" />\n    </svg>\n</div>\n<slot name="label"></slot>\n\n<style>\n    @keyframes tf-progress-rotate {\n        to {\n            transform: rotate(360deg);\n        }\n    }\n\n    @keyframes tf-progress-dash {\n        0% {\n            stroke-dasharray: 1px, 200px;\n            stroke-dashoffset: 0px;\n        }\n\n        50% {\n            stroke-dasharray: 100px, 200px;\n            stroke-dashoffset: -15px;\n        }\n\n        100% {\n            stroke-dasharray: 100px, 200px;\n            stroke-dashoffset: -${this._circumference-1}px;\n        }\n    }\n\n    .progress-container {\n        height: 100%;\n        left: 0;\n        position: absolute;\n        top: 0;\n        width: 100%;\n    }\n\n    .progress-container:not([indeterminate]) {\n        transition: transform 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    }\n\n    .progress-container[indeterminate] {\n        animation: tf-progress-rotate 1.4s linear infinite;\n        animation-delay: -${s}s;\n    }\n\n    svg:first-child {\n        height: 100%;\n        left: 0;\n        position: absolute;\n        top: 0;\n        width: 100%;\n    }\n\n    svg:first-child circle {\n        transform-origin: 50% 50%;\n    }\n\n    .progress-container:not([indeterminate]) svg:first-child circle {\n        transform: rotate(-90deg);\n        transition: stroke-dashoffset 300ms cubic-bezier(0.4, 0, 0.2, 1) 0ms;\n    }\n\n    .progress-container[indeterminate] svg:first-child circle {\n        animation: tf-progress-dash 1.4s ease-in-out infinite;\n        animation-delay: -${s}s;\n        stroke-dasharray: 80px, 200px;\n        stroke-dashoffset: 0px;\n    }\n\n    ::slotted(*) {\n        z-index: 1;\n    }\n</style>`}static get observedAttributes(){return["progress"]}attributeChangedCallback(e,n,t){"progress"===e&&(t?this.setProgress(Number.parseFloat(t)):this.setIndeterminate(!0))}setIndeterminate(e){const n=this._root.querySelector(".progress-container");n&&(e?(n.setAttribute("indeterminate","true"),n.removeAttribute("aria-valuenow")):n.removeAttribute("indeterminate"))}setProgress(e){if(!Number.isFinite(e))return void this.setIndeterminate(!0);this.setIndeterminate(!1),e=Math.max(0,Math.min(100,e));const n=(this._circumference-e/100*this._circumference).toFixed(2),t=this._root.querySelector(".progress-container svg:first-child circle");t&&(t.style.strokeDashoffset=n);const r=this._root.querySelector(".progress-container");r&&r.setAttribute("aria-valuenow",n)}}),customElements.define("tf-progress-linear",class extends HTMLElement{constructor(){super();const e=this.getAttribute("progress");let n=e?Number.parseFloat(e):Number.NaN;Number.isFinite(n)||(n=Number.NaN);const t=!Number.isFinite(n);n=Math.max(0,Math.min(100,n));const r=this.getAttribute("vertical");this._vertical=null!=r&&"false"!==r;const i=2.1*Math.random();this._root=this.attachShadow({mode:"open"}),this._root.innerHTML=`<div class="progress-bar${this._vertical?" vertical":""}"${t?" indeterminate":""}\n     role="progressbar"\n     aria-valuemin="0"\n     aria-valuemax="100"\n     ${t?"":'aria-valuenow="'+n+'"'}>\n</div>\n<slot name="label"></slot>\n\n<style>\n    @keyframes tf-progress-indeterminate1 {\n        0% {\n            left: -35%;\n            right: 100%;\n        }\n\n        60% {\n            left: 100%;\n            right: -90%;\n        }\n\n        100% {\n            left: 100%;\n            right: -90%;\n        }\n    }\n\n    @keyframes tf-progress-indeterminate2 {\n        0% {\n            left: -200%;\n            right: 100%;\n        }\n\n        60% {\n            left: 107%;\n            right: -8%;\n        }\n\n        100% {\n            left: 107%;\n            right: -8%;\n        }\n    }\n\n    @keyframes tf-progress-vertical-indeterminate1 {\n        0% {\n            bottom: -35%;\n            top: 100%;\n        }\n\n        60% {\n            bottom: 100%;\n            top: -90%;\n        }\n\n        100% {\n            bottom: 100%;\n            top: -90%;\n        }\n    }\n\n    @keyframes tf-progress-vertical-indeterminate2 {\n        0% {\n            bottom: -200%;\n            top: 100%;\n        }\n\n        60% {\n            bottom: 107%;\n            top: -8%;\n        }\n\n        100% {\n            bottom: 107%;\n            top: -8%;\n        }\n    }\n\n    @keyframes tf-progress-gradient {\n        0% {\n            background-position: left bottom;\n        }\n\n        100% {\n            background-position: right bottom;\n        }\n    }\n\n    @keyframes tf-progress-gradient-vertical {\n        0% {\n            background-position: left bottom;\n        }\n\n        100% {\n            background-position: left top;\n        }\n    }\n\n    .progress-bar {\n        background-color: var(--progress-background-color);\n        height: 100%;\n        left: 0;\n        overflow: hidden;\n        position: absolute;\n        top: 0;\n        width: 100%;\n    }\n\n    .progress-bar:before, .progress-bar:after {\n        content: '';\n        display: block;\n        height: 100%;\n        left: 0;\n        position: absolute;\n        top: 0;\n        transition: transform 0.2s linear;\n        transform-origin: left;\n        width: auto;\n    }\n\n    .progress-bar:before {\n        background-color: var(--progress-color);\n    }\n\n    .progress-bar[indeterminate]:before {\n        animation: tf-progress-indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n        animation-delay: -${i}s;\n    }\n\n    .progress-bar:not([indeterminate]):before, .progress-bar:not([indeterminate]):after {\n        width: calc(1% * var(--progress-percent));\n    }\n\n    .progress-bar[indeterminate]:after {\n        animation: tf-progress-indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;\n        animation-delay: -${i}s;\n        background-color: var(--progress-color);\n    }\n\n    .progress-bar:not([indeterminate]):after {\n        animation: tf-progress-gradient 1s linear infinite;\n        animation-delay: -${i}s;\n        background: linear-gradient(to left, #ffffff05, #00000050 50%, #ffffff05 100%) repeat;\n        background-size: 50% 100%;\n    }\n\n    .progress-bar.vertical:before, .progress-bar.vertical:after {\n        height: auto;\n        width: 100%;\n    }\n\n    .progress-bar[indeterminate].vertical:before {\n        animation: tf-progress-vertical-indeterminate1 2.1s cubic-bezier(0.65, 0.815, 0.735, 0.395) infinite;\n        animation-delay: -${i}s;\n    }\n\n    .progress-bar[indeterminate].vertical:after {\n        animation: tf-progress-vertical-indeterminate2 2.1s cubic-bezier(0.165, 0.84, 0.44, 1) 1.15s infinite;\n        animation-delay: -${i}s;\n    }\n\n    .progress-bar:not([indeterminate]).vertical:before, .progress-bar:not([indeterminate]).vertical:after {\n        height: 100%;\n        transform: translateY(calc(1% * (100 - var(--progress-percent))));\n    }\n\n    .progress-bar:not([indeterminate]).vertical:after {\n        animation: tf-progress-gradient-vertical 1s linear infinite;\n        animation-delay: -${i}s;\n        background: linear-gradient(to top, #ffffff05, #00000050 50%, #ffffff05 100%) repeat;\n        background-size: 100% 50%;\n    }\n\n    ::slotted(*) {\n        z-index: 1;\n    }\n</style>`,this.setProgress(n)}static get observedAttributes(){return["progress"]}attributeChangedCallback(e,n,t){"progress"===e&&(t?this.setProgress(Number.parseFloat(t)):this.setIndeterminate(!0))}setIndeterminate(e){const n=this._root.querySelector("div");n&&(e?(n.setAttribute("indeterminate","true"),n.removeAttribute("aria-valuenow")):n.removeAttribute("indeterminate"))}setProgress(e){if(!Number.isFinite(e))return void this.setIndeterminate(!0);this.setIndeterminate(!1),e=+(e=Math.max(0,Math.min(100,e))).toFixed(0);const n=this._root.querySelector(".progress-bar");n&&(n.setAttribute("aria-valuenow",`${e}`),n.style.setProperty("--progress-percent",`${e}`))}}))}function y(n,t,r){n&&(n.removeEventListener(t,e[r]),delete e[r])}function k(e,n,t){const r=document.getElementById(e);r&&y(r,n,t)}function x(e){if(e){const n=e.savedFocus;delete e.savedFocus,n&&n.focus()}}function w(e){URL.revokeObjectURL(e)}function N(e){e&&document.activeElement instanceof HTMLElement&&(e.savedFocus=document.activeElement)}function M(e){e&&e.select()}function E(e,n,t){e&&(e.setSelectionRange?e.setSelectionRange(n,t):e.selectionStart&&(e.selectionStart=n,e.selectionEnd=t),e.focus())}function L(e){if(!e)return;const n=document.getElementById(e);n&&!n.classList.contains("shake")&&(n.classList.add("shake"),setTimeout((()=>n.classList.remove("shake")),1e3))}function A(e){return e.querySelectorAll("a[href]:not([tabindex='-1']),area[href]:not([tabindex='-1']),button:not([disabled]):not([tabindex='-1']),input:not([disabled]):not([tabindex='-1']):not([type='hidden']):not([hidden]),select:not([disabled]):not([tabindex='-1']),textarea:not([disabled]):not([tabindex='-1']),iframe:not([tabindex='-1']),details:not([tabindex='-1']),[tabindex]:not([tabindex='-1']),[contentEditable=true]:not([tabindex='-1']")}function F(e,n){if(null==e)return null;if("number"==typeof e||"string"==typeof e||"boolean"==typeof e)return e;let t=Array.isArray(e)?[]:{};n||(n="*");for(let r in e){let i,o=e[r];if("function"!=typeof o&&null!==o){if("*"!=n){if(i=Array.isArray(e)?n:n[r],!i)continue}else i="*";if("object"==typeof o)if(Array.isArray(o)||o.length){t[r]=[];for(let e=0;e<o.length;e++){const n=o[e];"object"==typeof n?t[r].push(F(n,i)):t[r].push(n)}}else 0===o.length?t[r]=[]:t[r]=F(o,i);else o===1/0&&(o="Infinity"),null!==o&&(t[r]=o)}}return t}export{r as addEventListener,i as changeCssClassName,o as changeCssVariable,s as downloadStream,a as downloadUrl,c as elementHasFixedAncestors,l as focusFirstElement,f as focusLastElement,d as getBoundingClientRect,u as getClientRectFromFirstChild,m as getClientRectFromParent,g as getFonts,p as getTextContent,b as open,h as openStream,v as registerComponents,y as removeEventListener,k as removeEventListenerById,x as restoreElementFocus,w as revokeURL,N as saveElementFocus,M as select,E as selectRange,L as shake};
//# sourceMappingURL=tavenem-utility.js.map
