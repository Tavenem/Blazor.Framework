var l=class{_dotNetRef;_observervedElements;_resizeObserver;_throttleResizeHandlerId;constructor(e){this._dotNetRef=e,this._observervedElements=[],this._throttleResizeHandlerId=-1,this._resizeObserver=new ResizeObserver(t=>{let n=[];for(let s of t){let r=s.target,o=this._observervedElements.find(c=>c.element==r);o&&(o.isInitilized?n.push({id:o.id,size:s.target.getBoundingClientRect()}):o.isInitilized=!0)}n.length>0&&(this._throttleResizeHandlerId>=0&&clearTimeout(this._throttleResizeHandlerId),this._throttleResizeHandlerId=window.setTimeout(this.resizeHandler.bind(this,n),200))})}resizeHandler(e){if(this._dotNetRef)try{this._dotNetRef.invokeMethodAsync("OnSizeChanged",e)}catch(t){console.error("Error in OnSizeChanged handler:",{error:t})}}connect(e,t){let n=[];for(let s=0;s<e.length;s++){let r=e[s],o=t[s];n.push(r.getBoundingClientRect()),this._observervedElements.findIndex(c=>c.id===o)===-1&&(this._observervedElements.push({element:r,id:o,isInitilized:!1}),this._resizeObserver.observe(r))}return n}disconnect(e){let t=this._observervedElements.find(n=>n.id==e);if(t){let n=t.element;this._resizeObserver.unobserve(n);let s=this._observervedElements.indexOf(t);this._observervedElements.splice(s,1)}}dispose(){this._resizeObserver.disconnect(),this._dotNetRef=void 0}},d={};function h(i,e,t,n){if(!d[i]){let r=new l(e);d[i]=r}return d[i].connect(t,n)}function f(i,e){let t=d[i];t&&t.disconnect(e)}function v(i){let e=d[i];e&&(e.dispose(),delete d[i])}export{h as connect,f as disconnect,v as dispose};
//# sourceMappingURL=tavenem-resize.js.map
