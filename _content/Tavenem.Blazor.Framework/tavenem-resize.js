!function(){const e={};try{if(process)return process.env=Object.assign({},process.env),void Object.assign(process.env,e)}catch(e){}globalThis.process={env:e}}();class e{constructor(e){this._dotNetRef=e,this._observervedElements=[],this._throttleResizeHandlerId=-1,this._resizeObserver=new ResizeObserver((e=>{const t=[];for(const s of e){const e=s.target,n=this._observervedElements.find((t=>t.element==e));n&&(n.isInitilized?t.push({id:n.id,size:s.target.getBoundingClientRect()}):n.isInitilized=!0)}t.length>0&&(this._throttleResizeHandlerId>=0&&clearTimeout(this._throttleResizeHandlerId),this._throttleResizeHandlerId=window.setTimeout(this.resizeHandler.bind(this,t),200))}))}resizeHandler(e){if(this._dotNetRef)try{this._dotNetRef.invokeMethodAsync("OnSizeChanged",e)}catch(e){console.error("Error in OnSizeChanged handler:",{error:e})}}connect(e,t){const s=[];for(let n=0;n<e.length;n++){const i=e[n],r=t[n];s.push(i.getBoundingClientRect()),-1===this._observervedElements.findIndex((e=>e.id===r))&&(this._observervedElements.push({element:i,id:r,isInitilized:!1}),this._resizeObserver.observe(i))}return s}disconnect(e){const t=this._observervedElements.find((t=>t.id==e));if(t){const e=t.element;this._resizeObserver.unobserve(e);const s=this._observervedElements.indexOf(t);this._observervedElements.splice(s,1)}}dispose(){this._resizeObserver.disconnect(),this._dotNetRef=void 0}}const t={};function s(s,n,i,r){if(!t[s]){const i=new e(n);t[s]=i}return t[s].connect(i,r)}function n(e,s){const n=t[e];n&&n.disconnect(s)}function i(e){const s=t[e];s&&(s.dispose(),delete t[e])}export{s as connect,n as disconnect,i as dispose};
//# sourceMappingURL=tavenem-resize.js.map
