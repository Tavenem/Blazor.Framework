{
  "version": 3,
  "sources": ["../../../../../src/assets/scripts/tavenem-resize.ts"],
  "sourcesContent": ["\uFEFFinterface IObservedElement {\n    element: HTMLElement;\n    id: string;\n    isInitilized: boolean;\n}\n\ninterface ISizeChangeUpdateInfo {\n    id: string;\n    size: DOMRect;\n}\n\nclass ResizeObserverInternal {\n    _dotNetRef: DotNet.DotNetObject | undefined;\n    _observervedElements: IObservedElement[];\n    _resizeObserver: ResizeObserver;\n    _throttleResizeHandlerId: number;\n\n    constructor(dotNetRef: DotNet.DotNetObject) {\n        this._dotNetRef = dotNetRef;\n        this._observervedElements = [];\n        this._throttleResizeHandlerId = -1;\n\n        this._resizeObserver = new ResizeObserver(entries => {\n            const changes: ISizeChangeUpdateInfo[] = [];\n            for (const entry of entries) {\n                const target = entry.target;\n                const affectedObservedElement = this._observervedElements.find((x) => x.element == target);\n                if (affectedObservedElement) {\n                    if (affectedObservedElement.isInitilized) {\n                        changes.push({\n                            id: affectedObservedElement.id,\n                            size: entry.target.getBoundingClientRect(),\n                        });\n                    }\n                    else {\n                        affectedObservedElement.isInitilized = true;\n                    }\n                }\n            }\n\n            if (changes.length > 0) {\n                if (this._throttleResizeHandlerId >= 0) {\n                    clearTimeout(this._throttleResizeHandlerId);\n                }\n\n                this._throttleResizeHandlerId = window.setTimeout(\n                    this.resizeHandler.bind(this, changes),\n                    200);\n\n            }\n        });\n    }\n    \n    resizeHandler(changes: ISizeChangeUpdateInfo[]) {\n        if (this._dotNetRef) {\n            try {\n                this._dotNetRef.invokeMethodAsync(\"OnSizeChanged\", changes);\n            } catch (error) {\n                console.error(\"Error in OnSizeChanged handler:\", { error });\n            }\n        }\n    }\n\n    connect(elements: HTMLElement[], elementIds: string[]) {\n        const results: DOMRect[] = [];\n\n        for (let i = 0; i < elements.length; i++) {\n            const element = elements[i];\n            const elementId = elementIds[i];\n            results.push(element.getBoundingClientRect());\n\n            if (this._observervedElements.findIndex(v => v.id === elementId) !== -1) {\n                continue;\n            }\n            this._observervedElements.push({\n                element: element,\n                id: elementId,\n                isInitilized: false,\n            });\n            this._resizeObserver.observe(element);\n        }\n\n        return results;\n    }\n\n    disconnect(elementId: string) {\n        const affectedObservedElement = this._observervedElements.find((x) => x.id == elementId);\n        if (affectedObservedElement) {\n            const element = affectedObservedElement.element;\n            this._resizeObserver.unobserve(element);\n\n            const index = this._observervedElements.indexOf(affectedObservedElement);\n            this._observervedElements.splice(index, 1);\n        }\n    }\n\n    dispose() {\n        this._resizeObserver.disconnect();\n        this._dotNetRef = undefined;\n    }\n}\n\nconst _observers: Record<string, ResizeObserverInternal> = {};\n\nexport function connect(\n    id: string,\n    dotNetRef: DotNet.DotNetObject,\n    elements: HTMLElement[],\n    elementIds: string[]) {\n    const existingEntry = _observers[id];\n    if (!existingEntry) {\n        const observer = new ResizeObserverInternal(dotNetRef);\n        _observers[id] = observer;\n    }\n\n    return _observers[id].connect(elements, elementIds);\n}\n\nexport function disconnect(id: string, elementId: string) {\n    const existingEntry = _observers[id];\n    if (existingEntry) {\n        existingEntry.disconnect(elementId);\n    }\n}\n\nexport function dispose(id: string) {\n    const existingEntry = _observers[id];\n    if (existingEntry) {\n        existingEntry.dispose();\n        delete _observers[id];\n    }\n}\n"],
  "mappings": "AAWA,IAAMA,EAAN,KAA6B,CACzB,WACA,qBACA,gBACA,yBAEA,YAAYC,EAAgC,CACxC,KAAK,WAAaA,EAClB,KAAK,qBAAuB,CAAC,EAC7B,KAAK,yBAA2B,GAEhC,KAAK,gBAAkB,IAAI,eAAeC,GAAW,CACjD,IAAMC,EAAmC,CAAC,EAC1C,QAAWC,KAASF,EAAS,CACzB,IAAMG,EAASD,EAAM,OACfE,EAA0B,KAAK,qBAAqB,KAAMC,GAAMA,EAAE,SAAWF,CAAM,EACrFC,IACIA,EAAwB,aACxBH,EAAQ,KAAK,CACT,GAAIG,EAAwB,GAC5B,KAAMF,EAAM,OAAO,sBAAsB,CAC7C,CAAC,EAGDE,EAAwB,aAAe,GAGnD,CAEIH,EAAQ,OAAS,IACb,KAAK,0BAA4B,GACjC,aAAa,KAAK,wBAAwB,EAG9C,KAAK,yBAA2B,OAAO,WACnC,KAAK,cAAc,KAAK,KAAMA,CAAO,EACrC,GAAG,EAGf,CAAC,CACL,CAEA,cAAcA,EAAkC,CAC5C,GAAI,KAAK,WACL,GAAI,CACA,KAAK,WAAW,kBAAkB,gBAAiBA,CAAO,CAC9D,OAASK,EAAO,CACZ,QAAQ,MAAM,kCAAmC,CAAE,MAAAA,CAAM,CAAC,CAC9D,CAER,CAEA,QAAQC,EAAyBC,EAAsB,CACnD,IAAMC,EAAqB,CAAC,EAE5B,QAASC,EAAI,EAAGA,EAAIH,EAAS,OAAQG,IAAK,CACtC,IAAMC,EAAUJ,EAASG,CAAC,EACpBE,EAAYJ,EAAWE,CAAC,EAC9BD,EAAQ,KAAKE,EAAQ,sBAAsB,CAAC,EAExC,KAAK,qBAAqB,UAAUE,GAAKA,EAAE,KAAOD,CAAS,IAAM,KAGrE,KAAK,qBAAqB,KAAK,CAC3B,QAASD,EACT,GAAIC,EACJ,aAAc,EAClB,CAAC,EACD,KAAK,gBAAgB,QAAQD,CAAO,EACxC,CAEA,OAAOF,CACX,CAEA,WAAWG,EAAmB,CAC1B,IAAMR,EAA0B,KAAK,qBAAqB,KAAMC,GAAMA,EAAE,IAAMO,CAAS,EACvF,GAAIR,EAAyB,CACzB,IAAMO,EAAUP,EAAwB,QACxC,KAAK,gBAAgB,UAAUO,CAAO,EAEtC,IAAMG,EAAQ,KAAK,qBAAqB,QAAQV,CAAuB,EACvE,KAAK,qBAAqB,OAAOU,EAAO,CAAC,CAC7C,CACJ,CAEA,SAAU,CACN,KAAK,gBAAgB,WAAW,EAChC,KAAK,WAAa,MACtB,CACJ,EAEMC,EAAqD,CAAC,EAErD,SAASC,EACZC,EACAlB,EACAQ,EACAC,EAAsB,CAEtB,GAAI,CADkBO,EAAWE,CAAE,EACf,CAChB,IAAMC,EAAW,IAAIpB,EAAuBC,CAAS,EACrDgB,EAAWE,CAAE,EAAIC,CACrB,CAEA,OAAOH,EAAWE,CAAE,EAAE,QAAQV,EAAUC,CAAU,CACtD,CAEO,SAASW,EAAWF,EAAYL,EAAmB,CACtD,IAAMQ,EAAgBL,EAAWE,CAAE,EAC/BG,GACAA,EAAc,WAAWR,CAAS,CAE1C,CAEO,SAASS,EAAQJ,EAAY,CAChC,IAAMG,EAAgBL,EAAWE,CAAE,EAC/BG,IACAA,EAAc,QAAQ,EACtB,OAAOL,EAAWE,CAAE,EAE5B",
  "names": ["ResizeObserverInternal", "dotNetRef", "entries", "changes", "entry", "target", "affectedObservedElement", "x", "error", "elements", "elementIds", "results", "i", "element", "elementId", "v", "index", "_observers", "connect", "id", "observer", "disconnect", "existingEntry", "dispose"]
}
