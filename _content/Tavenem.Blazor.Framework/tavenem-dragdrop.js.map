{
  "version": 3,
  "sources": ["../../../../../src/assets/scripts/tavenem-dragdrop.ts"],
  "sourcesContent": ["\uFEFFtype DropEffect = \"none\" | \"copy\" | \"link\" | \"move\" | null | undefined;\n\ninterface IKeyValuePair {\n    key: string;\n    value: any;\n}\n\ninterface IDragStartData {\n    data: IKeyValuePair[] | null | undefined;\n    effectAllowed: \"none\" | \"copy\" | \"copyLink\" | \"copyMove\" | \"link\" | \"linkMove\" | \"move\" | \"all\" | null | undefined;\n}\n\ninterface IDragListenElement extends HTMLElement {\n    getDragDataListener: ((event: DragEvent) => Promise<void>) | null | undefined;\n    dragendListener: ((event: DragEvent) => void) | null | undefined;\n}\n\ninterface IDropListenElement extends HTMLElement {\n    dragstartListener: ((event: DragEvent) => void) | null | undefined;\n    dragenterListener: ((event: DragEvent) => Promise<void>) | null | undefined;\n    dragleaveListener: ((event: DragEvent) => Promise<void>) | null | undefined;\n    dragoverListener: ((event: DragEvent) => void) | null | undefined;\n    dropListener: ((event: DragEvent) => void) | null | undefined;\n}\n\nexport function cancelDragListener(elementId: string) {\n    if (!elementId) {\n        return;\n    }\n    const element = document.getElementById(elementId) as IDragListenElement;\n    if (!element) {\n        return;\n    }\n\n    if (element instanceof HTMLElement) {\n        if (element.getDragDataListener) {\n            element.removeEventListener('dragstart', element.getDragDataListener);\n        }\n        if (element.dragendListener) {\n            element.removeEventListener('dragend', element.dragendListener);\n        }\n    }\n}\n\nexport function cancelDropListener(elementId: string) {\n    if (!elementId) {\n        return;\n    }\n    const element = document.getElementById(elementId) as IDropListenElement;\n    if (!element) {\n        return;\n    }\n\n    if (element instanceof HTMLElement) {\n        if (element.dragstartListener) {\n            element.removeEventListener('dragstart', element.dragstartListener);\n        }\n        if (element.dragenterListener) {\n            element.removeEventListener('dragenter', element.dragenterListener);\n        }\n        if (element.dragleaveListener) {\n            element.removeEventListener('dragleave', element.dragleaveListener);\n        }\n        if (element.dragoverListener) {\n            element.removeEventListener('dragover', element.dragoverListener);\n        }\n        if (element.dropListener) {\n            element.removeEventListener('drop', element.dropListener);\n        }\n    }\n}\n\nexport function listenForDrag(\n    this: any,\n    dotnetReference: DotNet.DotNetObject | null | undefined,\n    elementId: string | null | undefined,\n    dragElementId: string | null | undefined) {\n    if (!dotnetReference || !elementId) {\n        return;\n    }\n    const element = document.getElementById(elementId) as IDragListenElement;\n    if (!(element instanceof HTMLElement)) {\n        return;\n    }\n\n    element.getDragDataListener = getDragData.bind(this, dotnetReference, dragElementId);\n    element.dragendListener = droppedHandler.bind(this, dotnetReference);\n\n    element.addEventListener('dragstart', element.getDragDataListener);\n    element.addEventListener('dragend', element.dragendListener);\n}\n\nexport function listenForDrop(\n    this: any,\n    dotnetReference: DotNet.DotNetObject | null | undefined,\n    elementId: string | null | undefined,\n    effect: DropEffect | null | undefined) {\n    if (!dotnetReference || !elementId) {\n        return;\n    }\n    const element = document.getElementById(elementId) as IDropListenElement;\n    if (!(element instanceof HTMLElement)) {\n        return;\n    }\n\n    element.dragstartListener = dragStartHandler.bind(this);\n    element.dragenterListener = dragEnterHandler.bind(this, dotnetReference, effect);\n    element.dragleaveListener = dragLeaveHandler.bind(this, dotnetReference, elementId);\n    element.dragoverListener = dragOverHandler.bind(this);\n    element.dropListener = dropHandler.bind(this, dotnetReference);\n\n    element.addEventListener('dragstart', element.dragstartListener);\n    element.addEventListener('dragenter', element.dragenterListener);\n    element.addEventListener('dragleave', element.dragleaveListener);\n    element.addEventListener('dragover', element.dragoverListener);\n    element.addEventListener('drop', element.dropListener);\n}\n\nasync function dragEnterHandler(\n    this: any,\n    dotnetReference: DotNet.DotNetObject,\n    effect: DropEffect | null | undefined,\n    event: DragEvent) {\n    if (!event.dataTransfer) {\n        return;\n    }\n\n    if (effect) {\n        event.dataTransfer.dropEffect = effect;\n    }\n\n    if (effect === \"none\") {\n        return;\n    }\n\n    try {\n        effect = dotnetReference.invokeMethod<DropEffect | null | undefined>('GetDropEffect', event.dataTransfer.types);\n        if (effect) {\n            event.dataTransfer.dropEffect = effect;\n        }\n    } catch (error) {\n        console.error('Error in dragEnterHandler: ', { error });\n    }\n\n    if (effect !== \"none\") {\n        event.preventDefault();\n    }\n\n    try {\n        dotnetReference.invokeMethod<DropEffect | null | undefined>('SetDropValid', effect !== \"none\");\n    } catch (error) {\n        console.error('Error in dragEnterHandler: ', { error });\n    }\n}\n\nasync function dragLeaveHandler(\n    this: any,\n    dotnetReference: DotNet.DotNetObject,\n    elementId: string,\n    event: DragEvent) {\n    const element = document.getElementById(elementId);\n    if (!(element instanceof HTMLElement)\n        || !(event.relatedTarget instanceof HTMLElement)\n        || (event.relatedTarget.id !== elementId\n        && !element.contains(event.relatedTarget))) {\n        try {\n            dotnetReference.invokeMethod<DropEffect | null | undefined>('SetDropValid', null);\n        } catch (error) {\n            console.error('Error in dragEnterHandler: ', { error });\n        }\n    }\n}\n\nfunction dragOverHandler(event: DragEvent) {\n    event.preventDefault();\n    if (!event.dataTransfer) {\n        return;\n    }\n    if (event.ctrlKey\n        && (event.dataTransfer.effectAllowed === \"copy\"\n            || event.dataTransfer.effectAllowed === \"copyLink\"\n            || event.dataTransfer.effectAllowed === \"copyMove\")) {\n        event.dataTransfer.dropEffect = \"copy\";\n    } else if (event.altKey\n        && (event.dataTransfer.effectAllowed === \"link\"\n            || event.dataTransfer.effectAllowed === \"copyLink\"\n            || event.dataTransfer.effectAllowed === \"linkMove\")) {\n        event.dataTransfer.dropEffect = \"link\";\n    } else {\n        event.dataTransfer.dropEffect = \"move\";\n    }\n}\n\nfunction dragStartHandler(event: DragEvent) {\n    if (event.dataTransfer\n        && event.target instanceof HTMLElement) {\n        event.dataTransfer.setData('', event.target.id);\n    }\n}\n\nfunction dropHandler(this: any, dotnetReference: DotNet.DotNetObject, event: DragEvent) {\n    if (!event.dataTransfer) {\n        return;\n    }\n\n    event.preventDefault();\n\n    let count = 0;\n    const data: IKeyValuePair[] = [];\n    for (const type of event.dataTransfer.types) {\n        if (type !== \"Files\") {\n            data.push({\n                key: type,\n                value: event.dataTransfer.getData(type),\n            });\n            count++;\n        }\n    }\n\n    if (count > 0) {\n        try {\n            dotnetReference.invokeMethodAsync('DropHandled', data);\n        } catch (error) {\n            console.error('Error in dropHandler: ', { error });\n        }\n    }\n}\n\nfunction droppedHandler(\n    this: any,\n    dotnetReference: DotNet.DotNetObject,\n    event: DragEvent) {\n    if (!event.dataTransfer) {\n        return;\n    }\n\n    try {\n        dotnetReference.invokeMethodAsync('DroppedHandled', getEffect(event));\n    } catch (error) {\n        console.error('Error in droppedHandler: ', { error });\n    }\n}\n\nasync function getDragData(\n    this: any,\n    dotnetReference: DotNet.DotNetObject,\n    dragElementId: string | null | undefined,\n    event: DragEvent) {\n    if (!event.dataTransfer) {\n        return;\n    }\n\n    try {\n        const data = dotnetReference.invokeMethod<IDragStartData | null | undefined>('GetDragData');\n        if (!data || !data.data) {\n            return;\n        }\n\n        if (dragElementId) {\n            const dragElement = document.getElementById(dragElementId);\n            if (dragElement) {\n                event.dataTransfer.setDragImage(dragElement, 0, 0);\n            }\n        }\n\n        if (data.effectAllowed) {\n            event.dataTransfer.effectAllowed = data.effectAllowed;\n        }\n\n        for (const pair of data.data) {\n            if (typeof (pair.value) !== \"string\"\n                || !pair.value.length) {\n                continue;\n            }\n            event.dataTransfer.setData(pair.key, pair.value);\n        }\n    } catch (error) {\n        console.error('Error in getDragData: ', { error });\n    }\n}\n\nfunction getEffect(event: DragEvent) {\n    if (!event.dataTransfer) {\n        return 0;\n    }\n    switch (event.dataTransfer.dropEffect) {\n        case \"none\":\n            return 0;\n        case \"copy\":\n            return 1;\n        case \"link\":\n            return 1 << 1;\n        case \"move\":\n            return 1 << 2;\n    }\n}"],
  "mappings": "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",
  "names": ["cancelDragListener", "elementId", "element", "cancelDropListener", "listenForDrag", "dotnetReference", "dragElementId", "getDragData", "droppedHandler", "listenForDrop", "effect", "dragStartHandler", "dragEnterHandler", "dragLeaveHandler", "dragOverHandler", "dropHandler", "event", "error", "count", "data", "type", "getEffect", "dragElement", "pair"]
}
